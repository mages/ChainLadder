[{"path":[]},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"claims-reserving-in-insurance","dir":"Articles","previous_headings":"Introduction","what":"Claims reserving in insurance","title":"ChainLadder: Claims reserving with R","text":"insurance industry, unlike industries, sell products promises. insurance policy promise insurer policyholder pay future claims upfront received premium. result insurers don’t know upfront cost service, rely historical data analysis judgement predict sustainable price offering. General Insurance (Non-Life Insurance, e.g. motor, property casualty insurance) policies run period 12 months. However, claims payment process can take years even decades. Therefore often even delivery date product known insurers. particular losses arising casualty insurance can take long time settle even claims acknowledged may take time establish extent claims settlement cost. Claims can take years materialize. complex costly example claims asbestos liabilities, particularly connection mesothelioma lung damage arising prolonged exposure asbestos. research report working party Institute Faculty Actuaries estimated un-discounted cost UK mesothelioma-related claims UK Insurance Market period 2009 2050 around £10bn, see (Gravelsons et al. 2009). cost asbestos related claims US worldwide insurance industry estimate around $120bn 2002, see (Michaels 2002). Thus, come surprise biggest item liability side insurer’s balance sheet often provision reserves future claims payments. reserves can broken case reserves (outstanding claims), losses already reported insurance company losses incurred reported (IBNR) yet. Historically, reserving based deterministic calculations pen paper, combined expert judgement. Since 1980’s, arrival personal computer, spreadsheet software became popular reserving. Spreadsheets reduced calculation time, allowed actuaries test different scenarios sensitivity forecasts. computer became powerful, ideas sophisticated models started evolve. Changes regulatory requirements, e.g. Solvency II Europe, fostered research promoted use stochastic statistical techniques. particular, many countries extreme percentiles reserve deterioration fixed time period estimated purpose capital setting. years several methods models developed estimate level variability reserves insurance claims, see (Schmidt 2017) (England Verrall 2002) overview. practice Mack chain-ladder bootstrap chain-ladder models used many actuaries along stress testing / scenario analysis expert judgement estimate ranges reasonable outcomes, see surveys UK actuaries 2002, (Lyons et al. 2002), across Lloyd’s market 2012, (Orr 2012).","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"motivation","dir":"Articles","previous_headings":"The ChainLadder package","what":"Motivation","title":"ChainLadder: Claims reserving with R","text":"ChainLadder package provides various statistical methods typically used estimation outstanding claims reserves general insurance. package started presentations given Markus Gesmann Stochastic Reserving Seminar Institute Actuaries 2007 2008, followed talks Casualty Actuarial Society (CAS) meetings joined Dan Murphy 2008 Wayne Zhang 2010. Implementing reserving methods R several advantages. R provides: rich language statistical modelling data manipulations allowing fast prototyping active user base, publishes many extensions many interfaces data bases applications, MS Excel established framework End User Computing, including documentation, testing workflows version control systems code written plain text files, allowing effective knowledge transfer effective way collaborate internet built functions create reproducible research reports combination tools LaTeX RMarkdown easy set automated reporting facilities access academic research, often first implemented R","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"brief-package-overview","dir":"Articles","previous_headings":"The ChainLadder package","what":"Brief package overview","title":"ChainLadder: Claims reserving with R","text":"vignette give reader brief overview functionality ChainLadder package. functions discussed explained detail respective help files examples, see also (Gesmann 2014). set demos shipped packages list demos available via:","code":"demo(package=\"ChainLadder\")"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"installation","dir":"Articles","previous_headings":"The ChainLadder package","what":"Installation","title":"ChainLadder: Claims reserving with R","text":"can install ChainLadder usual way CRAN, e.g.: details installing packages see (R Development Core Team 2022b).","code":"install.packages('ChainLadder')"},{"path":[]},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"working-with-triangles","dir":"Articles","previous_headings":"Using the ChainLadder package","what":"Working with triangles","title":"ChainLadder: Claims reserving with R","text":"Historical insurance data often presented form triangle structure, showing development claims time exposure (origin) period. origin period year policy written earned, loss occurrence period. course origin period doesn’t yearly, e.g. quarterly monthly origin periods also often used. development period origin period also called age lag. Data diagonals present payments calendar period. Note, data individual policies usually aggregated homogeneous lines business, division levels perils. reserving methods ChainLadder package expect triangles input data sets development periods along columns origin period rows. package comes several example triangles. following R command list : Let’s look one example triangle closely. following triangle shows data Reinsurance Association America (RAA): triangle shows known values loss origin year annual evaluations thereafter. example, known values loss originating 1988 exposure period 1351, 6947, 13112 year ends 1988, 1989, 1990, respectively. latest diagonal – .e., vector 18834, 16704, …\\dots 2063 upper right lower left – shows recent evaluation available. column headings – 1, 2,…\\dots, 10 – hold ages (years) observations column relative beginning exposure period. example, 1988 origin year, age 13112 value, evaluated 1990-12-31, three years. objective reserving exercise forecast future claims development bottom right corner triangle potential developments beyond development age 10. Eventually claims given origin period settled, always obvious judge many years even decades take. speak long short tail business depending time takes pay claims.","code":"library(ChainLadder) data(package=\"ChainLadder\") RAA dev origin    1     2     3     4     5     6     7     8     9    10   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834   1982  106  4285  5396 10666 13782 15599 15496 16169 16704    NA   1983 3410  8992 13873 16141 18735 22214 22863 23466    NA    NA   1984 5655 11555 15766 21266 23425 26083 27067    NA    NA    NA   1985 1092  9565 15836 22169 25955 26180    NA    NA    NA    NA   1986 1513  6445 11702 12935 15852    NA    NA    NA    NA    NA   1987  557  4020 10946 12314    NA    NA    NA    NA    NA    NA   1988 1351  6947 13112    NA    NA    NA    NA    NA    NA    NA   1989 3133  5395    NA    NA    NA    NA    NA    NA    NA    NA   1990 2063    NA    NA    NA    NA    NA    NA    NA    NA    NA"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"plotting-triangles","dir":"Articles","previous_headings":"Using the ChainLadder package > Working with triangles","what":"Plotting triangles","title":"ChainLadder: Claims reserving with R","text":"first thing often want plot data get overview. data set class triangle ChainLadder package provides default plotting methods give graphical overview data: Claims development chart RAA triangle, one line per origin period. Setting argument lattice=TRUE produce individual plots origin period. Claims development chart RAA triangle, individual panels origin period notice plots triangle RAA presents claims developments origin years 1981 1990 cumulative form. information triangle plotting functions see help pages plot.triangle.","code":"plot(RAA/1000,  main = \"Claims development by origin year\") plot(RAA/1000, lattice=TRUE, main = \"Claims development by origin year\")"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"transforming-triangles-between-cumulative-and-incremental-representation","dir":"Articles","previous_headings":"Using the ChainLadder package","what":"Transforming triangles between cumulative and incremental representation","title":"ChainLadder: Claims reserving with R","text":"ChainLadder packages comes two helper functions, cum2incr incr2cum transform cumulative triangles incremental triangles vice versa:","code":"raa.inc <- cum2incr(RAA) ## Show first origin period and its incremental development raa.inc[1,] 1    2    3    4    5    6    7    8    9   10  5012 3257 2638  898 1734 2642 1828  599   54  172 raa.cum <- incr2cum(raa.inc) ## Show first origin period and its cumulative development raa.cum[1,] 1     2     3     4     5     6     7     8     9    10   5012  8269 10907 11805 13539 16181 18009 18608 18662 18834"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"importing-triangles-from-external-data-sources","dir":"Articles","previous_headings":"Using the ChainLadder package > Transforming triangles between cumulative and incremental representation","what":"Importing triangles from external data sources","title":"ChainLadder: Claims reserving with R","text":"cases want analyse data, usually stored data bases spreadsheets.","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"importing-a-triangle-from-a-spreadsheet","dir":"Articles","previous_headings":"","what":"ChainLadder: Claims reserving with R","title":"ChainLadder: Claims reserving with R","text":"many ways import data spreadsheet. quick dirty solution using CSV-file. Open new workbook copy triangle cell A1, first column accident origin period first row describing development period age. Ensure triangle formatting, commas separate thousands, cells saved characters. Screen shot triangle spreadsheet software. Now open R go following commands: Small data sets can transferred R backwards forwards via clipboard MS Windows. Select data set spreadsheet copy clipboard, go R type:","code":"myCSVfile <- \"path/to/folder/with/triangle.csv\" ## Use the R command: # myCSVfile <- file.choose() to select the file interactively tri <- read.csv(file=myCSVfile, header = FALSE) ## Use read.csv2 if semicolons are used as a separator likely ## to be the case if you are in continental Europe library(ChainLadder) ## Convert to triangle tri <- as.triangle(as.matrix(tri)) # Job done. tri <- read.table(file=\"clipboard\", sep=\"\\t\", na.strings=\"\")"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"reading-data-from-a-data-base","dir":"Articles","previous_headings":"","what":"ChainLadder: Claims reserving with R","title":"ChainLadder: Claims reserving with R","text":"R makes easy access data using SQL statements, e.g. via ODBC connection1, details see (R Development Core Team 2022a). ChainLadder packages includes demo showcase data can imported MS Access data base, see: section use data stored CSV-file2 demonstrate typical operations want carry data stored data bases. CSV stands comma separated values, stored text file. Note many European countries use comma decimal point semicolon field separator, see also help file read.csv2. cases triangles stored tables classical triangle shape. ChainLadder package contains CSV-file sample data long table format. read data R’s memory read.csv command look first couple rows summarise : Let’s focus one subset data. select RAA data : transform long table RAA data triangle use function .triangle. arguments specify column names origin development period column contains values: note data stored incremental data set. mentioned , now use function incr2cum transform triangle cumulative format. can transform triangle back data frame structure: particularly helpful like store results back data base. following figure gives idea potential data flow R data bases. Flow chart data R data bases","code":"demo(DatabaseExamples) filename <-  file.path(system.file(\"Database\",                                    package=\"ChainLadder\"),                        \"TestData.csv\") myData <- read.csv(filename) head(myData) origin dev  value lob 1   1977   1 153638 ABC 2   1978   1 178536 ABC 3   1979   1 210172 ABC 4   1980   1 211448 ABC 5   1981   1 219810 ABC 6   1982   1 205654 ABC summary(myData) origin          dev            value             lob             Min.   :   1   Min.   : 1.00   Min.   : -17657   Length:701          1st Qu.:   3   1st Qu.: 2.00   1st Qu.:  10324   Class :character    Median :   6   Median : 4.00   Median :  72468   Mode  :character    Mean   : 642   Mean   : 4.61   Mean   : 176632                       3rd Qu.:1979   3rd Qu.: 7.00   3rd Qu.: 197716                       Max.   :1991   Max.   :14.00   Max.   :3258646 raa <- subset(myData, lob %in% \"RAA\") head(raa) origin dev value lob 67   1981   1  5012 RAA 68   1982   1   106 RAA 69   1983   1  3410 RAA 70   1984   1  5655 RAA 71   1985   1  1092 RAA 72   1986   1  1513 RAA raa.tri <- as.triangle(raa,                        origin=\"origin\",                        dev=\"dev\",                        value=\"value\") raa.tri dev origin    1    2    3    4    5    6    7   8   9  10   1981 5012 3257 2638  898 1734 2642 1828 599  54 172   1982  106 4179 1111 5270 3116 1817 -103 673 535  NA   1983 3410 5582 4881 2268 2594 3479  649 603  NA  NA   1984 5655 5900 4211 5500 2159 2658  984  NA  NA  NA   1985 1092 8473 6271 6333 3786  225   NA  NA  NA  NA   1986 1513 4932 5257 1233 2917   NA   NA  NA  NA  NA   1987  557 3463 6926 1368   NA   NA   NA  NA  NA  NA   1988 1351 5596 6165   NA   NA   NA   NA  NA  NA  NA   1989 3133 2262   NA   NA   NA   NA   NA  NA  NA  NA   1990 2063   NA   NA   NA   NA   NA   NA  NA  NA  NA raa.df <- as.data.frame(raa.tri, na.rm=TRUE) head(raa.df) origin dev value 1981-1   1981   1  5012 1982-1   1982   1   106 1983-1   1983   1  3410 1984-1   1984   1  5655 1985-1   1985   1  1092 1986-1   1986   1  1513"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"creating-triangles-interactively","dir":"Articles","previous_headings":"Using the ChainLadder package > Transforming triangles between cumulative and incremental representation","what":"Creating triangles interactively","title":"ChainLadder: Claims reserving with R","text":"small data sets testing procedures, may useful create triangles interactively command line. two main ways proceed. first create matrix data (including missing values lower right portion triangle) convert triangle .triangle: may also create triangle directly triangle providing rows (columns) known data vectors, thereby omitting missing values:","code":"as.triangle(matrix(c(100, 150, 175, 180, 200,                      110, 168, 192, 205, NA,                      115, 169, 202, NA,  NA,                      125, 185, NA,  NA,  NA,                      150, NA,  NA,  NA,  NA),                    nrow = 5, byrow = TRUE)) dev origin   1   2   3   4   5      1 100 150 175 180 200      2 110 168 192 205  NA      3 115 169 202  NA  NA      4 125 185  NA  NA  NA      5 150  NA  NA  NA  NA triangle(c(100, 150, 175, 180, 200),          c(110, 168, 192, 205),          c(115, 169, 202),          c(125, 185),          150) dev origin   1   2   3   4   5      1 100 150 175 180 200      2 110 168 192 205  NA      3 115 169 202  NA  NA      4 125 185  NA  NA  NA      5 150  NA  NA  NA  NA"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"chain-ladder-methods","dir":"Articles","previous_headings":"","what":"Chain-ladder methods","title":"ChainLadder: Claims reserving with R","text":"classical chain-ladder deterministic algorithm forecast claims based historical data. assumes proportional developments claims one development period next origin years.","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"basic-idea","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Basic idea","title":"ChainLadder: Claims reserving with R","text":"commonly first step, age--age link ratios calculated volume weighted average development ratios cumulative loss development triangle one development period next Cik,,k=1,…,nC_{ik}, ,k =1, \\dots, n. fk=∑=1n−kCi,k+1∑=1n−kCi,k \\begin{aligned}   f_{k} &= \\frac{\\sum_{=1}^{n-k} C_{,k+1}}{\\sum_{=1}^{n-k}C_{,k}} \\end{aligned} Often suitable assume oldest origin year fully developed. typical approach extrapolate development ratios, e.g. assuming linear model log scale.  age--age factors allow us plot expected claims development patterns.  link ratios applied latest known cumulative claims amount forecast next development period. squaring RAA triangle calculated , ultimate column appended right accommodate expected development beyond oldest age (10) triangle due tail factor (1.009) greater unity. total estimated outstanding loss method 54100: approach also called Loss Development Factor (LDF) method. generally, factors used square triangle need always drawn dollar weighted averages triangle. sources factors actuary may select link ratios include simple averages triangle, averages weighted toward recent observations adjusted outliers, benchmark patterns based related, credible loss experience. Also, since ultimate value claims simply product current diagonal cumulative product link ratios, completion interior triangle usually displayed favor multiplicative calculation. example, suppose actuary decides volume weighted factors RAA triangle representative expected future growth, discards 1.009 tail factor derived loglinear fit favor five percent tail (1.05) based loss data larger book similar business. LDF method might displayed R follows. Since early 1990s several papers published embed simple chain-ladder method statistical framework. Ben Zehnwirth Glenn Barnett point (Zehnwirth Barnett 2000) age--age link ratios can regarded coefficients weighted linear regression origin, see also (Murphy 1994).","code":"# Calculate age-to-age factors for RAA triangle n <- 10 f <- sapply(1:(n-1),             function(i){               sum(RAA[c(1:(n-i)),i+1])/sum(RAA[c(1:(n-i)),i])             } ) f [1] 2.999 1.624 1.271 1.172 1.113 1.042 1.033 1.017 1.009 dev.period <- 1:(n-1) plot(log(f-1) ~ dev.period,       main=\"Log-linear extrapolation of age-to-age factors\") tail.model <- lm(log(f-1) ~ dev.period) abline(tail.model) co <- coef(tail.model) ## extrapolate another 100 dev. period tail <- exp(co[1] + c(n:(n + 100)) * co[2]) + 1 f.tail <- prod(tail) f.tail [1] 1.009 plot(100*(rev(1/cumprod(rev(c(f, tail[tail>1.0001]))))), t=\"b\",      main=\"Expected claims development pattern\",      xlab=\"Dev. period\", ylab=\"Development % of ultimate loss\") f <- c(f, f.tail) fullRAA <- cbind(RAA, Ult = rep(0, 10)) for(k in 1:n){   fullRAA[(n-k+1):n, k+1] <- fullRAA[(n-k+1):n,k]*f[k] } round(fullRAA) 1     2     3     4     5     6     7     8     9    10   Ult 1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834 19012 1982  106  4285  5396 10666 13782 15599 15496 16169 16704 16858 17017 1983 3410  8992 13873 16141 18735 22214 22863 23466 23863 24083 24311 1984 5655 11555 15766 21266 23425 26083 27067 27967 28441 28703 28974 1985 1092  9565 15836 22169 25955 26180 27278 28185 28663 28927 29200 1986 1513  6445 11702 12935 15852 17649 18389 19001 19323 19501 19685 1987  557  4020 10946 12314 14428 16064 16738 17294 17587 17749 17917 1988 1351  6947 13112 16664 19525 21738 22650 23403 23800 24019 24246 1989 3133  5395  8759 11132 13043 14521 15130 15634 15898 16045 16196 1990 2063  6188 10046 12767 14959 16655 17353 17931 18234 18402 18576 sum(fullRAA[ ,11] - getLatestCumulative(RAA)) [1] 54146 linkratios <- c(attr(ata(RAA), \"vwtd\"), tail = 1.05) round(linkratios, 3) # display to only three decimal places 1-2   2-3   3-4   4-5   5-6   6-7   7-8   8-9  9-10  tail  2.999 1.624 1.271 1.172 1.113 1.042 1.033 1.017 1.009 1.050 LDF <- rev(cumprod(rev(linkratios))) names(LDF) <- colnames(RAA) # so the display matches the triangle round(LDF, 3) 1     2     3     4     5     6     7     8     9    10  9.366 3.123 1.923 1.513 1.292 1.160 1.113 1.078 1.060 1.050 currentEval <- getLatestCumulative(RAA) # Reverse the LDFs so the first, least mature factor [1] #   is applied to the last origin year (1990) EstdUlt <- currentEval * rev(LDF) # # Start with the body of the exhibit Exhibit <- data.frame(currentEval, LDF = round(rev(LDF), 3), EstdUlt) # Tack on a Total row Exhibit <- rbind(Exhibit, data.frame(currentEval=sum(currentEval), LDF=NA, EstdUlt=sum(EstdUlt),            row.names = \"Total\")) Exhibit currentEval   LDF EstdUlt 1981        18834 1.050   19776 1982        16704 1.060   17701 1983        23466 1.078   25288 1984        27067 1.113   30138 1985        26180 1.160   30373 1986        15852 1.292   20476 1987        12314 1.513   18637 1988        13112 1.923   25220 1989         5395 3.123   16847 1990         2063 9.366   19323 Total      160987    NA  223778 lmCL <- function(i, Triangle){   lm(y~x+0, weights=1/Triangle[,i],      data=data.frame(x=Triangle[,i], y=Triangle[,i+1])) } sapply(lapply(c(1:(n-1)), lmCL, RAA), coef) x     x     x     x     x     x     x     x     x  2.999 1.624 1.271 1.172 1.113 1.042 1.033 1.017 1.009"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"mack-chain-ladder","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Mack chain-ladder","title":"ChainLadder: Claims reserving with R","text":"Thomas Mack published 1993 (Mack 1993) method estimates standard errors chain-ladder forecast without assuming distribution three conditions. Following notation Mack (Mack 1999) let CikC_{ik} denote cumulative loss amounts origin period (e.g. accident year) =1,…,mi=1,\\ldots,m, losses known development period (e.g. development year) k≤n+1−ik \\le n+1-. order forecast amounts CikC_{ik} k>n+1−ik > n+1-Mack chain-ladder-model assumes: CL1: E[Fik|Ci1,Ci2,…,Cik]=fk Fik=Ci,k+1CikCL2: Var(Ci,k+1Cik|Ci1,Ci2,…,Cik)=σk2wikCikαCL3: {Ci1,…,Cin},{Cj1,…,Cjn}, independent origin period ≠j \\begin{aligned}   \\mbox{CL1: }  & E[ F_{ik}| C_{i1},C_{i2},\\ldots,C_{ik} ] = f_k   \\mbox{ } F_{ik}=\\frac{C_{,k+1}}{C_{ik}}\\\\     \\mbox{CL2: } &  Var( \\frac{C_{,k+1}}{C_{ik}} | C_{i1},C_{i2},     \\ldots,C_{ik} ) = \\frac{\\sigma_k^2}{w_{ik} C^\\alpha_{ik}}\\\\   \\mbox{CL3: } & \\{C_{i1},\\ldots,C_{}\\}, \\{     C_{j1},\\ldots,C_{jn}\\},\\mbox{ independent origin period }     \\neq j \\end{aligned} wik∈[0;1],α∈{0,1,2}w_{ik} \\[0;1], \\alpha \\\\{0,1,2\\}. assumptions hold, Mack chain-ladder-model gives unbiased estimator IBNR (Incurred Reported) claims. Mack chain-ladder model can regarded weighted linear regression origin development period: lm(y ~ x  + 0, weights=w/x^(2-alpha)), yy vector claims development period k+1k+1 xx vector claims development period kk. Mack method implemented ChainLadder package via function MackChainLadder. example apply MackChainLadder function triangle RAA: can access loss development factors full triangle via: interested summary statistics use: check Mack’s assumption valid review residual plots, see trends either . residual show clear trends, indicating Mack assumptions well met can plot development, including forecast estimated standard errors origin period setting argument lattice=TRUE.","code":"mack <- MackChainLadder(RAA, est.sigma=\"Mack\") mack # same as summary(mack) MackChainLadder(Triangle = RAA, est.sigma = \"Mack\")       Latest Dev.To.Date Ultimate   IBNR Mack.S.E CV(IBNR) 1981 18,834       1.000   18,834      0        0      NaN 1982 16,704       0.991   16,858    154      206    1.339 1983 23,466       0.974   24,083    617      623    1.010 1984 27,067       0.943   28,703  1,636      747    0.457 1985 26,180       0.905   28,927  2,747    1,469    0.535 1986 15,852       0.813   19,501  3,649    2,002    0.549 1987 12,314       0.694   17,749  5,435    2,209    0.406 1988 13,112       0.546   24,019 10,907    5,358    0.491 1989  5,395       0.336   16,045 10,650    6,333    0.595 1990  2,063       0.112   18,402 16,339   24,566    1.503                Totals Latest:   160,987.00 Dev:            0.76 Ultimate: 213,122.23 IBNR:      52,135.23 Mack.S.E   26,909.01 CV(IBNR):       0.52 mack$f [1] 2.999 1.624 1.271 1.172 1.113 1.042 1.033 1.017 1.009 1.000 mack$FullTriangle dev origin    1     2     3     4     5     6     7     8     9    10   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834   1982  106  4285  5396 10666 13782 15599 15496 16169 16704 16858   1983 3410  8992 13873 16141 18735 22214 22863 23466 23863 24083   1984 5655 11555 15766 21266 23425 26083 27067 27967 28441 28703   1985 1092  9565 15836 22169 25955 26180 27278 28185 28663 28927   1986 1513  6445 11702 12935 15852 17649 18389 19001 19323 19501   1987  557  4020 10946 12314 14428 16064 16738 17294 17587 17749   1988 1351  6947 13112 16664 19525 21738 22650 23403 23800 24019   1989 3133  5395  8759 11132 13043 14521 15130 15634 15898 16045   1990 2063  6188 10046 12767 14959 16655 17353 17931 18234 18402 mack_smmry <- summary(mack) # See also ?summary.MackChainLadder mack_smmry$ByOrigin Latest Dev.To.Date Ultimate    IBNR Mack.S.E CV(IBNR) 1981  18834      1.0000    18834     0.0      0.0      NaN 1982  16704      0.9909    16858   154.0    206.2   1.3395 1983  23466      0.9744    24083   617.4    623.4   1.0097 1984  27067      0.9430    28703  1636.1    747.2   0.4567 1985  26180      0.9050    28927  2746.7   1469.5   0.5350 1986  15852      0.8129    19501  3649.1   2001.9   0.5486 1987  12314      0.6938    17749  5435.3   2209.2   0.4065 1988  13112      0.5459    24019 10907.2   5357.9   0.4912 1989   5395      0.3362    16045 10650.0   6333.2   0.5947 1990   2063      0.1121    18402 16339.4  24566.3   1.5035 mack_smmry$Totals Totals Latest:    1.610e+05 Dev:       7.554e-01 Ultimate:  2.131e+05 IBNR:      5.214e+04 Mack S.E.: 2.691e+04 CV(IBNR):  5.161e-01 plot(mack) plot(mack, lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"using-a-subset-of-the-triangle","dir":"Articles","previous_headings":"Chain-ladder methods > Mack chain-ladder","what":"Using a subset of the triangle","title":"ChainLadder: Claims reserving with R","text":"weights argument allows selection subset triangle projections. example, order use last 5 calendar years triangle, set weights follows:","code":"calPeriods <- (row(RAA) + col(RAA) - 1) (weights <- ifelse(calPeriods <= 5, 0, ifelse(calPeriods > 10, NA, 1))) [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]  [1,]    0    0    0    0    0    1    1    1    1     1  [2,]    0    0    0    0    1    1    1    1    1    NA  [3,]    0    0    0    1    1    1    1    1   NA    NA  [4,]    0    0    1    1    1    1    1   NA   NA    NA  [5,]    0    1    1    1    1    1   NA   NA   NA    NA  [6,]    1    1    1    1    1   NA   NA   NA   NA    NA  [7,]    1    1    1    1   NA   NA   NA   NA   NA    NA  [8,]    1    1    1   NA   NA   NA   NA   NA   NA    NA  [9,]    1    1   NA   NA   NA   NA   NA   NA   NA    NA [10,]    1   NA   NA   NA   NA   NA   NA   NA   NA    NA MackChainLadder(RAA, weights=weights, est.sigma = \"Mack\") MackChainLadder(Triangle = RAA, weights = weights, est.sigma = \"Mack\")       Latest Dev.To.Date Ultimate   IBNR Mack.S.E CV(IBNR) 1981 18,834      1.0000   18,834      0        0      NaN 1982 16,704      0.9909   16,858    154      206    1.339 1983 23,466      0.9744   24,083    617      623    1.010 1984 27,067      0.9430   28,703  1,636      747    0.457 1985 26,180      0.9050   28,927  2,747    1,469    0.535 1986 15,852      0.8229   19,264  3,412    2,039    0.598 1987 12,314      0.7106   17,329  5,015    2,144    0.428 1988 13,112      0.5613   23,361 10,249    4,043    0.395 1989  5,395      0.2935   18,384 12,989    5,931    0.457 1990  2,063      0.0843   24,463 22,400   16,779    0.749                Totals Latest:   160,987.00 Dev:            0.73 Ultimate: 220,207.63 IBNR:      59,220.63 Mack.S.E   19,859.00 CV(IBNR):       0.34"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"munich-chain-ladder","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Munich chain-ladder","title":"ChainLadder: Claims reserving with R","text":"Munich chain-ladder reserving method reduces gap IBNR projections based paid losses IBNR projections based incurred losses. Munich chain-ladder method uses correlations paid incurred losses historical data projection future (Quarg Mack 2004).  can use summary(MCL)$ByOrigin summary(MCL)$Totals extract information output .","code":"MCLpaid dev origin    1    2    3    4    5    6    7      1  576 1804 1970 2024 2074 2102 2131      2  866 1948 2162 2232 2284 2348   NA      3 1412 3758 4252 4416 4494   NA   NA      4 2286 5292 5724 5850   NA   NA   NA      5 1868 3778 4648   NA   NA   NA   NA      6 1442 4010   NA   NA   NA   NA   NA      7 2044   NA   NA   NA   NA   NA   NA MCLincurred dev origin    1    2    3    4    5    6    7      1  978 2104 2134 2144 2174 2182 2174      2 1844 2552 2466 2480 2508 2454   NA      3 2904 4354 4698 4600 4644   NA   NA      4 3502 5958 6070 6142   NA   NA   NA      5 2812 4882 4852   NA   NA   NA   NA      6 2642 4406   NA   NA   NA   NA   NA      7 5022   NA   NA   NA   NA   NA   NA par(mfrow=c(1,2)) plot(MCLpaid) plot(MCLincurred) par(mfrow=c(1,1)) # Following the example in Quarg's (2004) paper: MCL <- MunichChainLadder(MCLpaid, MCLincurred, est.sigmaP=0.1, est.sigmaI=0.1) MCL MunichChainLadder(Paid = MCLpaid, Incurred = MCLincurred, est.sigmaP = 0.1,      est.sigmaI = 0.1)    Latest Paid Latest Incurred Latest P/I Ratio Ult. Paid Ult. Incurred 1       2,131           2,174            0.980     2,131         2,174 2       2,348           2,454            0.957     2,383         2,444 3       4,494           4,644            0.968     4,597         4,629 4       5,850           6,142            0.952     6,119         6,176 5       4,648           4,852            0.958     4,937         4,950 6       4,010           4,406            0.910     4,656         4,665 7       2,044           5,022            0.407     7,549         7,650   Ult. P/I Ratio 1          0.980 2          0.975 3          0.993 4          0.991 5          0.997 6          0.998 7          0.987  Totals             Paid Incurred P/I Ratio Latest:   25,525   29,694      0.86 Ultimate: 32,371   32,688      0.99 plot(MCL)"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"bootstrap-chain-ladder","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Bootstrap chain-ladder","title":"ChainLadder: Claims reserving with R","text":"BootChainLadder function uses two-stage bootstrapping/simulation approach following paper England Verrall (England Verrall 2002). first stage ordinary chain-ladder methods applied cumulative claims triangle. calculate scaled Pearson residuals bootstrap R times forecast future incremental claims payments via standard chain-ladder method. second stage simulate process error bootstrap value mean using process distribution assumed. set reserves obtained way forms predictive distribution, summary statistics mean, prediction error quantiles can derived. can use summary(B)$ByOrigin summary(B)$Totals extract information output .  Quantiles bootstrap IBNR can calculated via quantile function: distribution IBNR appears follow log-normal distribution, let’s fit :","code":"## See also the example in section 8 of England & Verrall (2002) ## on page 55. B <- BootChainLadder(RAA, R=999, process.distr=\"gamma\") B BootChainLadder(Triangle = RAA, R = 999, process.distr = \"gamma\")       Latest Mean Ultimate Mean IBNR IBNR.S.E IBNR 75% IBNR 95% 1981 18,834        18,834         0        0        0        0 1982 16,704        16,874       170      751      213    1,435 1983 23,466        24,088       622    1,240    1,039    3,089 1984 27,067        28,785     1,718    1,915    2,758    5,461 1985 26,180        29,085     2,905    2,387    4,148    7,509 1986 15,852        19,561     3,709    2,476    5,189    8,102 1987 12,314        17,835     5,521    3,089    7,197   11,348 1988 13,112        24,170    11,058    4,920   13,952   19,626 1989  5,395        16,271    10,876    5,920   14,529   21,221 1990  2,063        19,929    17,866   14,195   25,820   43,213                   Totals Latest:         160,987 Mean Ultimate:  215,431 Mean IBNR:       54,444 IBNR.S.E         18,711 Total IBNR 75%:  65,615 Total IBNR 95%:  87,033 plot(B) quantile(B, c(0.75,0.95,0.99, 0.995)) $ByOrigin      IBNR 75% IBNR 95% IBNR 99% IBNR 99.5% 1981      0.0        0        0          0 1982    213.4     1435     2841       3733 1983   1039.1     3089     4612       4945 1984   2758.0     5461     7326       8210 1985   4147.9     7509     9487      10452 1986   5188.7     8102    11425      12991 1987   7196.8    11348    14663      15554 1988  13952.0    19626    25384      27311 1989  14529.4    21221    27991      30040 1990  25819.5    43213    59327      69688  $Totals             Totals IBNR 75%:    65615 IBNR 95%:    87033 IBNR 99%:   105599 IBNR 99.5%: 113236 ## fit a distribution to the IBNR library(MASS) plot(ecdf(B$IBNR.Totals)) ## fit a log-normal distribution fit <- fitdistr(B$IBNR.Totals[B$IBNR.Totals>0], \"lognormal\") fit meanlog      sdlog     10.843119    0.361346   ( 0.011432) ( 0.008084) curve(plnorm(x,fit$estimate[\"meanlog\"], fit$estimate[\"sdlog\"]),       col=\"red\", add=TRUE)"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"multivariate-chain-ladder","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Multivariate chain-ladder","title":"ChainLadder: Claims reserving with R","text":"Mack chain-ladder technique can generalized multivariate setting multiple reserving triangles modelled developed simultaneously. advantage multivariate modelling correlations among different triangles can modelled, lead accurate uncertainty assessments. Reserving methods explicitly model -triangle contemporaneous correlations can found (Pröhl Schmidt 2005), (Michael Merz Wüthrich 2008b). Another benefit multivariate loss reserving structural relationships triangles can also reflected, development one triangle depends past losses triangles. example, generally need joint development paid incurred losses (Quarg Mack 2004). chain-ladder-based multivariate reserving models can summarised sequential seemingly unrelated regressions (Zhang 2010). note another strand multivariate loss reserving builds hierarchical structure model allow estimation one triangle “borrow strength” triangles, reflecting core insight actuarial credibility (Zhang, Dukic, Guszcza 2012). Denote Yi,k=(Yi,k(1),⋯,Yi,k(N))Y_{,k}=(Y^{(1)}_{,k}, \\cdots ,Y^{(N)}_{,k}) N×1N \\times 1 vector cumulative losses accident year ii development year kk (n)(n) refers n-th triangle. (Zhang 2010) specifies model development period kk : Yi,k+1=Ak+Bk⋅Yi,k+ϵi,k, \\begin{equation} Y_{,k+1} = A_k + B_k \\cdot Y_{,k} + \\epsilon_{,k}, \\end{equation} AkA_k column intercepts BkB_k development matrix development period kk. Assumptions model : E(ϵi,k|Yi,1,⋯,Yi,+1−k)=0,cov(ϵi,k|Yi,1,⋯,Yi,+1−k)=D(Yi,k−δ/2)ΣkD(Yi,k−δ/2),losses different accident years independent,ϵi,k symmetrically distributed. \\begin{aligned} &E(\\epsilon_{,k}|Y_{,1}, \\cdots,Y_{,+1-k}) =0, \\\\ &cov(\\epsilon_{,k}|Y_{,1}, \\cdots, Y_{,+1-k})=D(Y_{,k}^{-\\delta/2}) \\, \\Sigma_k \\, D(Y_{,k}^{-\\delta/2}), \\\\ &\\text{losses different accident years independent}, \\\\ &\\epsilon_{,k} \\text{ symmetrically distributed}. \\end{aligned} , DD diagonal operator, δ\\delta known positive value controls variance depends mean (weights). model referred general multivariate chain ladder [GMCL] (Zhang 2010). important special case Ak=0A_k=0 BkB_k’s diagonal naive generalization chain-ladder, often referred multivariate chain-ladder [MCL] (Pröhl Schmidt 2005). following, first introduce class triangles, defined several utility functions. Indeed, input triangles MultiChainLadder function converted triangles internally. present loss reserving methods based MCL GMCL models turn. Consider two liability loss triangles (Michael Merz Wüthrich 2008b). comes list two matrices: can convert list triangles object using can find methods available class: example, want extract last three columns triangle, can use [ operator follows: following combines two columns triangles form new matrix:","code":"str(liab) List of 2  $ GeneralLiab: num [1:14, 1:14] 59966 49685 51914 84937 98921 ...  $ AutoLiab   : num [1:14, 1:14] 114423 152296 144325 145904 170333 ... liab2 <- as(liab, \"triangles\") class(liab2) [1] \"triangles\" attr(,\"package\") [1] \"ChainLadder\" showMethods(classes = \"triangles\") # use drop = TRUE to remove rows that are all NA's liab2[, 12:14, drop = TRUE] An object of class \"triangles\" [[1]]        [,1]   [,2]   [,3] [1,] 540873 547696 549589 [2,] 563571 562795     NA [3,] 602710     NA     NA  [[2]]        [,1]   [,2]   [,3] [1,] 391328 391537 391428 [2,] 485138 483974     NA [3,] 540742     NA     NA cbind2(liab2[1:3, 12]) [,1]   [,2] [1,] 540873 391328 [2,] 563571 485138 [3,] 602710 540742"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"separate-chain-ladder-ignoring-correlations","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Separate chain-ladder ignoring correlations","title":"ChainLadder: Claims reserving with R","text":"form regression models used estimating development parameters controlled fit.method argument. specify fit.method = \"OLS\", ordinary least squares used estimation development factors triangle independent others. case, residual covariance matrix Σk\\Sigma_k diagonal. result, multivariate model equivalent running multiple Mack chain-ladders separately. , show total reserve estimate triangle reduce output. full summary including estimate year can retrieved using usual summary function. default, summary function produces reserve statistics individual triangles, well portfolio assumed sum two triangles. behaviour can changed supplying portfolio argument. See documentation details. can verify indeed univariate Mack chain ladder. example, can apply MackChainLadder function triangle: argument mse.method controls mean square errors computed. default, implements Mack method. alternative method conditional re-sampling approach (Buchwalder et al. 2006), assumes estimated parameters independent. used mse.method = \"Independence\". example, following reproduces result (Buchwalder et al. 2006). Note first argument must list, even though one triangle used.","code":"fit1 <- MultiChainLadder(liab, fit.method = \"OLS\") lapply(summary(fit1)$report.summary, \"[\", 15, ) $`Summary Statistics for Triangle 1`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 11343397      0.6482 17498658 6155261 427289 0.0694  $`Summary Statistics for Triangle 2`        Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 8759806      0.8093 10823418 2063612 162872 0.0789  $`Summary Statistics for Triangle 1+2`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 20103203      0.7098 28322077 8218874 457278 0.0556 fit <- lapply(liab, MackChainLadder, est.sigma = \"Mack\") # the same as the first triangle above lapply(fit, function(x) t(summary(x)$Totals)) $GeneralLiab         Latest:   Dev: Ultimate:   IBNR: Mack S.E.: CV(IBNR): Totals 11343397 0.6482  17498658 6155261     427289   0.06942  $AutoLiab        Latest:   Dev: Ultimate:   IBNR: Mack S.E.: CV(IBNR): Totals 8759806 0.8093  10823418 2063612     162872   0.07893 (B1 <- MultiChainLadder(list(GenIns), fit.method = \"OLS\",     mse.method = \"Independence\")) $`Summary Statistics for Input Triangle`           Latest Dev.To.Date   Ultimate       IBNR       S.E    CV 1      3,901,463      1.0000  3,901,463          0         0 0.000 2      5,339,085      0.9826  5,433,719     94,634    75,535 0.798 3      4,909,315      0.9127  5,378,826    469,511   121,700 0.259 4      4,588,268      0.8661  5,297,906    709,638   133,551 0.188 5      3,873,311      0.7973  4,858,200    984,889   261,412 0.265 6      3,691,712      0.7223  5,111,171  1,419,459   411,028 0.290 7      3,483,130      0.6153  5,660,771  2,177,641   558,356 0.256 8      2,864,498      0.4222  6,784,799  3,920,301   875,430 0.223 9      1,363,294      0.2416  5,642,266  4,278,972   971,385 0.227 10       344,014      0.0692  4,969,825  4,625,811 1,363,385 0.295 Total 34,358,090      0.6478 53,038,946 18,680,856 2,447,618 0.131"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"multivariate-chain-ladder-using-seemingly-unrelated-regressions","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Multivariate chain-ladder using seemingly unrelated regressions","title":"ChainLadder: Claims reserving with R","text":"allow correlations incorporated, employ seemingly unrelated regressions (see package systemfit, (Henningsen Hamann 2007)) simultaneously model two triangles development period. invoked specify fit.method = \"SUR\": see portfolio prediction error inflated 500,607500,607 457,278457,278 separate development model (“OLS”). positive correlation two triangles. estimated correlation development period can retrieved residCor function: Similarly, methods work linear models coef, fitted, resid also work. Since sequence models, retrieved results methods stored list. example, can retrieve estimated development factors period smaller--one development factors 10-th period second triangle indeed result negative IBNR estimates first several accident years triangle. package also offers plot method produces various summary diagnostic figures: Summary diagnostic plots MultiChainLadder object resulting plots shown figure . use .triangle suppress plot portfolio, use .plot select desired types plots. See documentation possible values two arguments.","code":"fit2 <- MultiChainLadder(liab, fit.method = \"SUR\") lapply(summary(fit2)$report.summary, \"[\", 15, ) $`Summary Statistics for Triangle 1`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 11343397      0.6484 17494907 6151510 419293 0.0682  $`Summary Statistics for Triangle 2`        Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 8759806      0.8095 10821341 2061535 162464 0.0788  $`Summary Statistics for Triangle 1+2`         Latest Dev.To.Date Ultimate    IBNR    S.E    CV Total 20103203        0.71 28316248 8213045 500607 0.061 round(unlist(residCor(fit2)), 3) [1]  0.247  0.495  0.682  0.446  0.487  0.451 -0.172  0.805  0.337  0.688 [11] -0.004  1.000  0.021 do.call(\"rbind\", coef(fit2)) eq1_x[[1]] eq2_x[[2]]  [1,]      3.227     2.2224  [2,]      1.719     1.2688  [3,]      1.352     1.1200  [4,]      1.179     1.0665  [5,]      1.106     1.0356  [6,]      1.055     1.0168  [7,]      1.026     1.0097  [8,]      1.015     1.0002  [9,]      1.012     1.0038 [10,]      1.006     0.9994 [11,]      1.005     1.0039 [12,]      1.005     0.9989 [13,]      1.003     0.9997"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"other-residual-covariance-estimation-methods","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Other residual covariance estimation methods","title":"ChainLadder: Claims reserving with R","text":"Internally, MultiChainLadder calls systemfit function fit regression models period period. SUR models specified, several ways estimate residual covariance matrix Σk\\Sigma_k. Available methods noDfCor, geomean, max, Theil default geomean. method Theil produce unbiased covariance estimate, resulting estimate may positive semi-definite. also estimator used (Michael Merz Wüthrich 2008b). However, method work box liab data, perhaps one reasons (Michael Merz Wüthrich 2008b) used extrapolation get estimate last several periods. Indeed, applications, recommend use separate chain ladders tail periods stabilize estimation - data points tail running multivariate model often produces extremely volatile estimates even fails. facilitate approach, package offers MultiChainLadder2 function, implements split--join procedure: split input data two parts, specify multivariate model rich structures first part (enough data) reflect multivariate dependencies, apply separate univariate chain-ladders second part, join two models together produce final predictions. splitting determined last argument, specifies many development periods tail go second part split. type model structure specified first part split model MultiChainLadder2 controlled type argument. takes one following values: MCL - multivariate chain-ladder diagonal development matrix; MCL+int - multivariate chain-ladder additional intercepts; GMCL-int - general multivariate chain-ladder without intercepts; GMCL - full general multivariate chain-ladder intercepts non-diagonal development matrix. example, following fits SUR method first part (first 11 columns) using unbiased residual covariance estimator (Michael Merz Wüthrich 2008b), separate chain-ladders rest: Similarly, iterative residual covariance estimator (Michael Merz Wüthrich 2008b) can also used, use control parameter maxiter determine number iterations: see covariance estimate converges three steps. similar results (Michael Merz Wüthrich 2008b), small difference result different approaches used last three periods. Also note two examples, argument control defined prototype MultiChainLadder. argument passed systemfit function ... mechanism. Users encouraged explore options available systemfit can applied.","code":"require(systemfit) W1 <- MultiChainLadder2(liab, mse.method = \"Independence\",         control = systemfit.control(methodResidCov = \"Theil\")) lapply(summary(W1)$report.summary, \"[\", 15, ) $`Summary Statistics for Triangle 1`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 11343397      0.6483 17497403 6154006 427041 0.0694  $`Summary Statistics for Triangle 2`        Latest Dev.To.Date Ultimate    IBNR    S.E    CV Total 8759806      0.8095 10821034 2061228 162785 0.079  $`Summary Statistics for Triangle 1+2`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 20103203      0.7099 28318437 8215234 505376 0.0615 for (i in 1:5){   W2 <- MultiChainLadder2(liab, mse.method = \"Independence\",       control = systemfit.control(methodResidCov = \"Theil\", maxiter = i))   print(format(summary(W2)@report.summary[[3]][15, 4:5],           digits = 6, big.mark = \",\")) } IBNR     S.E Total 8,215,234 505,376            IBNR     S.E Total 8,215,357 505,443            IBNR     S.E Total 8,215,362 505,444            IBNR     S.E Total 8,215,362 505,444            IBNR     S.E Total 8,215,362 505,444 lapply(summary(W2)$report.summary, \"[\", 15, ) $`Summary Statistics for Triangle 1`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 11343397      0.6483 17497526 6154129 427074 0.0694  $`Summary Statistics for Triangle 2`        Latest Dev.To.Date Ultimate    IBNR    S.E    CV Total 8759806      0.8095 10821039 2061233 162790 0.079  $`Summary Statistics for Triangle 1+2`         Latest Dev.To.Date Ultimate    IBNR    S.E     CV Total 20103203      0.7099 28318565 8215362 505444 0.0615"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"model-with-intercepts","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Model with intercepts","title":"ChainLadder: Claims reserving with R","text":"Consider auto triangles (Zhang 2010). includes three automobile insurance triangles: personal auto paid, personal auto incurred, commercial auto paid. reasonable expectation triangles correlated. run MCL model : However, residual plot, first row Figure @ref(fig:multi_resid), evident default mean structure MCL model adequate. Usually common problem chain-ladder based models, owing missing intercepts. can improve model including intercepts SUR fit follows: corresponding residual plot shown second row figure . see residuals randomly scattered around zero clear pattern compared plot MCL model. !rest following section needs updating following changes Matrix package! default summary computes portfolio estimates sum triangles. desirable first two triangles personal auto line. can overwrite via portfolio argument. example, following uses two paid triangles portfolio estimate:","code":"str(auto) List of 3  $ PersonalAutoPaid    : num [1:10, 1:10] 101125 102541 114932 114452 115597 ...  $ PersonalAutoIncurred: num [1:10, 1:10] 325423 323627 358410 405319 434065 ...  $ CommercialAutoPaid  : num [1:10, 1:10] 19827 22331 22533 23128 25053 ... f0 <- MultiChainLadder2(auto, type = \"MCL\") # show correlation- the last three columns have zero correlation # because separate chain-ladders are used print(do.call(cbind, residCor(f0)), digits = 3) [,1]    [,2]  [,3]  [,4]    [,5]  [,6] [,7] [,8] [,9] (1,2) 0.327 -0.0101 0.598 0.711  0.8565 0.928    0    0    0 (1,3) 0.870  0.9064 0.939 0.261 -0.0607 0.911    0    0    0 (2,3) 0.198 -0.3217 0.558 0.380  0.3586 0.931    0    0    0 f1 <- MultiChainLadder2(auto, type = \"MCL+int\") lapply(summary(f1, portfolio = \"1+3\")@report.summary, \"[\", 11, )"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"joint-modelling-of-the-paid-and-incurred-losses","dir":"Articles","previous_headings":"Chain-ladder methods","what":"Joint modelling of the paid and incurred losses","title":"ChainLadder: Claims reserving with R","text":"Although model intercepts proved improvement MCL model, still fails account structural relationship triangles. particular, produces divergent paid--incurred loss ratios personal auto line: see accident years 9-10, paid--incurred loss ratios 110%. can fixed allowing development paid/incurred triangles depend . , include past values paid triangle predictors developing incurred triangle, vice versa. illustrate ignoring commercial auto triangle. See demo model uses three triangles. also include MCL model Munich chain-ladder comparison:","code":"ult <- summary(f1)$Ultimate print(ult[, 1] /ult[, 2], 3) da <- auto[1:2] # MCL with diagonal development M0 <- MultiChainLadder(da) # non-diagonal development matrix with no intercepts M1 <- MultiChainLadder2(da, type = \"GMCL-int\") # Munich chain-ladder M2 <- MunichChainLadder(da[[1]], da[[2]]) # compile results and compare projected paid to incured ratios r1 <- lapply(list(M0, M1), function(x){           ult <- summary(x)@Ultimate           ult[, 1] / ult[, 2]       }) names(r1) <- c(\"MCL\", \"GMCL\") r2 <- summary(M2)[[1]][, 6] r2 <- c(r2, summary(M2)[[2]][2, 3]) print(do.call(cbind, c(r1, list(MuCl = r2))) * 100, digits = 4)"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"clarks-methods","dir":"Articles","previous_headings":"","what":"Clark’s methods","title":"ChainLadder: Claims reserving with R","text":"ChainLadder package contains functionality carry methods described paper3 David Clark (Clark 2003). Using longitudinal analysis approach, Clark assumes losses develop according theoretical growth curve. LDF method special case approach growth curve can considered either step function piecewise linear. Clark envisions growth curve measuring percent ultimate loss can expected emerged age origin period. paper describes two methods fit model. LDF method assumes ultimate losses origin period separate unrelated. goal method, therefore, estimate parameters ultimate losses growth curve order maximize likelihood observed data triangle. CapeCod method assumes apriori expected ultimate losses origin year product earned premium year theoretical loss ratio. CapeCod method, therefore, need estimate potentially far fewer parameters: growth function theoretical loss ratio. One side benefits using maximum likelihood estimate parameters associated asymptotic theory provides uncertainty estimates parameters. Observing reserve estimates origin year functions estimated parameters, uncertainty estimates functional values calculated according Delta method, essentially linearisation problem based Taylor series expansion. two functional forms growth curves considered Clark’s paper log-logistic function (.k.., inverse power curve) Weibull function, two-parameter functions. Clark uses parameters ω\\omega θ\\theta paper. Clark’s methods work incremental losses. likelihood function based assumption incremental losses follow -dispersed Poisson (ODP) process.","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"clarks-ldf-method","dir":"Articles","previous_headings":"Clark’s methods","what":"Clark’s LDF method","title":"ChainLadder: Claims reserving with R","text":"Consider RAA triangle. Accepting defaults, Clark LDF Method estimate total ultimate losses 272,009 reserve (FutureValue) 111,022, almost twice value based volume weighted average link ratios loglinear fit section 3.2.1 . difference due heavy tail, 21.6%, implied inverse power curve fit. Clark recognizes log-logistic curve can take unreasonably long length time flatten . according actuary’s experience claims close , say, 20 years, growth curve can truncated accordingly using maxage argument: Weibull growth curve tends faster developing log-logistic: recommend inspect residuals help assess reasonableness model relative actual data.  Although evidence heteroscedasticity increasing ages fitted values, residuals otherwise appear randomly scattered around horizontal line origin. q-q plot shows evidence lack fit tails, p-value almost 0.2 can considered high reject outright assumption normally distributed standardized residuals4.","code":"ClarkLDF(RAA) Origin CurrentValue    Ldf UltimateValue FutureValue StdError  CV%    1981       18,834  1.216        22,906       4,072    2,792 68.6    1982       16,704  1.251        20,899       4,195    2,833 67.5    1983       23,466  1.297        30,441       6,975    4,050 58.1    1984       27,067  1.360        36,823       9,756    5,147 52.8    1985       26,180  1.451        37,996      11,816    5,858 49.6    1986       15,852  1.591        25,226       9,374    4,877 52.0    1987       12,314  1.829        22,528      10,214    5,206 51.0    1988       13,112  2.305        30,221      17,109    7,568 44.2    1989        5,395  3.596        19,399      14,004    7,506 53.6    1990        2,063 12.394        25,569      23,506   17,227 73.3   Total      160,987              272,009     111,022   36,102 32.5 ClarkLDF(RAA, maxage = 20) Origin CurrentValue    Ldf UltimateValue FutureValue StdError  CV%    1981       18,834  1.124        21,168       2,334    1,765 75.6    1982       16,704  1.156        19,314       2,610    1,893 72.6    1983       23,466  1.199        28,132       4,666    2,729 58.5    1984       27,067  1.257        34,029       6,962    3,559 51.1    1985       26,180  1.341        35,113       8,933    4,218 47.2    1986       15,852  1.471        23,312       7,460    3,775 50.6    1987       12,314  1.691        20,819       8,505    4,218 49.6    1988       13,112  2.130        27,928      14,816    6,300 42.5    1989        5,395  3.323        17,927      12,532    6,658 53.1    1990        2,063 11.454        23,629      21,566   15,899 73.7   Total      160,987              251,369      90,382   26,375 29.2 ClarkLDF(RAA, G=\"weibull\") Origin CurrentValue   Ldf UltimateValue FutureValue StdError   CV%    1981       18,834 1.022        19,254         420      700 166.5    1982       16,704 1.037        17,317         613      855 139.5    1983       23,466 1.060        24,875       1,409    1,401  99.4    1984       27,067 1.098        29,728       2,661    2,037  76.5    1985       26,180 1.162        30,419       4,239    2,639  62.2    1986       15,852 1.271        20,151       4,299    2,549  59.3    1987       12,314 1.471        18,114       5,800    3,060  52.8    1988       13,112 1.883        24,692      11,580    4,867  42.0    1989        5,395 2.988        16,122      10,727    5,544  51.7    1990        2,063 9.815        20,248      18,185   12,929  71.1   Total      160,987             220,920      59,933   19,149  32.0 plot(ClarkLDF(RAA, G=\"weibull\"))"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"clarks-cape-cod-method","dir":"Articles","previous_headings":"Clark’s methods","what":"Clark’s Cape Cod method","title":"ChainLadder: Claims reserving with R","text":"RAA data set, widely researched literature, premium associated traditionally. Let’s assume constant earned premium 40000 year, Weibull growth function: estimated expected loss ratio 0.566. total outstanding loss 10% higher LDF method. standard error, however, lower, probably due fact fewer parameters estimate CapeCod method, resulting less parameter risk. plot model shows similar residuals Origin Projected Age LDF method, better spread Fitted Value, slightly better q-q plot, particularly upper tail.","code":"ClarkCapeCod(RAA, Premium = 40000, G = \"weibull\") Origin CurrentValue Premium   ELR FutureGrowthFactor FutureValue UltimateValue    1981       18,834  40,000 0.566             0.0192         436        19,270    1982       16,704  40,000 0.566             0.0320         725        17,429    1983       23,466  40,000 0.566             0.0525       1,189        24,655    1984       27,067  40,000 0.566             0.0848       1,921        28,988    1985       26,180  40,000 0.566             0.1345       3,047        29,227    1986       15,852  40,000 0.566             0.2093       4,741        20,593    1987       12,314  40,000 0.566             0.3181       7,206        19,520    1988       13,112  40,000 0.566             0.4702      10,651        23,763    1989        5,395  40,000 0.566             0.6699      15,176        20,571    1990        2,063  40,000 0.566             0.9025      20,444        22,507   Total      160,987 400,000                               65,536       226,523  StdError   CV%       692 158.6       912 125.7     1,188  99.9     1,523  79.3     1,917  62.9     2,360  49.8     2,845  39.5     3,366  31.6     3,924  25.9     4,491  22.0    12,713  19.4 plot(ClarkCapeCod(RAA, Premium = 40000, G = \"weibull\"))"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"generalised-linear-model-methods","dir":"Articles","previous_headings":"","what":"Generalised linear model methods","title":"ChainLadder: Claims reserving with R","text":"Recent years also seen growing interest using generalised linear models [GLM] insurance loss reserving. use GLM insurance loss reserving many compelling aspects, e.g., -dispersed Poisson model used, reproduces estimates chain-ladder; provides coherent modelling framework Mack method; relevant established statistical theory can directly applied perform hypothesis testing diagnostic checking; glmReserve function takes insurance loss triangle, converts incremental losses internally necessary, transforms long format (see .data.frame) fits resulting loss data generalised linear model mean structure includes accident year development lag effects. function also provides analytical bootstrapping methods compute associated prediction errors. bootstrapping approach also simulates full predictive distribution, based user can compute uncertainty measures predictive intervals. Tweedie family distributions allowed, , exponential family admits power variance function V(μ)=μpV(\\mu)=\\mu^p. variance power pp specified var.power argument, controls type distribution. Tweedie compound Poisson distribution 1<p<21 < p < 2 used, user option specify var.power = NULL, variance power pp estimated data using cplm package (Zhang 2012). example, following fits -dispersed Poisson model spells estimated reserve information: can also extract underlying GLM model specifying type = \"model\" summary function: Similarly, can fit Gamma compound Poisson GLM reserving model changing var.power argument: default, formulaic approach used compute prediction errors. can also carry bootstrapping simulations specifying mse.method = \"bootstrap\" (note argument supports partial match): bootstrapping used, resulting object three additional components - sims.par, sims.reserve.mean, sims.reserve.pred store simulated parameters, mean values predicted values reserves year, respectively. can thus compute quantiles predictions based simulated samples sims.reserve.pred element : full predictive distribution simulated reserves year can visualized easily: predictive distribution loss reserves year based bootstrapping","code":"# load data data(GenIns) GenIns <- GenIns / 1000 # fit Poisson GLM (fit1 <- glmReserve(GenIns)) Latest Dev.To.Date Ultimate  IBNR    S.E     CV 2       5339     0.98252     5434    95  110.1 1.1589 3       4909     0.91263     5379   470  216.0 0.4597 4       4588     0.86599     5298   710  260.9 0.3674 5       3873     0.79725     4858   985  303.6 0.3082 6       3692     0.72235     5111  1419  375.0 0.2643 7       3483     0.61527     5661  2178  495.4 0.2274 8       2864     0.42221     6784  3920  790.0 0.2015 9       1363     0.24162     5642  4279 1046.5 0.2446 10       344     0.06922     4970  4626 1980.1 0.4280 total  30457     0.61982    49138 18681 2945.7 0.1577 summary(fit1, type = \"model\") Call: glm(formula = value ~ factor(origin) + factor(dev), family = fam,      data = ldaFit, offset = offset)  Coefficients:                  Estimate Std. Error t value Pr(>|t|)     (Intercept)       5.59865    0.17292   32.38  < 2e-16 *** factor(origin)2   0.33127    0.15354    2.16   0.0377 *   factor(origin)3   0.32112    0.15772    2.04   0.0492 *   factor(origin)4   0.30596    0.16074    1.90   0.0650 .   factor(origin)5   0.21932    0.16797    1.31   0.1999     factor(origin)6   0.27008    0.17076    1.58   0.1225     factor(origin)7   0.37221    0.17445    2.13   0.0398 *   factor(origin)8   0.55333    0.18653    2.97   0.0053 **  factor(origin)9   0.36893    0.23918    1.54   0.1317     factor(origin)10  0.24203    0.42756    0.57   0.5749     factor(dev)2      0.91253    0.14885    6.13  4.7e-07 *** factor(dev)3      0.95883    0.15257    6.28  2.9e-07 *** factor(dev)4      1.02600    0.15688    6.54  1.3e-07 *** factor(dev)5      0.43528    0.18391    2.37   0.0234 *   factor(dev)6      0.08006    0.21477    0.37   0.7115     factor(dev)7     -0.00638    0.23829   -0.03   0.9788     factor(dev)8     -0.39445    0.31029   -1.27   0.2118     factor(dev)9      0.00938    0.32025    0.03   0.9768     factor(dev)10    -1.37991    0.89669   -1.54   0.1326     --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for Tweedie family taken to be 52.6)      Null deviance: 10699  on 54  degrees of freedom Residual deviance:  1903  on 36  degrees of freedom AIC: NA  Number of Fisher Scoring iterations: 4 # Gamma GLM (fit2 <- glmReserve(GenIns, var.power = 2)) Latest Dev.To.Date Ultimate  IBNR     S.E     CV 2       5339     0.98288     5432    93   45.17 0.4857 3       4909     0.91655     5356   447  160.56 0.3592 4       4588     0.88248     5199   611  177.62 0.2907 5       3873     0.79611     4865   992  254.47 0.2565 6       3692     0.71757     5145  1453  351.33 0.2418 7       3483     0.61440     5669  2186  526.29 0.2408 8       2864     0.43870     6529  3665  941.32 0.2568 9       1363     0.24854     5485  4122 1175.95 0.2853 10       344     0.07078     4860  4516 1667.39 0.3692 total  30457     0.62742    48543 18086 2702.71 0.1494 # compound Poisson GLM (variance function estimated from the data): # (fit3 <- glmReserve(GenIns, var.power = NULL)) set.seed(11) (fit5 <- glmReserve(GenIns, mse.method = \"boot\")) Latest Dev.To.Date Ultimate  IBNR    S.E     CV 2       5339     0.98252     5434    95  108.7 1.1440 3       4909     0.91263     5379   470  207.8 0.4421 4       4588     0.86599     5298   710  270.4 0.3809 5       3873     0.79725     4858   985  306.6 0.3112 6       3692     0.72235     5111  1419  387.6 0.2732 7       3483     0.61527     5661  2178  493.3 0.2265 8       2864     0.42221     6784  3920  813.1 0.2074 9       1363     0.24162     5642  4279 1077.3 0.2518 10       344     0.06922     4970  4626 1986.3 0.4294 total  30457     0.61982    49138 18681 2955.4 0.1582 names(fit5) [1] \"call\"              \"summary\"           \"Triangle\"          [4] \"FullTriangle\"      \"model\"             \"sims.par\"          [7] \"sims.reserve.mean\" \"sims.reserve.pred\" pr <- as.data.frame(fit5$sims.reserve.pred) qv <- c(0.025, 0.25, 0.5, 0.75, 0.975) res.q <- t(apply(pr, 2, quantile, qv)) print(format(round(res.q), big.mark = \",\"), quote = FALSE) 2.5%  25%   50%   75%   97.5% 2      0    40    91   175   375 3    125   339   463   612   941 4    290   551   720   910 1,330 5    507   797   991 1,195 1,686 6    812 1,194 1,424 1,691 2,305 7  1,345 1,873 2,161 2,536 3,258 8  2,595 3,427 3,951 4,517 5,742 9  2,462 3,555 4,222 4,988 6,879 10   809 3,394 4,505 5,904 9,236 library(ggplot2) prm <- reshape(pr, varying=list(names(pr)), v.names = \"reserve\",                 timevar = \"year\", direction=\"long\") gg <- ggplot(prm, aes(reserve)) gg <- gg + geom_density(aes(fill = year), alpha = 0.3) +         facet_wrap(~year, nrow = 2, scales = \"free\")  +          theme(legend.position = \"none\") print(gg)"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"paid-incurred-chain-model","dir":"Articles","previous_headings":"","what":"Paid-incurred chain model","title":"ChainLadder: Claims reserving with R","text":"Paid-incurred chain model published Merz Wüthrich 2010 (M. Merz Wüthrich 2010). combines claims payments incurred losses information mathematically rigorous consistent way get unified ultimate loss prediction.","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"model-assumptions","dir":"Articles","previous_headings":"Paid-incurred chain model","what":"Model assumptions","title":"ChainLadder: Claims reserving with R","text":"model assumptions Log-Normal PIC Model following: random vector (ξ0,0,...,ξI,,ζ0,0,...,ζI,−1)(\\xi_{0,0},...,\\xi_{,}, \\zeta_{0,0},...,\\zeta_{,-1}) multivariate Gaussian distribution uncorrelated components given $$ ξi,j∼N(Φj,σj2),\\begin{equation*} \\xi_{,j} \\sim N(\\Phi_j,\\sigma^2_j), \\end{equation*}ζk,l∼N(Ψl,τl2);\\begin{equation*} \\zeta_{k,l} \\sim N(\\Psi_l,\\tau^2_l); \\end{equation*} cumulative payments given recursion Pi,j=Pi,j−1exp(ξi,j),\\begin{equation*} P_{,j} = P_{,j-1} \\exp(\\xi_{,j}), \\end{equation*} $$ initial value Pi,0=exp(ξi,0)P_{,0} = \\exp (\\xi_{,0}); incurred losses Ii,jI_{,j} given backwards recursion Ii,j−1=Ii,jexp(−ζi,j−1), \\begin{equation*} I_{,j-1} = I_{,j} \\exp(-\\zeta_{,j-1}), \\end{equation*}   initial value Ii,=Pi,II_{,}=P_{,}. components Θ\\Theta independent σj,τj>0\\sigma_j,\\tau_j > 0 j.","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"parameter-estimation","dir":"Articles","previous_headings":"Paid-incurred chain model","what":"Parameter estimation","title":"ChainLadder: Claims reserving with R","text":"Parameters Θ\\Theta model general known need estimated observations. estimated Bayesian framework. Bayesian PIC model assume previous assumptions hold true deterministic σ0,...,σJ\\sigma_0,...,\\sigma_J τ0,...,τJ−1\\tau_0,...,\\tau_{J-1} Φm∼N(ϕm,sm2), \\begin{equation*} \\Phi_m \\sim N(\\phi_m,s^2_m), \\end{equation*} Ψn∼N(ψn,tn2). \\begin{equation*} \\Psi_n \\sim N(\\psi_n,t^2_n). \\end{equation*} full Bayesian approach advantage give analytical expressions posterior distributions prediction uncertainty. Paid-incurred Chain model implemented ChainLadder package via function PaidIncurredChain. example apply function USAA paid incurred triangles: can access reserves origin year via total reserve via s.e. square root mean square error prediction total ultimate loss. ’s important notice model implemented special case non-informative priors Φm\\Phi_m Ψn\\Psi_n; means let sm2→∞s^2_m \\\\infty tn2→∞t^2_n \\\\infty.","code":"PIC <- PaidIncurredChain(USAApaid, USAAincurred) PIC $Ult.Loss.Origin          [,1]  [1,]  983113  [2,] 1078697  [3,] 1145761  [4,] 1245171  [5,] 1371964  [6,] 1433857  [7,] 1415964  [8,] 1410065  [9,] 1320415  $Ult.Loss [1] 11405008  $Res.Origin           [,1]  [1,]    965.3  [2,]   3159.6  [3,]   7386.4  [4,]  18521.4  [5,]  47232.4  [6,] 113727.4  [7,] 230663.7  [8,] 443903.3  [9,] 778393.5  $Res.Tot [1] 1643953  $s.e. [1] 113940 PIC$Res.Origin [,1]  [1,]    965.3  [2,]   3159.6  [3,]   7386.4  [4,]  18521.4  [5,]  47232.4  [6,] 113727.4  [7,] 230663.7  [8,] 443903.3  [9,] 778393.5 PIC$Res.Tot [1] 1643953"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"one-year-claims-development-result","dir":"Articles","previous_headings":"","what":"One year claims development result","title":"ChainLadder: Claims reserving with R","text":"stochastic claims reserving methods considered predict lower (unknown) triangle assess uncertainty prediction. instance, Mack’s uncertainty formula quantifies total prediction uncertainty chain-ladder predictor entire run-outstanding claims. Modern solvency considerations, Solvency II, require second view claims reserving uncertainty. second view short-term view requires assessments one-year changes claims predictions one updates available information end accounting year. time t≥nt\\ge n information $$ \\begin{equation*} {\\cal D}_{t} = \\left\\{C_{,k};~{+k \\le t+1} \\right\\}. \\end{equation*} $$ motivates following sequence predictors ultimate claim Ci,KC_{,K} times t≥nt\\ge n $$ \\begin{equation*} \\widehat{C}^{(t)}_{,K}= \\mathbb{E}[C_{,K}|{\\cal D}_t]. \\end{equation*} $$ one year claims development results (CDR), see Merz-Wüthrich , consider changes one year updates, , $$ \\begin{equation*} {\\rm CDR}_{,t+1} =\\widehat{C}^{(t)}_{,K}-\\widehat{C}^{(t+1)}_{,K}. \\end{equation*} $$ tower property conditional expectation implies CDRs average 0, , $\\mathbb{E}[{\\rm CDR}_{,t+1}|{\\cal D}_t]=0$ Merz-Wüthrich formula (Michael Merz Wüthrich 2008a), (Michael Merz Wüthrich 2014) assesses uncertainty predictions measured following conditional mean square error prediction (MSEP) $$ \\begin{equation*} {\\rm msep}_{{\\rm CDR}_{,t+1}|{\\cal D}_t}(0) = \\mathbb{E} \\left[\\left.\\left({\\rm CDR}_{,t+1}-0\\right)^2 \\right|{\\cal D}_t \\right]. \\end{equation*} $$ major difficulty evaluation conditional MSEP quantification parameter estimation uncertainty.","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"cdr-functions","dir":"Articles","previous_headings":"One year claims development result","what":"CDR functions","title":"ChainLadder: Claims reserving with R","text":"one year claims development result (CDR) can estimate via generic CDR function objects MackChainLadder BootChainLadder. , tweedieReserve function offers also option estimate one year CDR, setting argument rereserving=TRUE. example, reproduce results (Michael Merz Wüthrich 2014) use: review full claims development picture set argument dev=\"\": See help files CDR tweedieReserve details.","code":"M <- MackChainLadder(MW2014, est.sigma=\"Mack\") cdrM <- CDR(M) round(cdrM, 1) IBNR CDR(1)S.E. Mack.S.E. 1         0.0        0.0       0.0 2         1.0        0.4       0.4 3        10.1        2.5       2.6 4        21.2       16.7      16.9 5       117.7      156.4     157.3 6       223.3      137.7     207.2 7       361.8      171.2     261.9 8       469.4       70.3     292.3 9       653.5      271.6     390.6 10     1008.8      310.1     502.1 11     1011.9      103.4     486.1 12     1406.7      632.6     806.9 13     1492.9      315.0     793.9 14     1917.6      406.1     891.7 15     2458.2      285.2     916.5 16     3384.3      668.2    1106.1 17     9596.6      733.2    1295.7 Total 24134.9     1842.9    3233.7 cdrAll <- CDR(M,dev=\"all\") round(cdrAll, 1) IBNR CDR(1)S.E. CDR(2)S.E. CDR(3)S.E. CDR(4)S.E. CDR(5)S.E. CDR(6)S.E. 1         0.0        0.0        0.0        0.0        0.0        0.0        0.0 2         1.0        0.4        0.0        0.0        0.0        0.0        0.0 3        10.1        2.5        0.4        0.0        0.0        0.0        0.0 4        21.2       16.7        2.4        0.3        0.0        0.0        0.0 5       117.7      156.4       16.4        2.4        0.3        0.0        0.0 6       223.3      137.7      154.0       16.1        2.3        0.3        0.0 7       361.8      171.2      131.0      148.0       15.5        2.2        0.3 8       469.4       70.3      185.0      141.8      160.9       16.8        2.4 9       653.5      271.6       61.8      178.0      136.9      155.7       16.3 10     1008.8      310.1      274.6       59.0      180.4      138.6      158.1 11     1011.9      103.4      293.0      260.0       53.0      170.9      131.4 12     1406.7      632.6      102.3      302.2      268.7       52.8      176.6 13     1492.9      315.0      572.1       86.6      273.0      242.8       45.4 14     1917.6      406.1      313.3      573.0       84.4      273.1      243.1 15     2458.2      285.2      395.5      305.3      560.8       80.1      267.1 16     3384.3      668.2      271.7      380.2      293.3      540.6       75.7 17     9596.6      733.2      645.4      261.0      367.0      282.8      522.9 Total 24134.9     1842.9     1485.1     1208.3     1071.1      901.1      785.3       CDR(7)S.E. CDR(8)S.E. CDR(9)S.E. CDR(10)S.E. CDR(11)S.E. CDR(12)S.E. 1            0.0        0.0        0.0         0.0         0.0         0.0 2            0.0        0.0        0.0         0.0         0.0         0.0 3            0.0        0.0        0.0         0.0         0.0         0.0 4            0.0        0.0        0.0         0.0         0.0         0.0 5            0.0        0.0        0.0         0.0         0.0         0.0 6            0.0        0.0        0.0         0.0         0.0         0.0 7            0.0        0.0        0.0         0.0         0.0         0.0 8            0.3        0.0        0.0         0.0         0.0         0.0 9            2.3        0.3        0.0         0.0         0.0         0.0 10          16.6        2.4        0.3         0.0         0.0         0.0 11         150.4       15.7        2.3         0.3         0.0         0.0 12         135.8      155.6       16.3         2.3         0.3         0.0 13         159.7      122.9      141.1        14.8         2.1         0.3 14          44.1      159.9      123.0       141.4        14.8         2.1 15         237.9       42.3      156.4       120.4       138.5        14.5 16         257.3      229.3       39.9       150.8       116.1       133.6 17          71.8      248.8      221.7        38.1       145.9       112.3 Total      525.2      476.3      366.4       269.3       245.0       180.4       CDR(13)S.E. CDR(14)S.E. CDR(15)S.E. CDR(16)S.E. CDR(17)S.E. Mack.S.E. 1             0.0         0.0         0.0         0.0           0       0.0 2             0.0         0.0         0.0         0.0           0       0.4 3             0.0         0.0         0.0         0.0           0       2.6 4             0.0         0.0         0.0         0.0           0      16.9 5             0.0         0.0         0.0         0.0           0     157.3 6             0.0         0.0         0.0         0.0           0     207.2 7             0.0         0.0         0.0         0.0           0     261.9 8             0.0         0.0         0.0         0.0           0     292.3 9             0.0         0.0         0.0         0.0           0     390.6 10            0.0         0.0         0.0         0.0           0     502.1 11            0.0         0.0         0.0         0.0           0     486.1 12            0.0         0.0         0.0         0.0           0     806.9 13            0.0         0.0         0.0         0.0           0     793.9 14            0.3         0.0         0.0         0.0           0     891.7 15            2.1         0.3         0.0         0.0           0     916.5 16           14.0         2.0         0.3         0.0           0    1106.1 17          129.3        13.5         1.9         0.3           0    1295.7 Total       130.1        13.7         2.0         0.3           0    3233.7"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"model-validation-with-tweediereserve","dir":"Articles","previous_headings":"","what":"Model Validation with tweedieReserve","title":"ChainLadder: Claims reserving with R","text":"Model validation one key activities insurance company goes Internal Model Approval Process regulator. section gives examples arguments tweedieReserve function can used validate stochastic reserving model. argument design.type allows us test different regression structures. classic -dispersed Poisson (ODP) model uses following structure: Y∽𝚊𝚜.𝚏𝚊𝚌𝚝𝚘𝚛(OY)+𝚊𝚜.𝚏𝚊𝚌𝚝𝚘𝚛(DY), \\begin{equation*} Y \\backsim \\mathtt{.factor}(OY) + \\mathtt{.factor}(DY), \\end{equation*} (.e. design.type=c(1,1,0)). allows, together log link, achieve results (volume weighted) chain-ladder model, thus model implied assumptions. common model shortcoming residuals plotted calendar period start show pattern, chain-ladder isn’t capable model. order overcome , user interested change regression structure order try strip patterns (Gigante Sigalotti 2005). example, regression structure like: Y∽𝚊𝚜.𝚏𝚊𝚌𝚝𝚘𝚛(DY)+𝚊𝚜.𝚏𝚊𝚌𝚝𝚘𝚛(CY), \\begin{equation*} Y \\backsim \\mathtt{.factor}(DY) + \\mathtt{.factor}(CY), \\end{equation*} .e. design.type=c(0,1,1) considered instead. approach returns results arithmetic separation method, modelling explicitly inflation parameters consequent calendar periods. Another interesting assumption assumed underlying distribution. ODP model assumes following: Pi,j∽ODP(mi,j,ϕ⋅mi,j), \\begin{equation*} P_{,j} \\backsim ODP(m_{,j},\\phi \\cdot m_{,j}), \\end{equation*} particular case Tweedie distribution, p parameter equals 1. Generally speaking, random variable Y obeys Tweedie distribution, variance 𝕍[Y]\\mathbb{V}[Y] relates mean 𝔼[Y]\\mathbb{E}[Y] following law: 𝕍[Y]=⋅𝔼[Y]p, \\begin{equation*} \\mathbb{V}[Y] = \\cdot \\mathbb{E}[Y]^p, \\end{equation*} p positive constants. user able test different p values var.power function argument. Besides, order validate Tweedie’s p parameter, interesting plot likelihood profile defined p values (p.check argument) given dataset regression structure. achieved setting p.optim=TRUE argument.  example shows MLE p seems 0 1, possible Tweedie models aren’t defined 0 < p < 1, thus Error message. , despite , can conclude overall value p=1 reasonable dataset chosen regression function, seems near MLE. sensitivities run : Bootstrap type (parametric / semi-parametric), via bootstrap argument Bias adjustment (using semi-parametric bootstrap), via boot.adj argument Please refer help(tweedieReserve) additional information.","code":"p_profile <- tweedieReserve(MW2008, p.optim=TRUE,    p.check=c(0,1.1,1.2,1.3,1.4,1.5,2,3),    design.type=c(0,1,1),    rereserving=FALSE,    bootstrap=0,    progressBar=FALSE) # 0 1.1 1.2 1.3 1.4 1.5 2 3 # ........Done. # MLE of p is between 0 and 1, which is impossible. # Instead, the MLE of p has been set to NA . # Please check your data and the call to tweedie.profile(). # Error in if ((xi.max == xi.vec[1]) | (xi.max == xi.vec[length(xi.vec)])) { : # missing value where TRUE/FALSE needed"},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"further-resources","dir":"Articles","previous_headings":"","what":"Further resources","title":"ChainLadder: Claims reserving with R","text":"full Bayesian approach claims reserving R Stan using brms package see ‘Hierarchical Compartmental Reserving Models’ (Gesmann Morris 2020). useful documents resources get started R context actuarial work: Introduction R Actuaries (De Silva 2006). Computational Actuarial Science R (Charpentier 2014) Modern Actuarial Risk Theory – Using R (Kaas et al. 2001) Actuarial Toolkit (Maynard et al. 2006) Insurance Data Science conference: https://insurancedatascience.org","code":""},{"path":"http://mages.github.io/ChainLadder/articles/ChainLadder.html","id":"other-insurance-related-r-packages","dir":"Articles","previous_headings":"Further resources","what":"Other insurance related R packages","title":"ChainLadder: Claims reserving with R","text":"list R packages context insurance. list -means complete, CRAN Task Views ‘Empirical Finance’ ‘Probability Distributions’ provide links additional resources. cplm: Likelihood-based Bayesian methods fitting Tweedie compound Poisson linear models (Zhang 2012). DCL: Claims Reserving Double Chain-Ladder Model. Statistical modelling forecasting claims reserving non-life insurance Double Chain-Ladder framework (Miranda, Nielsen, Verrall 2012). actuar: Loss distributions modelling, risk theory (including ruin theory), simulation compound hierarchical models credibility theory (Dutang, Goulet, Pigeon 2008). fitdistrplus: Help fit parametric distribution non-censored censored data (Delignette-Muller et al. 2010). mondate: R package keep track dates terms months (Murphy 2021). lifecontingencies: Package perform actuarial evaluation life contingencies (Spedicato 2022). raw: R Actuarial Workshops, several sets publicly available data interest non-life actuaries (Fannin 2021) SPLICE: Synthetic Paid Loss Incurred Cost Experience (SPLICE) Simulator (Avanzi, Taylor, Wang 2021) SynthETIC: Synthetic Experience Tracking Insurance Claims (Avanzi et al. 2021) NetSimR: Actuarial Functions Non-Life Insurance Modelling (Parizas 2019) longer CRAN: lossDev: Bayesian time series loss development model. Features include skewed-t distribution time-varying scale parameter, Reversible Jump MCMC determining functional form consumption path, structural break path (Laws Schmid 2011). favir: Formatted Actuarial Vignettes R. FAViR lowers learning curve R environment. series peer-reviewed Sweave papers use consistent style (Escoto 2011). MRMR: Multivariate Regression Models Reserving (Fannin 2013).","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Markus Gesmann. Author, maintainer. Daniel Murphy. Author. Yanwei (Wayne) Zhang. Author. Alessandro Carrato. Author. Giuseppe Crupi. Contributor. Christophe Dutang. Contributor. Arnaud Lacoume. Contributor. Arthur Charpentier. Contributor. Mario Wuthrich. Author. Fabio Concina. Author. Eric Dal Moro. Author. Yuriy Krvavych. Contributor. Vincent Goulet. Contributor. Marco De Virgilis. Contributor. Marco Spina. Contributor.","code":""},{"path":"http://mages.github.io/ChainLadder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gesmann M, Murphy D, Zhang Y, Carrato , Wuthrich M, Concina F, Dal Moro E (2024). ChainLadder: Statistical Methods Models Claims Reserving General Insurance. R package version 0.2.20, https://mages.github.io/ChainLadder/.","code":"@Manual{,   title = {ChainLadder: Statistical Methods and Models for Claims Reserving in General Insurance},   author = {Markus Gesmann and Daniel Murphy and Yanwei (Wayne) Zhang and Alessandro Carrato and Mario Wuthrich and Fabio Concina and Eric {Dal Moro}},   year = {2024},   note = {R package version 0.2.20},   url = {https://mages.github.io/ChainLadder/}, }"},{"path":"http://mages.github.io/ChainLadder/index.html","id":"chainladder","dir":"","previous_headings":"","what":"Statistical Methods and Models for Claims Reserving in General Insurance","title":"Statistical Methods and Models for Claims Reserving in General Insurance","text":"ChainLadder R package providing methods models typically used insurance claims reserving, including: Mack chain-ladder, Munich chain-ladder Bootstrap models General multivariate chain ladder-models Loss development factor fitting Cape Cod models Generalized linear models One year claims development result functions convert tables triangles triangles tables convert cumulative incremental incremental cumulative triangles visualise triangles Python claims reserving package visit chainladder-python.","code":""},{"path":"http://mages.github.io/ChainLadder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Statistical Methods and Models for Claims Reserving in General Insurance","text":"can install stable version CRAN: can also install package via Github repository:","code":"install.packages('ChainLadder', dependencies = TRUE) # install.package(\"remotes\") # In case you have not installed it. remotes::install_github(\"mages/ChainLadder\", dependencies = TRUE)"},{"path":"http://mages.github.io/ChainLadder/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Statistical Methods and Models for Claims Reserving in General Insurance","text":"See ChainLadder package vignette details.","code":"library(ChainLadder) ?ChainLadder demo(ChainLadder)"},{"path":"http://mages.github.io/ChainLadder/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Statistical Methods and Models for Claims Reserving in General Insurance","text":"cite package ‘ChainLadder’ publications see output : See also: Markus Gesmann. Claims Reserving IBNR. Computational Actuarial Science R. 2014. Chapman Hall/CRC","code":"citation(package=\"ChainLadder\")"},{"path":"http://mages.github.io/ChainLadder/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Statistical Methods and Models for Claims Reserving in General Insurance","text":"package free open source software, licensed GPL. ChainLadder documentation licensed Creative Commons Attribution-ShareAlike 4.0 International License.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ABC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of accumulated claims data — ABC","title":"Run off triangle of accumulated claims data — ABC","text":"Run-triangle worker's compensation portfolio large company","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ABC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of accumulated claims data — ABC","text":"","code":"data(ABC)"},{"path":"http://mages.github.io/ChainLadder/reference/ABC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of accumulated claims data — ABC","text":"matrix 11 accident years 11 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ABC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of accumulated claims data — ABC","text":"B. Zehnwirth G. Barnett. Best Estimates Reserves. Proceedings CAS. Volume LXXXVII. Number 167. \tNovember 2000.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ABC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of accumulated claims data — ABC","text":"","code":"ABC #>       dev #> origin      1       2       3       4      5      6       7       8       9 #>   1977 153638  342050  476584  564040 624388 666792  698030  719282  735904 #>   1978 178536  404948  563842  668528 739976 787966  823542  848360  871022 #>   1979 210172  469340  657728  780802 864182 920268  958764  992532 1019932 #>   1980 211448  464930  648300  779340 858334 918566  964134 1002134      NA #>   1981 219810  486114  680764  800862 888444 951194 1002194      NA      NA #>   1982 205654  458400  635906  765428 862214 944614      NA      NA      NA #>   1983 197716  453124  647772  790100 895700     NA      NA      NA      NA #>   1984 239784  569026  833828 1024228     NA     NA      NA      NA      NA #>   1985 326304  798048 1173448      NA     NA     NA      NA      NA      NA #>   1986 420778 1011178      NA      NA     NA     NA      NA      NA      NA #>   1987 496200      NA      NA      NA     NA     NA      NA      NA      NA #>       dev #> origin     10     11 #>   1977 750344 762544 #>   1978 889022     NA #>   1979     NA     NA #>   1980     NA     NA #>   1981     NA     NA #>   1982     NA     NA #>   1983     NA     NA #>   1984     NA     NA #>   1985     NA     NA #>   1986     NA     NA #>   1987     NA     NA plot(ABC)  plot(ABC, lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/AutoBI.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangles of accumulated claim data — AutoBI","title":"Run off triangles of accumulated claim data — AutoBI","text":"Run-triangles Automobile Bodily Injury Liability.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/AutoBI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangles of accumulated claim data — AutoBI","text":"","code":"data(AutoBI)"},{"path":"http://mages.github.io/ChainLadder/reference/AutoBI.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangles of accumulated claim data — AutoBI","text":"Portfolio automobile bodily injury liability experience period 1969 1976. Paid Claims, Closed Claims Reported Claim Counts respectively","code":""},{"path":"http://mages.github.io/ChainLadder/reference/AutoBI.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangles of accumulated claim data — AutoBI","text":"Berquist, J.R. Sherman, R.E., Loss Reserve Adequacy Testing: Comprehensive,   Systematic Approach, Proceedings Casualty Actuarial Society, LXIV, 1977, pp.123-184.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/AutoBI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangles of accumulated claim data — AutoBI","text":"","code":"data(AutoBI) names(AutoBI) #> [1] \"AutoBIPaid\"           \"AutoBIClosed\"         \"AutoBIReportedCounts\" AutoBI$AutoBIPaid #>      [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8] #> [1,] 1904 5398  7496  8882  9712 10071 10199 10256 #> [2,] 2235 6261  8691 10443 11346 11754 12031    NA #> [3,] 2441 7348 10662 12655 13748 14235    NA    NA #> [4,] 2503 8173 11810 14176 15383    NA    NA    NA #> [5,] 2838 8712 12728 15278    NA    NA    NA    NA #> [6,] 2405 7858 11771    NA    NA    NA    NA    NA #> [7,] 2759 9182    NA    NA    NA    NA    NA    NA #> [8,] 2801   NA    NA    NA    NA    NA    NA    NA AutoBI$AutoBIClosed #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,] 4079 6616 7192 7494 7670 7749 7792 7806 #> [2,] 4429 7230 7899 8291 8494 8606 8647   NA #> [3,] 4914 8174 9068 9518 9761 9855   NA   NA #> [4,] 4497 7842 8747 9254 9469   NA   NA   NA #> [5,] 4419 7665 8659 9093   NA   NA   NA   NA #> [6,] 3486 6214 6916   NA   NA   NA   NA   NA #> [7,] 3516 6226   NA   NA   NA   NA   NA   NA #> [8,] 3230   NA   NA   NA   NA   NA   NA   NA AutoBI$AutoBIReportedCounts #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,] 6553 7696 7770 7799 7814 7819 7820 7821 #> [2,] 7277 8537 8615 8661 8675 8679 8682   NA #> [3,] 8259 9765 9884 9926 9940 9945   NA   NA #> [4,] 7858 9474 9615 9664 9680   NA   NA   NA #> [5,] 7808 9376 9513 9562   NA   NA   NA   NA #> [6,] 6278 7614 7741   NA   NA   NA   NA   NA #> [7,] 6446 7884   NA   NA   NA   NA   NA   NA #> [8,] 6115   NA   NA   NA   NA   NA   NA   NA"},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"B-S Paid Claim Development Adjustment methods adjusts paid claims based underlying relation paid closed claims.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"","code":"BS.paid.adj(Triangle.rep.counts = NULL, Triangle.closed, Triangle.paid,              ult.counts = NULL, regression.type = \"exponential\")"},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"Triangle.rep.counts cumulative reported claim counts triangle.  Assume columns development     period, use transpose otherwise.     (mxn)-matrix \\(C_{ik}\\) filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid . Triangle.closed cumulative closed claim counts triangle.  Assume columns development     period, use transpose otherwise. Triangle.paid cumulative paid claims triangle.  Assume columns development     period, use transpose otherwise. ult.counts vector ultimate claim counts. regression.type Default = \"exponential\". Type regression used model, can take 'exponential' 'linear'. See also 'Details'","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"importance recognizing impact shifts rate settlement claims upon historical paid loss data   can materially affect ultimate projections. functions adjusts paid claims based numerical method described B-S paper. Berquist Sherman presented technique adjust paid claim development method changes settlement rates.   first step paid claims adjustment determine disposal rates accident year maturity. disposal rate defined cumulative closed claim counts accident year-maturity age cell   divided selected ultimate claim count particular accident year. ultimate claim counts provided, used calulate disposal rates, otherwise ultimate claim counts estimated   cumulative reported  claim counts triangle standard development method. disposal rates along latest diagonal selected basis adjusting closed claim count triangle,   selected disposal rate maturity multiplied ultimate number claims determine adjusted triangle   closed claim counts. Berquist Sherman use regression analysis identify mathematical formula approximates relationship cumulative   number closed claims (X) cumulative paid claims (Y). algorithm gives possibility, choice 'regression.type' field,   fit exponential model, \\(Y = *e^(bX)\\), linear model, \\(Y = +b*X\\). relation estimated based unadjusted closed claim counts unadjusted paid claims. regression coefficients estimated, used   adjust paid claims based coefficients adjusted closed claim counts triangle.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"BS.paid.adj returns adjusted paid claim triangle","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"Berquist, J.R. Sherman, R.E., Loss Reserve Adequacy Testing: Comprehensive,   Systematic Approach, Proceedings Casualty Actuarial Society, LXIV, 1977, pp.123-184.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/BS.paid.adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Berquist-Sherman Paid Claim Development Adjustment — BS.paid.adj","text":"","code":"# Adjust the Triangle of Paid Claims based on Reported Claim Counts  adj_paid <- BS.paid.adj( Triangle.rep.counts = AutoBI$AutoBIReportedCounts,                          Triangle.closed = AutoBI$AutoBIClosed,                          Triangle.paid = AutoBI$AutoBIPaid,                          regression.type = 'exponential' )  # Calculate the IBNR from the standard unadjusted Paid Triangle  std_ibnr <- summary(MackChainLadder(AutoBI$AutoBIPaid))$Totals[4, 1] #> Warning: 'loglinear' model to estimate sigma_n doesn't appear appropriate.  #> p-value > 5. #>  est.sigma will be overwritten to 'Mack'. #>  Mack's estimation method will be used instead.  # Calculate the IBNR from the adjusted Paid Triangle  adj_ibnr <- summary(MackChainLadder(adj_paid))$Totals[4, 1]  # Compare the two  adj_ibnr #> [1] 41722.26 std_ibnr #> [1] 31754.43  ## For more examples see: if (FALSE) { # \\dontrun{  demo(BS.paid.adj) } # }"},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap-Chain-Ladder Model — BootChainLadder","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"BootChainLadder procedure provides predictive   distribution reserves IBNRs cumulative claims development triangle.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"","code":"BootChainLadder(Triangle, R = 999, process.distr=c(\"gamma\", \"od.pois\"), seed = NULL)"},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"Triangle cumulative claims triangle. Assume columns development \tperiod, use transpose otherwise.  (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\le n+1-; =1,\\ldots,m; m\\ge n \\). See     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g accident years). R number bootstrap replicates. process.distr character string indicating process     distribution assumed. One \"gamma\" (default),     \"od.pois\" (-dispersed Poisson), can abbreviated seed optional seed random generator","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"BootChainLadder function uses two-stage   bootstrapping/simulation approach. first stage ordinary   chain-ladder methods applied cumulative claims triangle.   calculate scaled Pearson residuals bootstrap   R times forecast future incremental claims payments via   standard chain-ladder method.   second stage simulate process error bootstrap   value mean using process distribution assumed.   set reserves obtained way forms predictive distribution,   summary statistics mean, prediction error   quantiles can derived.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"BootChainLadder gives list following elements back: call matched call Triangle input triangle f chain-ladder factors simClaims array dimension c(m,n,R) simulated claims IBNR.ByOrigin array dimension c(m,1,R) modeled     IBNRs origin period IBNR.Triangles array dimension c(m,n,R) modeled     IBNR development triangles IBNR.Totals vector R samples total IBNRs ChainLadder.Residuals adjusted Pearson chain-ladder residuals process.distr assumed process distribution R number bootstrap replicates","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"England, PD Verrall, RJ. Stochastic Claims Reserving     General Insurance (discussion), British Actuarial Journal 8,     III. 2002 Barnett Zehnwirth. need diagnostic assessment     bootstrap predictive models, Insureware technical report. 2007","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"Markus Gesmann, markus.gesmann@gmail.com","code":""},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"implementation BootChainLadder follows closely   discussion bootstrap model section 8 appendix 3   paper England Verrall (2002).","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/BootChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap-Chain-Ladder Model — BootChainLadder","text":"","code":"# See also the example in section 8 of England & Verrall (2002) on page 55.  B <- BootChainLadder(RAA, R=999, process.distr=\"gamma\") B #> BootChainLadder(Triangle = RAA, R = 999, process.distr = \"gamma\") #>  #>      Latest Mean Ultimate Mean IBNR IBNR.S.E IBNR 75% IBNR 95% #> 1981 18,834        18,834         0        0        0        0 #> 1982 16,704        16,874       170      751      213    1,435 #> 1983 23,466        24,088       622    1,240    1,039    3,089 #> 1984 27,067        28,785     1,718    1,915    2,758    5,461 #> 1985 26,180        29,085     2,905    2,387    4,148    7,509 #> 1986 15,852        19,561     3,709    2,476    5,189    8,102 #> 1987 12,314        17,835     5,521    3,089    7,197   11,348 #> 1988 13,112        24,170    11,058    4,920   13,952   19,626 #> 1989  5,395        16,271    10,876    5,920   14,529   21,221 #> 1990  2,063        19,929    17,866   14,195   25,820   43,213 #>  #>                  Totals #> Latest:         160,987 #> Mean Ultimate:  215,431 #> Mean IBNR:       54,444 #> IBNR.S.E         18,711 #> Total IBNR 75%:  65,615 #> Total IBNR 95%:  87,033 plot(B)  # Compare to MackChainLadder MackChainLadder(RAA) #> MackChainLadder(Triangle = RAA) #>  #>      Latest Dev.To.Date Ultimate   IBNR Mack.S.E CV(IBNR) #> 1981 18,834       1.000   18,834      0        0      NaN #> 1982 16,704       0.991   16,858    154      143    0.928 #> 1983 23,466       0.974   24,083    617      592    0.959 #> 1984 27,067       0.943   28,703  1,636      713    0.436 #> 1985 26,180       0.905   28,927  2,747    1,452    0.529 #> 1986 15,852       0.813   19,501  3,649    1,995    0.547 #> 1987 12,314       0.694   17,749  5,435    2,204    0.405 #> 1988 13,112       0.546   24,019 10,907    5,354    0.491 #> 1989  5,395       0.336   16,045 10,650    6,332    0.595 #> 1990  2,063       0.112   18,402 16,339   24,566    1.503 #>  #>               Totals #> Latest:   160,987.00 #> Dev:            0.76 #> Ultimate: 213,122.23 #> IBNR:      52,135.23 #> Mack.S.E   26,880.74 #> CV(IBNR):       0.52 quantile(B, c(0.75,0.95,0.99, 0.995)) #> $ByOrigin #>        IBNR 75%  IBNR 95%  IBNR 99% IBNR 99.5% #> 1981     0.0000     0.000     0.000      0.000 #> 1982   213.3995  1435.471  2841.149   3733.411 #> 1983  1039.0556  3089.224  4612.046   4945.226 #> 1984  2758.0100  5461.188  7326.144   8210.354 #> 1985  4147.8889  7508.974  9486.665  10451.706 #> 1986  5188.7194  8101.653 11425.500  12991.492 #> 1987  7196.7695 11348.087 14662.543  15553.875 #> 1988 13952.0263 19625.821 25384.471  27311.402 #> 1989 14529.3956 21220.849 27990.618  30039.953 #> 1990 25819.5193 43212.773 59326.863  69688.238 #>  #> $Totals #>                Totals #> IBNR 75%:    65614.56 #> IBNR 95%:    87033.25 #> IBNR 99%:   105598.78 #> IBNR 99.5%: 113236.29 #>   # fit a distribution to the IBNR library(MASS) plot(ecdf(B$IBNR.Totals)) # fit a log-normal distribution  fit <- fitdistr(B$IBNR.Totals[B$IBNR.Totals>0], \"lognormal\") fit #>      meanlog         sdlog     #>   10.843118752    0.361345937  #>  ( 0.011432480) ( 0.008083984) curve(plnorm(x,fit$estimate[\"meanlog\"], fit$estimate[\"sdlog\"]), col=\"red\", add=TRUE)   # See also the ABC example in  Barnett and Zehnwirth (2007)  A <- BootChainLadder(ABC, R=999, process.distr=\"gamma\") A #> BootChainLadder(Triangle = ABC, R = 999, process.distr = \"gamma\") #>  #>         Latest Mean Ultimate Mean IBNR IBNR.S.E  IBNR 75%  IBNR 95% #> 1977   762,544       762,544         0        0         0         0 #> 1978   889,022       903,785    14,763    5,294    17,870    25,088 #> 1979 1,019,932     1,057,485    37,553    8,255    42,584    52,947 #> 1980 1,002,134     1,066,375    64,241   10,251    70,679    81,667 #> 1981 1,002,194     1,102,771   100,577   11,906   108,005   121,005 #> 1982   944,614     1,088,751   144,137   15,090   153,149   169,439 #> 1983   895,700     1,108,749   213,049   17,306   225,902   241,604 #> 1984 1,024,228     1,410,477   386,249   24,510   402,307   427,184 #> 1985 1,173,448     1,939,010   765,562   37,797   790,815   829,805 #> 1986 1,011,178     2,374,197 1,363,019   62,695 1,402,463 1,468,146 #> 1987   496,200     2,695,177 2,198,977  115,211 2,271,713 2,406,393 #>  #>                     Totals #> Latest:         10,221,194 #> Mean Ultimate:  15,509,321 #> Mean IBNR:       5,288,127 #> IBNR.S.E           185,304 #> Total IBNR 75%:  5,410,706 #> Total IBNR 95%:  5,601,874 plot(A, log=TRUE)   ## One year claims development result CDR(A) #>             IBNR   IBNR.S.E  CDR(1)S.E  CDR(1)75%  CDR(1)95% #> 1977        0.00      0.000      0.000       0.00       0.00 #> 1978    14763.08   5293.531   5293.531   17869.54   25088.26 #> 1979    37553.24   8254.537   6670.831   41693.24   49736.98 #> 1980    64241.28  10251.176   7124.744   68509.36   77242.89 #> 1981   100576.54  11906.450   7873.762  105120.26  114376.66 #> 1982   144136.73  15090.436   9068.888  149663.92  160039.16 #> 1983   213049.04  17306.429  10684.855  219417.74  229909.23 #> 1984   386248.57  24509.999  15084.542  396311.31  412522.67 #> 1985   765562.32  37796.824  24428.579  782617.15  805892.09 #> 1986  1363019.41  62694.798  43786.860 1390328.35 1435838.51 #> 1987  2198976.82 115211.158  95813.485 2260987.08 2356162.85 #> Total 5288127.03 185304.355 138056.793 5369950.29 5522206.57"},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":null,"dir":"Reference","previous_headings":"","what":"One year claims development result — CDR","title":"One year claims development result — CDR","text":"Standard deviation claims development result one year distribution-free chain-ladder model (Mack) Bootstrap model.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One year claims development result — CDR","text":"","code":"CDR(x, ...) # S3 method for class 'MackChainLadder' CDR(x, dev=1, ...) # S3 method for class 'BootChainLadder' CDR(x, probs=c(0.75, 0.95), ...) # Default S3 method CDR(x, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One year claims development result — CDR","text":"x otput either MackChainLadder BootChainLadder dev vector development periods \"\".   Currently applicable MackChainLadder output.   Defines years run claims development result returned. probs applicable BootChainLadder output.   Define quantiles returned. ... arguments","code":""},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One year claims development result — CDR","text":"Merz & Wüthrich (2008) derived analytic formulae mean square error prediction claims development result Mack chain-ladder model one year assuming: opening reserves set using pure chain-ladder model     (tail) Claims develop year according assumptions underlying     Mack's model Reserves set one year using pure chain-ladder model     (tail)","code":""},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One year claims development result — CDR","text":"data.frame various IBNR/reserves one-year statistics claims development result.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"One year claims development result — CDR","text":"Michael Merz, Mario V. Wüthrich. Modelling claims development result solvency purposes. Casualty Actuarial Society E-Forum, Fall 2008. Michael Merz, Mario V. Wüthrich. Claims Run-Uncertainty: Full Picture.  Swiss Finance Institute Research Paper . 14-69. https://www.ssrn.com/abstract=2524352. 2014","code":""},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One year claims development result — CDR","text":"Mario Wüthrich Markus Gesmann contributions Arthur Charpentier Arnaud Lacoume CDR.MackChainLadder Giuseppe Crupi Markus Gesmann CDR.BootChainLadder.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"One year claims development result — CDR","text":"Tail factors currently supported.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/CDR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One year claims development result — CDR","text":"","code":"# Example from the 2008 Merz, Wuthrich paper mentioned above MW2008 #>       dev #> origin       1       2       3       4       5       6       7       8       9 #>      1 2202584 3210449 3468122 3545070 3621627 3644636 3669012 3674511 3678633 #>      2 2350650 3553023 3783846 3840067 3865187 3878744 3898281 3902425      NA #>      3 2321885 3424190 3700876 3798198 3854755 3878993 3898825      NA      NA #>      4 2171487 3165274 3395841 3466453 3515703 3548422      NA      NA      NA #>      5 2140328 3157079 3399262 3500520 3585812      NA      NA      NA      NA #>      6 2290664 3338197 3550332 3641036      NA      NA      NA      NA      NA #>      7 2148216 3219775 3428335      NA      NA      NA      NA      NA      NA #>      8 2143728 3158581      NA      NA      NA      NA      NA      NA      NA #>      9 2144738      NA      NA      NA      NA      NA      NA      NA      NA M <- MackChainLadder(MW2008, est.sigma=\"Mack\") plot(M)  CDR(M) #>              IBNR CDR(1)S.E.   Mack.S.E. #> 1           0.000     0.0000      0.0000 #> 2        4377.670   566.1744    566.1744 #> 3        9347.477  1486.5603   1563.8075 #> 4       28392.406  3923.0986   4157.2733 #> 5       51444.021  9722.8598  10536.4380 #> 6      111811.123 28442.6216  30319.4638 #> 7      187084.178 20954.2870  35967.0384 #> 8      411864.225 28119.3180  45090.1821 #> 9     1433505.008 53320.8210  69552.3397 #> Total 2237826.107 81080.5468 108401.3875 # Return all run-off result developments CDR(M, dev=\"all\") #>              IBNR CDR(1)S.E. CDR(2)S.E. CDR(3)S.E. CDR(4)S.E. CDR(5)S.E. #> 1           0.000     0.0000     0.0000     0.0000     0.0000     0.0000 #> 2        4377.670   566.1744     0.0000     0.0000     0.0000     0.0000 #> 3        9347.477  1486.5603   485.4195     0.0000     0.0000     0.0000 #> 4       28392.406  3923.0986  1305.9869   431.9915     0.0000     0.0000 #> 5       51444.021  9722.8598  3830.3960  1277.0783   423.8641     0.0000 #> 6      111811.123 28442.6216  9689.5440  3820.5641  1274.3261   423.4215 #> 7      187084.178 20954.2870 27423.5036  9340.4725  3684.4291  1229.1060 #> 8      411864.225 28119.3180 20421.8007 26951.8084  9178.4040  3621.3651 #> 9     1433505.008 53320.8210 27782.3071 20193.6339 26778.3919  9118.5624 #> Total 2237826.107 81080.5468 52222.0516 38517.4943 29104.1066 10109.0020 #>       CDR(6)S.E. CDR(7)S.E. CDR(8)S.E. CDR(9)S.E.   Mack.S.E. #> 1         0.0000     0.0000     0.0000          0      0.0000 #> 2         0.0000     0.0000     0.0000          0    566.1744 #> 3         0.0000     0.0000     0.0000          0   1563.8075 #> 4         0.0000     0.0000     0.0000          0   4157.2733 #> 5         0.0000     0.0000     0.0000          0  10536.4380 #> 6         0.0000     0.0000     0.0000          0  30319.4638 #> 7       408.6786     0.0000     0.0000          0  35967.0384 #> 8      1208.1604   401.9014     0.0000          0  45090.1821 #> 9      3598.2399  1200.5081   399.4584          0  69552.3397 #> Total  3876.0093  1281.3024   399.4584          0 108401.3875  # Example from the 2014 Merz, Wuthrich paper mentioned above MW2014 #>       dev #> origin     0     1     2     3     4     5     6     7     8     9    10    11 #>     1  13109 20355 21337 22043 22401 22658 22997 23158 23492 23664 23699 23904 #>     2  14457 22038 22627 23114 23238 23312 23440 23490 23964 23976 24048 24111 #>     3  16075 22672 23753 24052 24206 24757 24786 24807 24823 24888 24986 25401 #>     4  15682 23464 24465 25052 25529 25708 25752 25770 25835 26075 26082 26146 #>     5  16551 23706 24627 25573 26046 26115 26283 26481 26701 26718 26724 26728 #>     6  15439 23796 24866 25317 26139 26154 26175 26205 26764 26818 26836 26959 #>     7  14629 21645 22826 23599 24992 25434 25476 25549 25604 25709 25723    NA #>     8  17585 26288 27623 27939 28335 28638 28715 28759 29525 30302    NA    NA #>     9  17419 25941 27066 27761 28043 28477 28721 28878 28948    NA    NA    NA #>     10 16665 25370 26909 27611 27729 27861 29830 29844    NA    NA    NA    NA #>     11 15471 23745 25117 26378 26971 27396 27480    NA    NA    NA    NA    NA #>     12 15103 23393 26809 27691 28061 29183    NA    NA    NA    NA    NA    NA #>     13 14540 22642 23571 24127 24210    NA    NA    NA    NA    NA    NA    NA #>     14 14590 22336 23440 24029    NA    NA    NA    NA    NA    NA    NA    NA #>     15 13967 21515 22603    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     16 12930 20111    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     17 12539    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>       dev #> origin    12    13    14    15    16 #>     1  23960 23992 23994 24001 24002 #>     2  24252 24538 24540 24550    NA #>     3  25681 25705 25732    NA    NA #>     4  26150 26167    NA    NA    NA #>     5  26735    NA    NA    NA    NA #>     6     NA    NA    NA    NA    NA #>     7     NA    NA    NA    NA    NA #>     8     NA    NA    NA    NA    NA #>     9     NA    NA    NA    NA    NA #>     10    NA    NA    NA    NA    NA #>     11    NA    NA    NA    NA    NA #>     12    NA    NA    NA    NA    NA #>     13    NA    NA    NA    NA    NA #>     14    NA    NA    NA    NA    NA #>     15    NA    NA    NA    NA    NA #>     16    NA    NA    NA    NA    NA #>     17    NA    NA    NA    NA    NA W <- MackChainLadder(MW2014, est.sigma=\"Mack\") plot(W)  CDR(W) #>               IBNR   CDR(1)S.E.    Mack.S.E. #> 1         0.000000    0.0000000    0.0000000 #> 2         1.022874    0.4083149    0.4083149 #> 3        10.085643    2.5393857    2.5652899 #> 4        21.187574   16.7232632   16.8984949 #> 5       117.662565  156.4022713  157.2756452 #> 6       223.279748  137.6522771  207.1650862 #> 7       361.808180  171.1812092  261.9266093 #> 8       469.408830   70.3161155  292.2622285 #> 9       653.504225  271.6352221  390.5874717 #> 10     1008.763182  310.1268449  502.0606072 #> 11     1011.859648  103.3834357  486.0911099 #> 12     1406.702133  632.6388191  806.9028971 #> 13     1492.903495  315.0489135  793.9381916 #> 14     1917.636398  406.1424672  891.6613403 #> 15     2458.152208  285.2076540  916.4940218 #> 16     3384.341045  668.2337878 1106.1262716 #> 17     9596.552341  733.2222786 1295.6909824 #> Total 24134.870088 1842.8507073 3233.6807352  # Example with the BootChainLadder function, assuming overdispered Poisson model B <- BootChainLadder(MW2008, process.distr=c(\"od.pois\")) B #> BootChainLadder(Triangle = MW2008, process.distr = c(\"od.pois\")) #>  #>      Latest Mean Ultimate Mean IBNR IBNR.S.E  IBNR 75%  IBNR 95% #> 1 3,678,633     3,678,633         0        0         0         0 #> 2 3,902,425     3,906,478     4,053    5,483     6,479    14,431 #> 3 3,898,825     3,908,158     9,333    7,691    13,576    22,970 #> 4 3,548,422     3,576,411    27,989   11,954    35,437    49,473 #> 5 3,585,812     3,637,022    51,210   15,773    60,950    79,241 #> 6 3,641,036     3,752,372   111,336   22,264   127,314   148,710 #> 7 3,428,335     3,614,528   186,193   28,383   202,102   232,830 #> 8 3,158,581     3,570,202   411,621   43,594   441,683   487,770 #> 9 2,144,738     3,574,294 1,429,556  101,382 1,491,662 1,602,032 #>  #>                     Totals #> Latest:         30,986,807 #> Mean Ultimate:  33,218,098 #> Mean IBNR:       2,231,291 #> IBNR.S.E           132,952 #> Total IBNR 75%:  2,319,624 #> Total IBNR 95%:  2,456,423 CDR(B) #>              IBNR   IBNR.S.E  CDR(1)S.E  CDR(1)75%  CDR(1)95% #> 1           0.000      0.000      0.000       0.00       0.00 #> 2        4053.352   5483.375   5483.375    6479.00   14431.30 #> 3        9332.589   7690.852   6101.008   12265.95   20594.63 #> 4       27989.047  11954.354  10215.147   34481.45   46854.14 #> 5       51210.211  15772.669  10686.849   57025.21   70172.51 #> 6      111336.207  22263.812  16677.877  122893.82  140810.58 #> 7      186193.260  28383.341  18957.276  199120.62  217810.52 #> 8      411620.635  43594.083  33865.996  432812.75  471242.46 #> 9     1429556.088 101382.435  90832.645 1487533.82 1581666.14 #> Total 2231291.389 132952.187 110453.804 2303423.49 2423741.73"},{"path":"http://mages.github.io/ChainLadder/reference/ChainLadder-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods and Models for Claims Reserving — ChainLadder-package","title":"Methods and Models for Claims Reserving — ChainLadder-package","text":"ChainLadder provides methods models typically   used insurance claims reserving. package grew presentations given Stochastic   Reserving Seminar Institute Actuaries 2007 2008   followed talks CAS meetings 2008 2010. information available project web site   https://github.com/mages/ChainLadder financial packages see also CRAN Task View 'Emperical Finance'   https://CRAN.R-project.org/view=Finance.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ChainLadder-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods and Models for Claims Reserving — ChainLadder-package","text":"Maintainer: Markus Gesmann <markus.gesmann@gmail.com>","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ChainLadder-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods and Models for Claims Reserving — ChainLadder-package","text":"Thomas Mack. Distribution-free calculation standard error chain ladder reserve estimates. Astin Bulletin. Vol. 23. 2. 1993. pp.213:225 Thomas Mack. standard error chain ladder reserve estimates: Recursive calculation inclusion tail factor. Astin Bulletin. Vol. 29. 2. 1999. pp.361:366 Gerhard Quarg Thomas Mack. Munich Chain Ladder. Blatter DGVFM 26. Munich. 2004. England, PD Verrall, RJ. Stochastic Claims Reserving General Insurance (discussion). British Actuarial Journal 8. III. 2002 B. Zehnwirth G. Barnett. Best Estimates Reserves. Proceedings CAS. Volume LXXXVII. Number 167.November 2000. Clark, David R., \"LDF Curve-Fitting Stochastic Reserving: Maximum Likelihood Approach,\" CAS Forum, Fall 2003. Zhang Y. general multivariate chain ladder model.Insurance: Mathematics Economics, 46, pp. 588:599, 2010. Zhang, Y. Likelihood-based Bayesian Methods Tweedie Compound Poisson Linear Mixed Models, Statistics Computing, forthcoming. Bardis, Majidi, Murphy. Family Chain-Ladder Factor Models Selected Link Ratios. Variance. Pending. Variance 6:2, 2012, pp. 143-160. Modelling claims development result solvency purposes. Michael Merz, Mario V. Wüthrich. Casualty Actuarial Society E-Forum, Fall 2008. Claims Run-Uncertainty: Full Picture. Michael Merz, Mario V. Wüthrich. Swiss Finance Institute Research Paper . 14-69. https://www.ssrn.com/abstract=2524352. 2014 Markus Gesmann. Claims Reserving IBNR.   Computational Actuarial Science R. Chapman Hall/CRC. 2014","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ChainLadder-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods and Models for Claims Reserving — ChainLadder-package","text":"","code":"if (FALSE) { # \\dontrun{   demo(ChainLadder)   } # }"},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Clark LDF method — ClarkLDF","title":"Clark LDF method — ClarkLDF","text":"Analyze loss triangle using Clark's LDF (loss development factor) method.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clark LDF method — ClarkLDF","text":"","code":"ClarkLDF(Triangle, cumulative = TRUE, maxage = Inf,          adol = TRUE, adol.age = NULL, origin.width = NULL,         G = \"loglogistic\")"},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clark LDF method — ClarkLDF","text":"Triangle loss triangle form matrix. number columns must least four; number rows may 1. column names matrix able interpreted \"age\" losses column. row names matrix uniquely define year origin losses row. Losses may inception--date incremental. \"ages\" triangle can \"phase shifted\" – .e., first age need end origin period. (See Examples section.) need \"ages\" uniformly spaced. However, ages uniformly spaced, prudent specify origin.width argument. cumulative TRUE (default), values Triangle inception date. FALSE, Triangle holds incremental losses. maxage \"ultimate\" age losses projected. adol TRUE (default), growth function applied length time average date loss (\"adol\") losses origin year. FALSE, growth function applied length time since beginning origin year. adol.age pertinent adol TRUE. age average date losses within origin period units \"ages\" Triangle matrix. NULL (default) assumed half width origin period (case losses can assumed occur uniformly origin period). origin.width pertinent adol TRUE. width origin period units \"ages\" Triangle matrix. NULL (default) assumed mean difference \"ages\" triangle, warning differences equal. G character scalar identifying \"growth function.\" two growth functions defined time \"loglogistic\" (default) \"weibull\".","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clark LDF method — ClarkLDF","text":"Clark's \"LDF method\" assumes incremental losses across development periods loss triangle independent. assumes expected value incremental loss equal theoretical expected ultimate loss (U) (origin year) times change theoretical underlying growth function development period. Clark models growth function, also called percent ultimate, either loglogistic function (.k.., \"inverse power curve\") weibull function. Clark completes incremental loss model wrapping expected values within overdispersed poisson (ODP) process \"scale factor\" sigma^2 assumed known constant development periods. parameters Clark's \"LDF method\" therefore: U, omega theta (parameters loglogistic weibull growth functions). Finally, Clark uses maximum likelihood parameterize model, uses ODP process estimate process risk, uses Cramer-Rao theorem \"delta method\" estimate parameter risk. Clark recommends inspecting residuals help assess reasonableness model relative actual data (see plot.clark ).","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clark LDF method — ClarkLDF","text":"list class \"ClarkLDF\" components listed . (\"Key\" naming convention: caps represent parameters; mixed case represent origin-level amounts; -lower-case represent observation-level (origin, development age) results.)  method \"LDF\" growthFunction name growth function Origin names rows triangle CurrentValue mature value row CurrentAge mature \"age\" row CurrentAge.used mature age used; differs \"CurrentAge\"         adol=TRUE MAXAGE 'maxage' argument MAXAGE.USED maximum age development         average date loss;         differs MAXAGE adol=TRUE FutureValue projected loss amounts (\"Reserves\" Clark's paper) ProcessSE process standard error FutureValue ParameterSE parameter standard error FutureValue StdError total standard error (process + parameter)         FutureValue Total list amounts appear \"Total\" row         components \"Origin\" (=\"Total\"), \"CurrentValue\", \"FutureValue\",         \"ProcessSE\", \"ParameterSE\", \"StdError\" PAR estimated parameters THETAU estimated parameters \"ultimate loss\"         origin year (\"U\" Clark's notation) THETAG estimated parameters growth function GrowthFunction value growth function         CurrentAge.used GrowthFunctionMAXAGE value growth function         MAXAGE.used SIGMA2 estimate sigma^2 parameter Ldf \"-ultimate\" loss development factor         (sometimes called \"cumulative development factor\")         defined Clark's paper origin year LdfMAXAGE \"-ultimate\" loss development factor         maximum age used model TruncatedLdf \"truncated\" loss development factor developing         current diagonal         maximum age used model FutureValueGradient gradient FutureValue function origin origin year corresponding observed value incremental loss age age observed value incremental loss fitted expected value observed value incremental loss         (\"mu's\" Clark's paper) residuals actual minus fitted value         observed incremental loss stdresid standardized residuals         observed incremental loss         (= residuals/sqrt(sigma2*fitted),         referred \"normalized residuals\" Clark's paper; see p. 62) FI \"Fisher Information\" matrix defined Clark's paper     (.e., without sigma^2 value) value value loglikelihood function solution point counts number calls loglikelihood function         gradient function numerical convergence achieved","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clark LDF method — ClarkLDF","text":"Clark, David R., \"LDF Curve-Fitting Stochastic Reserving: Maximum Likelihood Approach\", Casualty Actuarial Society Forum, Fall, 2003  https://www.casact.org/sites/default/files/database/forum_03fforum_03ff041.pdf","code":""},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clark LDF method — ClarkLDF","text":"Daniel Murphy","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/ClarkLDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clark LDF method — ClarkLDF","text":"","code":"X <- GenIns ClarkLDF(X, maxage=20) #>  Origin CurrentValue    Ldf UltimateValue FutureValue  StdError  CV% #>       1    3,901,463  1.171     4,567,994     666,531   261,622 39.3 #>       2    5,339,085  1.217     6,496,508   1,157,423   375,333 32.4 #>       3    4,909,315  1.278     6,274,401   1,365,086   420,492 30.8 #>       4    4,588,268  1.363     6,253,962   1,665,694   483,350 29.0 #>       5    3,873,311  1.487     5,759,792   1,886,481   530,086 28.1 #>       6    3,691,712  1.681     6,206,592   2,514,880   653,577 26.0 #>       7    3,483,130  2.018     7,029,915   3,546,785   847,276 23.9 #>       8    2,864,498  2.709     7,760,999   4,896,501 1,113,865 22.7 #>       9    1,363,294  4.661     6,354,929   4,991,635 1,344,652 26.9 #>      10      344,014 19.091     6,567,720   6,223,706 2,892,103 46.5 #>   Total   34,358,090           63,272,813  28,914,723 4,848,938 16.8  # Clark's \"LDF method\" also works with triangles that have   # more development periods than origin periods ClarkLDF(qincurred, G=\"loglogistic\") #>  Origin CurrentValue     Ldf UltimateValue FutureValue StdError   CV% #>    1995        1,100   1.006         1,107           7       17 242.9 #>    1996        1,300   1.008         1,310          10       21 200.1 #>    1997        1,200   1.010         1,212          12       23 184.0 #>    1998        1,298   1.014         1,316          18       27 154.5 #>    1999        1,583   1.019         1,613          30       36 120.5 #>    2000        1,066   1.027         1,095          29       35 122.3 #>    2001        1,411   1.042         1,470          59       51  87.4 #>    2002        1,820   1.070         1,948         128       78  61.2 #>    2003        1,221   1.138         1,389         168       92  54.7 #>    2004        1,212   1.352         1,638         426      162  38.0 #>    2005          422   2.643         1,115         693      280  40.4 #>    2006           13 339.514         4,414       4,401    7,891 179.3 #>   Total       13,646                19,627       5,981    7,891 131.9  # Method also works for a \"triangle\" with only one row: # 1st row of GenIns; need \"drop=FALSE\" to avoid becoming a vector. ClarkLDF(GenIns[1, , drop=FALSE], maxage=20) #>  Origin CurrentValue   Ldf UltimateValue FutureValue StdError  CV% #>       1    3,901,463 1.176     4,589,676     688,213  334,290 48.6 #>   Total    3,901,463           4,589,676     688,213  334,290 48.6  # The age of the first evaluation may be prior to the end of the origin period. # Here the ages are in units of \"months\" and the first evaluation  # is at the end of the third quarter. X <- GenIns colnames(X) <- 12 * as.numeric(colnames(X)) - 3 # The indicated liability increases from 1st example above,  # but not significantly. ClarkLDF(X, maxage=240) #>  Origin CurrentValue    Ldf UltimateValue FutureValue  StdError  CV% #>       1    3,901,463  1.189     4,638,605     737,142   277,588 37.7 #>       2    5,339,085  1.237     6,605,692   1,266,607   397,311 31.4 #>       3    4,909,315  1.301     6,386,651   1,477,336   442,507 30.0 #>       4    4,588,268  1.388     6,369,609   1,781,341   505,579 28.4 #>       5    3,873,311  1.514     5,865,118   1,991,807   550,324 27.6 #>       6    3,691,712  1.710     6,311,201   2,619,489   673,463 25.7 #>       7    3,483,130  2.047     7,128,319   3,645,189   866,256 23.8 #>       8    2,864,498  2.742     7,853,050   4,988,552 1,131,966 22.7 #>       9    1,363,294  4.810     6,556,934   5,193,640 1,389,410 26.8 #>      10      344,014 19.039     6,549,543   6,205,529 2,862,366 46.1 #>   Total   34,358,090           64,264,722  29,906,632 4,983,456 16.7 # When maxage is infinite, the phase shift has a more noticeable impact: # a 4-5% increase of the overall CV. x <- ClarkLDF(GenIns, maxage=Inf) y <- ClarkLDF(X, maxage=Inf) # Percent change in the bottom line CV: (tail(y$Table65$TotalCV, 1) - tail(x$Table65$TotalCV, 1)) / tail(x$Table65$TotalCV, 1) #> numeric(0)"},{"path":"http://mages.github.io/ChainLadder/reference/GenIns.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of claims data. — GenIns","title":"Run off triangle of claims data. — GenIns","text":"Run triangle accumulated general insurance claims   data. GenInsLong provides data 'long' format.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/GenIns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of claims data. — GenIns","text":"","code":"GenIns"},{"path":"http://mages.github.io/ChainLadder/reference/GenIns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of claims data. — GenIns","text":"matrix 10 accident years 10 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/GenIns.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of claims data. — GenIns","text":"TAYLOR, G.C. ASHE, F.R. (1983) Second Moments Estimates Outstanding Claims.  Journal Econometrics 23, 37-61.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/GenIns.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run off triangle of claims data. — GenIns","text":"See table 1 : Distribution-free Calculation   Standard Error Chain Ladder Reserve Estimates, Thomas Mack, 1993,   ASTIN Bulletin 23, 213 - 225","code":""},{"path":"http://mages.github.io/ChainLadder/reference/GenIns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of claims data. — GenIns","text":"","code":"GenIns #>       dev #> origin      1       2       3       4       5       6       7       8       9 #>     1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>     2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>     3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>     4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>     5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>     6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>     7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>     8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>     9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>     10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>       dev #> origin      10 #>     1  3901463 #>     2       NA #>     3       NA #>     4       NA #>     5       NA #>     6       NA #>     7       NA #>     8       NA #>     9       NA #>     10      NA plot(GenIns)   plot(GenIns, lattice=TRUE)    head(GenInsLong) #>   accyear devyear incurred claims #> 1       1       1          357848 #> 2       2       1          352118 #> 3       3       1          290507 #> 4       4       1          310608 #> 5       5       1          443160 #> 6       6       1          396132  ## Convert long format into triangle ## Triangles are usually stored as 'long' tables in data bases as.triangle(GenInsLong, origin=\"accyear\", dev=\"devyear\", \"incurred claims\") #>        devyear #> accyear      1       2       3       4       5       6       7       8       9 #>      1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>      2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>      3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>      4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>      5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>      6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>      7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>      8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>      9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>      10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>        devyear #> accyear      10 #>      1  3901463 #>      2       NA #>      3       NA #>      4       NA #>      5       NA #>      6       NA #>      7       NA #>      8       NA #>      9       NA #>      10      NA"},{"path":"http://mages.github.io/ChainLadder/reference/Join2Fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Two Fitted MultiChainLadder Models — Join2Fits","title":"Join Two Fitted MultiChainLadder Models — Join2Fits","text":"function created facilitate fitting multivariate functions specifying different models two different development periods, especially separate chain-ladder used later periods.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Join2Fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Two Fitted MultiChainLadder Models — Join2Fits","text":"","code":"Join2Fits(object1, object2)"},{"path":"http://mages.github.io/ChainLadder/reference/Join2Fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Two Fitted MultiChainLadder Models — Join2Fits","text":"object1 object class \"MultiChainLadder\" object2 object class \"MultiChainLadder\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Join2Fits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join Two Fitted MultiChainLadder Models — Join2Fits","text":"inputs must class  \"MultiChainLadder\" function depends model slot determine kind object created returned. objects \"MCL\", object class \"MCLFit\" created; one \"GMCL\" one \"MCL\", object class \"GMCLFit\" created, one \"GMCL\" assumed come first development periods; \"GMCL\", object class \"GMCLFit\" created.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Join2Fits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join Two Fitted MultiChainLadder Models — Join2Fits","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/JoinFitMse.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Model Fit and Mse Estimation — JoinFitMse","title":"Join Model Fit and Mse Estimation — JoinFitMse","text":"function combines first momoent estimation fitted regression models second moment estimation Mse method construct object class \"MultiChainLadder\", variety methods defined, summary plot.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/JoinFitMse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Model Fit and Mse Estimation — JoinFitMse","text":"","code":"JoinFitMse(models, mse.models)"},{"path":"http://mages.github.io/ChainLadder/reference/JoinFitMse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Model Fit and Mse Estimation — JoinFitMse","text":"models fitted regression models, either class \"MCLFit\" \"GMCLFit\". mse.models output call Mse, class \"MultiChainLadderMse\".","code":""},{"path":"http://mages.github.io/ChainLadder/reference/JoinFitMse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join Model Fit and Mse Estimation — JoinFitMse","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/M3IR5.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of claims data — M3IR5","title":"Run off triangle of claims data — M3IR5","text":"Run triangle simulated incremental claims data","code":""},{"path":"http://mages.github.io/ChainLadder/reference/M3IR5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of claims data — M3IR5","text":"","code":"data(M3IR5)"},{"path":"http://mages.github.io/ChainLadder/reference/M3IR5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of claims data — M3IR5","text":"matrix simulated incremental claims 14 accident years 14 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/M3IR5.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of claims data — M3IR5","text":"Appendix A7 \t B. Zehnwirth. Probabilistic Development Factor Models \t  Applications Loss Reserve Variability, Prediction \t  Intervals, Risk Based Capital. Casualty Actuarial \t    Science Forum. Spring 1994. Vol. 2.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/M3IR5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of claims data — M3IR5","text":"","code":"M3IR5 #>       dev #> origin      1      2      3      4      5      6      7      8      9     10 #>   1978 108651  97529  75879  69418  55542  62875  63697  72468  65114  62436 #>   1979  98706  95216  83025  72396 104914  94174  77103  70538  71747  77567 #>   1980 133106 109743  96365 130993 112860  87108  99698  92494  89224  82117 #>   1981 125731 141478 144336 124854 107034 122015 110514  93517  95885  97626 #>   1982 161765 174888 168704 156514 145495 138954 125480 106927 111179 118054 #>   1983 226364 203191 179136 159835 156670 153108 142187 160637 139511     NA #>   1984 228411 216837 242050 249422 205644 220996 169549 166858     NA     NA #>   1985 277868 262472 265375 227499 221660 247187 207918     NA     NA     NA #>   1986 302519 360015 343485 224336 220334 234427     NA     NA     NA     NA #>   1987 393525 388054 383425 326081 271278     NA     NA     NA     NA     NA #>   1988 450855 333667 398276 382277     NA     NA     NA     NA     NA     NA #>   1989 572576 568013 382277     NA     NA     NA     NA     NA     NA     NA #>   1990 576021 469724     NA     NA     NA     NA     NA     NA     NA     NA #>   1991 580068     NA     NA     NA     NA     NA     NA     NA     NA     NA #>       dev #> origin    11    12    13    14 #>   1978 57983 56551 48528 39023 #>   1979 68934 70467 43560    NA #>   1980 78190 78504    NA    NA #>   1981 83692    NA    NA    NA #>   1982    NA    NA    NA    NA #>   1983    NA    NA    NA    NA #>   1984    NA    NA    NA    NA #>   1985    NA    NA    NA    NA #>   1986    NA    NA    NA    NA #>   1987    NA    NA    NA    NA #>   1988    NA    NA    NA    NA #>   1989    NA    NA    NA    NA #>   1990    NA    NA    NA    NA #>   1991    NA    NA    NA    NA plot(M3IR5)  plot(incr2cum(M3IR5), lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/MCLpaid.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangles of accumulated paid and incurred claims data. — MCLpaid","title":"Run off triangles of accumulated paid and incurred claims data. — MCLpaid","text":"Run-triangles based fire portfolio","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MCLpaid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangles of accumulated paid and incurred claims data. — MCLpaid","text":"","code":"data(MCLpaid) data(MCLincurred)"},{"path":"http://mages.github.io/ChainLadder/reference/MCLpaid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangles of accumulated paid and incurred claims data. — MCLpaid","text":"matrix 7 origin years 7 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MCLpaid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangles of accumulated paid and incurred claims data. — MCLpaid","text":"Gerhard Quarg Thomas Mack. Munich Chain Ladder. Blatter DGVFM. 26,     Munich, 2004.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MCLpaid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangles of accumulated paid and incurred claims data. — MCLpaid","text":"","code":"MCLpaid #>       dev #> origin    1    2    3    4    5    6    7 #>      1  576 1804 1970 2024 2074 2102 2131 #>      2  866 1948 2162 2232 2284 2348   NA #>      3 1412 3758 4252 4416 4494   NA   NA #>      4 2286 5292 5724 5850   NA   NA   NA #>      5 1868 3778 4648   NA   NA   NA   NA #>      6 1442 4010   NA   NA   NA   NA   NA #>      7 2044   NA   NA   NA   NA   NA   NA MCLincurred #>       dev #> origin    1    2    3    4    5    6    7 #>      1  978 2104 2134 2144 2174 2182 2174 #>      2 1844 2552 2466 2480 2508 2454   NA #>      3 2904 4354 4698 4600 4644   NA   NA #>      4 3502 5958 6070 6142   NA   NA   NA #>      5 2812 4882 4852   NA   NA   NA   NA #>      6 2642 4406   NA   NA   NA   NA   NA #>      7 5022   NA   NA   NA   NA   NA   NA op=par(mfrow=c(2,1)) plot(MCLpaid) plot(MCLincurred)  par(op)"},{"path":"http://mages.github.io/ChainLadder/reference/MW2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Run-off claims triangle — MW2008","title":"Run-off claims triangle — MW2008","text":"Cumulative claims development triangle","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MW2008.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run-off claims triangle — MW2008","text":"matrix 9 accident years 9 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MW2008.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run-off claims triangle — MW2008","text":"Modelling claims development result solvency purposes. Michael Merz, Mario V. Wüthrich. Casualty Actuarial Society E-Forum, Fall 2008.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MW2008.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run-off claims triangle — MW2008","text":"","code":"MW2008 #>       dev #> origin       1       2       3       4       5       6       7       8       9 #>      1 2202584 3210449 3468122 3545070 3621627 3644636 3669012 3674511 3678633 #>      2 2350650 3553023 3783846 3840067 3865187 3878744 3898281 3902425      NA #>      3 2321885 3424190 3700876 3798198 3854755 3878993 3898825      NA      NA #>      4 2171487 3165274 3395841 3466453 3515703 3548422      NA      NA      NA #>      5 2140328 3157079 3399262 3500520 3585812      NA      NA      NA      NA #>      6 2290664 3338197 3550332 3641036      NA      NA      NA      NA      NA #>      7 2148216 3219775 3428335      NA      NA      NA      NA      NA      NA #>      8 2143728 3158581      NA      NA      NA      NA      NA      NA      NA #>      9 2144738      NA      NA      NA      NA      NA      NA      NA      NA plot(MW2008, lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/MW2014.html","id":null,"dir":"Reference","previous_headings":"","what":"Run-off claims triangle — MW2014","title":"Run-off claims triangle — MW2014","text":"Cumulative claims development triangle","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MW2014.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run-off claims triangle — MW2014","text":"matrix 17 accident years 17 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MW2014.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run-off claims triangle — MW2014","text":"Claims Run-Uncertainty: Full Picture. Michael Merz, Mario V. Wüthrich. Swiss Finance Institute Research Paper . 14-69. https://www.ssrn.com/abstract=2524352. 2014","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MW2014.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run-off claims triangle — MW2014","text":"","code":"MW2014 #>       dev #> origin     0     1     2     3     4     5     6     7     8     9    10    11 #>     1  13109 20355 21337 22043 22401 22658 22997 23158 23492 23664 23699 23904 #>     2  14457 22038 22627 23114 23238 23312 23440 23490 23964 23976 24048 24111 #>     3  16075 22672 23753 24052 24206 24757 24786 24807 24823 24888 24986 25401 #>     4  15682 23464 24465 25052 25529 25708 25752 25770 25835 26075 26082 26146 #>     5  16551 23706 24627 25573 26046 26115 26283 26481 26701 26718 26724 26728 #>     6  15439 23796 24866 25317 26139 26154 26175 26205 26764 26818 26836 26959 #>     7  14629 21645 22826 23599 24992 25434 25476 25549 25604 25709 25723    NA #>     8  17585 26288 27623 27939 28335 28638 28715 28759 29525 30302    NA    NA #>     9  17419 25941 27066 27761 28043 28477 28721 28878 28948    NA    NA    NA #>     10 16665 25370 26909 27611 27729 27861 29830 29844    NA    NA    NA    NA #>     11 15471 23745 25117 26378 26971 27396 27480    NA    NA    NA    NA    NA #>     12 15103 23393 26809 27691 28061 29183    NA    NA    NA    NA    NA    NA #>     13 14540 22642 23571 24127 24210    NA    NA    NA    NA    NA    NA    NA #>     14 14590 22336 23440 24029    NA    NA    NA    NA    NA    NA    NA    NA #>     15 13967 21515 22603    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     16 12930 20111    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>     17 12539    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>       dev #> origin    12    13    14    15    16 #>     1  23960 23992 23994 24001 24002 #>     2  24252 24538 24540 24550    NA #>     3  25681 25705 25732    NA    NA #>     4  26150 26167    NA    NA    NA #>     5  26735    NA    NA    NA    NA #>     6     NA    NA    NA    NA    NA #>     7     NA    NA    NA    NA    NA #>     8     NA    NA    NA    NA    NA #>     9     NA    NA    NA    NA    NA #>     10    NA    NA    NA    NA    NA #>     11    NA    NA    NA    NA    NA #>     12    NA    NA    NA    NA    NA #>     13    NA    NA    NA    NA    NA #>     14    NA    NA    NA    NA    NA #>     15    NA    NA    NA    NA    NA #>     16    NA    NA    NA    NA    NA #>     17    NA    NA    NA    NA    NA plot(MW2014, lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Mack Chain-Ladder Model — MackChainLadder","title":"Mack Chain-Ladder Model — MackChainLadder","text":"Mack chain-ladder model forecasts future claims developments   based historical cumulative claims development triangle estimates   standard error around .","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mack Chain-Ladder Model — MackChainLadder","text":"","code":"MackChainLadder(Triangle, weights = 1, alpha=1, est.sigma=\"log-linear\", tail=FALSE, tail.se=NULL, tail.sigma=NULL, mse.method=\"Mack\")"},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mack Chain-Ladder Model — MackChainLadder","text":"Triangle cumulative claims triangle.  Assume columns development     period, use transpose otherwise.     (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g accident years). weights weights. Default: 1, sets weights     triangle entries 1. Otherwise specify weights matrix     dimension Triangle weight entries [0; 1].     Hence, entry set 0 NA eliminates age--age factor     inclusion model. See also 'Details' alpha 'weighting' parameters.     Default: 1 development periods; alpha=1 gives historical     chain-ladder age--age factors, alpha=0 gives straight average     observed individual development factors alpha=2 result     ordinary regression \\(C_{,k+1}\\) \\(C_{,k}\\)     intercept 0, see also 'Details' , chainladder Mack's 1999 paper est.sigma defines estimate \\(sigma_{n-1}\\),     variability individual age--age factors development time     \\(n-1\\).     Default \"log-linear\" log-linear regression, \"Mack\"     Mack's approximation 1999 paper. Alternatively user can     provide numeric value. log-linear model appears     inappropriate (p-value > 0.05) 'Mack' method used     instead warning message printed.     Similarly, Triangle small log-linear regression     attempted vector one non-NA average link ratio,     'Mack' method used instead warning message printed. tail can logical numeric value.     tail=FALSE tail factor applied, tail=TRUE     tail factor estimated via linear extrapolation     \\(log(chain-ladder factors - 1)\\), tail numeric     value value used instead. tail.se defines standard error tail factor estimated. needed     tail factor > 1 provided. Default NULL.     tail.se NULL, tail.se estimated via     \"log-linear\" regression, tail.se numeric     value value used instead. tail.sigma defines estimate individual tail variability. needed       tail factor > 1 provided.     Default NULL. tail.sigma NULL,     tail.sigma     estimated via \"log-linear\" regression, tail.sigma numeric     value value used instead mse.method method used recursive estimate parameter risk component     mean square error.     Value \"Mack\" (default) coincides Mack's formula;     \"Independence\" includes additional cross-product term     Murphy BBMW.     Refer References .","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mack Chain-Ladder Model — MackChainLadder","text":"Following Mack's 1999 paper let \\(C_{ik}\\) denote cumulative loss   amounts origin period (e.g. accident year)   \\(=1,\\ldots,m\\), losses known development period   (e.g. development year) \\(k \\le n+1-\\).   order forecast amounts \\(C_{ik}\\)   \\(k > n+1-\\) Mack chain-ladder-model assumes:   $$\\mbox{CL1: }  E[ F_{ik}| C_{i1},C_{i2},\\ldots,C_{ik} ] = f_k     \\mbox{ } F_{ik}=\\frac{C_{,k+1}}{C_{ik}}   $$ $$\\mbox{CL2: }  Var( \\frac{C_{,k+1}}{C_{ik}} | C_{i1},C_{i2},     \\ldots,C_{ik} ) = \\frac{\\sigma_k^2}{w_{ik} C^\\alpha_{ik}}   $$   $$\\mbox{CL3: }  \\{ C_{i1},\\ldots,C_{}\\}, \\{     C_{j1},\\ldots,C_{jn}\\},\\mbox{ independent origin period }     \\neq j   $$   \\(w_{ik} \\[0;1]\\), \\(\\alpha \\\\{0,1,2\\}\\).   assumptions hold, Mack chain-ladder gives   unbiased estimator IBNR (Incurred Reported) claims. \\(w_{ik} \\code{weights} .\\) Mack chain-ladder model can regarded special form   weighted linear regression   origin development period:   lm(y ~ x  + 0, weights=weights/x^(2-alpha)),   y vector claims development period   \\(k+1\\) x  vector claims development period   \\(k\\). necessary, actually applying model, check main assumptions behind model (.e. Calendar Year Effect Correlation subsequent Accident Years, see dfCorTest, cyEffTest) verified.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mack Chain-Ladder Model — MackChainLadder","text":"MackChainLadder returns list following elements call matched call Triangle input triangle cumulative claims FullTriangle forecasted full triangle Models linear regression models development period f chain-ladder age--age factors f.se standard errors chain-ladder age--age factors f     (assumption CL1) F.se standard errors true chain-ladder age--age factors     \\(F_{ik}\\) (square root variance assumption CL2) sigma sigma parameter CL2 Mack.ProcessRisk variability projection future losses     explained variability link ratio estimators (unexplained variation) Mack.ParameterRisk variability projection future     losses explained variability link-ratio estimators     alone (explained variation) Mack.S.E total variability projection future losses     chain-ladder method; square root mean square error     chain-ladder estimate: \\(\\mbox{Mack.S.E.}^2 = \\mbox{Mack.ProcessRisk}^2 +     \\mbox{Mack.ParameterRisk}^2\\) Total.Mack.S.E total variability projected loss     origin years combined Total.ProcessRisk vector process risk estimate total     projected loss origin years combined development period Total.ParameterRisk vector parameter risk estimate total     projected loss origin years combined development period weights weights used alpha alphas used tail tail factor used. tail set TRUE output     include linear model used estimate tail factor","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mack Chain-Ladder Model — MackChainLadder","text":"Thomas Mack. Distribution-free calculation standard error chain ladder reserve estimates. Astin Bulletin. Vol. 23. 2. 1993. pp.213:225 Thomas Mack. standard error chain ladder reserve estimates: Recursive calculation inclusion tail factor. Astin Bulletin. Vol. 29. 2. 1999. pp.361:366 Murphy, Daniel M. Unbiased Loss Development Factors. Proceedings Casualty Actuarial Society Casualty Actuarial Society - Arlington, Virginia 1994: LXXXI 154-222 Buchwalder, Bühlmann, Merz, Wüthrich.   Mean Square Error Prediction Chain Ladder Reserving Method   (Mack Murphy Revisited).   Astin Bulletin Vol. 36. 2006. pp.521:542","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mack Chain-Ladder Model — MackChainLadder","text":"Markus Gesmann markus.gesmann@gmail.com","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mack Chain-Ladder Model — MackChainLadder","text":"Additional references reading: England, PD Verrall, RJ. Stochastic Claims Reserving   General Insurance (discussion), British Actuarial Journal   8, III. 2002 Barnett Zehnwirth. Best estimates reserves. Proceedings     CAS, LXXXVI (167), November 2000.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MackChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mack Chain-Ladder Model — MackChainLadder","text":"","code":"## See the Taylor/Ashe example in Mack's 1993 paper GenIns #>       dev #> origin      1       2       3       4       5       6       7       8       9 #>     1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>     2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>     3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>     4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>     5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>     6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>     7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>     8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>     9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>     10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>       dev #> origin      10 #>     1  3901463 #>     2       NA #>     3       NA #>     4       NA #>     5       NA #>     6       NA #>     7       NA #>     8       NA #>     9       NA #>     10      NA plot(GenIns)  plot(GenIns, lattice=TRUE)  GNI <- MackChainLadder(GenIns, est.sigma=\"Mack\") GNI$f #>  [1] 3.490607 1.747333 1.457413 1.173852 1.103824 1.086269 1.053874 1.076555 #>  [9] 1.017725 1.000000 GNI$sigma^2 #> [1] 160280.3275  37736.8550  41965.2130  15182.9027  13731.3239   8185.7716 #> [7]    446.6166   1147.3660    446.6166 GNI # compare to table 2 and 3 in Mack's 1993 paper #> MackChainLadder(Triangle = GenIns, est.sigma = \"Mack\") #>  #>       Latest Dev.To.Date  Ultimate      IBNR  Mack.S.E CV(IBNR) #> 1  3,901,463      1.0000 3,901,463         0         0      NaN #> 2  5,339,085      0.9826 5,433,719    94,634    75,535    0.798 #> 3  4,909,315      0.9127 5,378,826   469,511   121,699    0.259 #> 4  4,588,268      0.8661 5,297,906   709,638   133,549    0.188 #> 5  3,873,311      0.7973 4,858,200   984,889   261,406    0.265 #> 6  3,691,712      0.7223 5,111,171 1,419,459   411,010    0.290 #> 7  3,483,130      0.6153 5,660,771 2,177,641   558,317    0.256 #> 8  2,864,498      0.4222 6,784,799 3,920,301   875,328    0.223 #> 9  1,363,294      0.2416 5,642,266 4,278,972   971,258    0.227 #> 10   344,014      0.0692 4,969,825 4,625,811 1,363,155    0.295 #>  #>                  Totals #> Latest:   34,358,090.00 #> Dev:               0.65 #> Ultimate: 53,038,945.61 #> IBNR:     18,680,855.61 #> Mack.S.E   2,447,094.86 #> CV(IBNR):          0.13 plot(GNI)  plot(GNI, lattice=TRUE)   ## Different weights ## Using alpha=0 will use straight average age-to-age factors  MackChainLadder(GenIns, alpha=0)$f #>  [1] 3.566143 1.745557 1.451961 1.180984 1.111247 1.084818 1.052739 1.074753 #>  [9] 1.017725 1.000000 # You get the same result via: apply(GenIns[,-1]/GenIns[,-10],2, mean, na.rm=TRUE) #>        2        3        4        5        6        7        8        9  #> 3.566143 1.745557 1.451961 1.180984 1.111247 1.084818 1.052739 1.074753  #>       10  #> 1.017725   ## Only use the last 5 diagonals, i.e. the last 5 calendar years calPeriods <- (row(GenIns) + col(GenIns) - 1) (weights <- ifelse(calPeriods <= 5, 0, ifelse(calPeriods > 10, NA, 1))) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    1    1    1    1     1 #>  [2,]    0    0    0    0    1    1    1    1    1    NA #>  [3,]    0    0    0    1    1    1    1    1   NA    NA #>  [4,]    0    0    1    1    1    1    1   NA   NA    NA #>  [5,]    0    1    1    1    1    1   NA   NA   NA    NA #>  [6,]    1    1    1    1    1   NA   NA   NA   NA    NA #>  [7,]    1    1    1    1   NA   NA   NA   NA   NA    NA #>  [8,]    1    1    1   NA   NA   NA   NA   NA   NA    NA #>  [9,]    1    1   NA   NA   NA   NA   NA   NA   NA    NA #> [10,]    1   NA   NA   NA   NA   NA   NA   NA   NA    NA MackChainLadder(GenIns, weights=weights, est.sigma = \"Mack\") #> MackChainLadder(Triangle = GenIns, weights = weights, est.sigma = \"Mack\") #>  #>       Latest Dev.To.Date  Ultimate      IBNR  Mack.S.E CV(IBNR) #> 1  3,901,463      1.0000 3,901,463         0         0      NaN #> 2  5,339,085      0.9826 5,433,719    94,634    75,535    0.798 #> 3  4,909,315      0.9127 5,378,826   469,511   121,699    0.259 #> 4  4,588,268      0.8661 5,297,906   709,638   133,549    0.188 #> 5  3,873,311      0.7973 4,858,200   984,889   261,406    0.265 #> 6  3,691,712      0.7349 5,023,131 1,331,419   341,719    0.257 #> 7  3,483,130      0.6263 5,561,629 2,078,499   547,444    0.263 #> 8  2,864,498      0.4258 6,726,585 3,862,087   975,424    0.253 #> 9  1,363,294      0.2299 5,929,927 4,566,633 1,065,926    0.233 #> 10   344,014      0.0669 5,142,278 4,798,264 1,247,449    0.260 #>  #>                  Totals #> Latest:   34,358,090.00 #> Dev:               0.65 #> Ultimate: 53,253,663.06 #> IBNR:     18,895,573.06 #> Mack.S.E   2,550,023.96 #> CV(IBNR):          0.13  ## Tail ## See the example in Mack's 1999 paper Mortgage #>       dev #> origin     1      2       3       4       5       6       7       8       9 #>      1 58046 127970  476599 1027692 1360489 1647310 1819179 1906852 1950105 #>      2 24492 141767  984288 2142656 2961978 3683940 4048898 4115760      NA #>      3 32848 274682 1522637 3203427 4445927 5158781 5342585      NA      NA #>      4 21439 529828 2900301 4999019 6460112 6853904      NA      NA      NA #>      5 40397 763394 2920745 4989572 5648563      NA      NA      NA      NA #>      6 90748 951994 4210640 5866482      NA      NA      NA      NA      NA #>      7 62096 868480 1954797      NA      NA      NA      NA      NA      NA #>      8 24983 284441      NA      NA      NA      NA      NA      NA      NA #>      9 13121     NA      NA      NA      NA      NA      NA      NA      NA m <- MackChainLadder(Mortgage) round(summary(m)$Totals[\"CV(IBNR)\",], 2) ## 26% in Table 6 of paper #> [1] 0.26 plot(Mortgage)  # Specifying the tail and its associated uncertainty parameters MRT <- MackChainLadder(Mortgage, tail=1.05, tail.sigma=71, tail.se=0.02, est.sigma=\"Mack\") MRT #> MackChainLadder(Triangle = Mortgage, est.sigma = \"Mack\", tail = 1.05,  #>     tail.se = 0.02, tail.sigma = 71) #>  #>      Latest Dev.To.Date   Ultimate      IBNR  Mack.S.E CV(IBNR) #> 1 1,950,105     0.95238  2,047,610    97,505   106,544    1.093 #> 2 4,115,760     0.93126  4,419,573   303,813   179,977    0.592 #> 3 5,342,585     0.90736  5,888,041   545,456   249,708    0.458 #> 4 6,853,904     0.84904  8,072,571 1,218,667   417,857    0.343 #> 5 5,648,563     0.74548  7,577,086 1,928,523   670,156    0.347 #> 6 5,866,482     0.58427 10,040,732 4,174,250 1,127,984    0.270 #> 7 1,954,797     0.34209  5,714,195 3,759,398 1,377,496    0.366 #> 8   284,441     0.08360  3,402,595 3,118,154 1,901,740    0.610 #> 9    13,121     0.00753  1,742,908 1,729,787 2,293,437    1.326 #>  #>                  Totals #> Latest:   32,029,758.00 #> Dev:               0.65 #> Ultimate: 48,905,312.55 #> IBNR:     16,875,554.55 #> Mack.S.E   4,053,667.67 #> CV(IBNR):          0.24 plot(MRT, lattice=TRUE)  # Specify just the tail and the uncertainty parameters will be estimated MRT <- MackChainLadder(Mortgage, tail=1.05) MRT$f.se[9] # close to the 0.02 specified above #> tail.se.tail.factor  #>          0.02093287  MRT$sigma[9] # less than the 71 specified above #> tail.sigma  #>   55.45125  # Note that the overall CV dropped slightly round(summary(MRT)$Totals[\"CV(IBNR)\",], 2) ## 24% #> [1] 0.24 # tail parameter uncertainty equal to expected value  MRT <- MackChainLadder(Mortgage, tail=1.05, tail.se = .05) round(summary(MRT)$Totals[\"CV(IBNR)\",], 2) ## 27% #> [1] 0.27  ## Parameter-risk (only) estimate of the total reserve = 3142387 tail(MRT$Total.ParameterRisk, 1) # located in last (ultimate) element #> [1] 3142387 #  Parameter-risk (only) CV is about 19% tail(MRT$Total.ParameterRisk, 1) / summary(MRT)$Totals[\"IBNR\", ] #> [1] 0.1862094  ## Three terms in the parameter risk estimate ## First, the default (Mack) without the tail m <- MackChainLadder(RAA, mse.method = \"Mack\") summary(m)$Totals[\"Mack S.E.\",] #> [1] 26880.74 ## Then, with the third term m <- MackChainLadder(RAA, mse.method = \"Independence\") summary(m)$Totals[\"Mack S.E.\",] ## Not significantly greater #> [1] 26895.69  ## One year claims development results M <- MackChainLadder(MW2014, est.sigma=\"Mack\") CDR(M) #>               IBNR   CDR(1)S.E.    Mack.S.E. #> 1         0.000000    0.0000000    0.0000000 #> 2         1.022874    0.4083149    0.4083149 #> 3        10.085643    2.5393857    2.5652899 #> 4        21.187574   16.7232632   16.8984949 #> 5       117.662565  156.4022713  157.2756452 #> 6       223.279748  137.6522771  207.1650862 #> 7       361.808180  171.1812092  261.9266093 #> 8       469.408830   70.3161155  292.2622285 #> 9       653.504225  271.6352221  390.5874717 #> 10     1008.763182  310.1268449  502.0606072 #> 11     1011.859648  103.3834357  486.0911099 #> 12     1406.702133  632.6388191  806.9028971 #> 13     1492.903495  315.0489135  793.9381916 #> 14     1917.636398  406.1424672  891.6613403 #> 15     2458.152208  285.2076540  916.4940218 #> 16     3384.341045  668.2337878 1106.1262716 #> 17     9596.552341  733.2222786 1295.6909824 #> Total 24134.870088 1842.8507073 3233.6807352  ## For more examples see: if (FALSE) { # \\dontrun{  demo(MackChainLadder) } # }"},{"path":"http://mages.github.io/ChainLadder/reference/MedMal.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangles of accumulated claim data — MedMal","title":"Run off triangles of accumulated claim data — MedMal","text":"Run-triangles Medical Malpractice Data insurance.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MedMal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangles of accumulated claim data — MedMal","text":"","code":"data(MedMal)"},{"path":"http://mages.github.io/ChainLadder/reference/MedMal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangles of accumulated claim data — MedMal","text":"U.S. medical malpractice insurance experience period 1969 1976. Reported Claims, Paid Claims, Case Outstanding    Open Claims (.e. number outstanding claims) respectively","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MedMal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangles of accumulated claim data — MedMal","text":"Berquist, J.R. Sherman, R.E., Loss Reserve Adequacy Testing: Comprehensive,   Systematic Approach, Proceedings Casualty Actuarial Society, LXIV, 1977, pp.123-184.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MedMal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangles of accumulated claim data — MedMal","text":"","code":"data(MedMal) names(MedMal) #> [1] \"MedMalReported\"    \"MedMalPaid\"        \"MedMalOutstanding\" #> [4] \"MedMalOpen\"        MedMal$MedMalReported #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,]  2897000  5160000 10714000 15228000 16611000 20899000 22892000 23506000 #> [2,]  4828000 10707000 16907000 22840000 26211000 31970000 32216000       NA #> [3,]  5455000 11941000 20733000 30928000 42395000 48377000       NA       NA #> [4,]  8732000 18633000 32143000 57196000 61163000       NA       NA       NA #> [5,] 11228000 19967000 50143000 73733000       NA       NA       NA       NA #> [6,]  8706000 33459000 63477000       NA       NA       NA       NA       NA #> [7,] 12928000 48904000       NA       NA       NA       NA       NA       NA #> [8,] 15791000       NA       NA       NA       NA       NA       NA       NA MedMal$MedMalPaid #>        [,1]    [,2]    [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 125000  406000 1443000  2986000  4467000  8179000 12638000 15815000 #> [2,]  43000  529000 2016000  3641000  7523000 14295000 18983000       NA #> [3,] 295000 1147000 2479000  5071000 11399000 17707000       NA       NA #> [4,]  50000  786000 3810000  9771000 18518000       NA       NA       NA #> [5,] 213000  833000 3599000 11292000       NA       NA       NA       NA #> [6,] 172000 1587000 6267000       NA       NA       NA       NA       NA #> [7,] 210000 1565000      NA       NA       NA       NA       NA       NA #> [8,] 209000      NA      NA       NA       NA       NA       NA       NA MedMal$MedMalOutstanding #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]    [,8] #> [1,]  2772000  4754000  9271000 12242000 12144000 12720000 10254000 7691000 #> [2,]  4785000 10178000 14891000 19199000 18688000 17675000 13233000      NA #> [3,]  5160000 10794000 18254000 25857000 30996000 30670000       NA      NA #> [4,]  8682000 17847000 28333000 47425000 42645000       NA       NA      NA #> [5,] 11015000 19134000 46544000 62441000       NA       NA       NA      NA #> [6,]  8534000 31872000 57210000       NA       NA       NA       NA      NA #> [7,] 12718000 47339000       NA       NA       NA       NA       NA      NA #> [8,] 15582000       NA       NA       NA       NA       NA       NA      NA MedMal$MedMalOpen #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  749  840 1001 1206 1034  765  533  359 #> [2,]  660  957 1149 1350 1095  755  539   NA #> [3,]  878 1329 1720 1799 1428 1056   NA   NA #> [4,] 1043 1561 1828 1894 1522   NA   NA   NA #> [5,] 1088 1388 1540 1877   NA   NA   NA   NA #> [6,] 1033 1418 1663   NA   NA   NA   NA   NA #> [7,] 1138 1472   NA   NA   NA   NA   NA   NA #> [8,] 1196   NA   NA   NA   NA   NA   NA   NA"},{"path":"http://mages.github.io/ChainLadder/reference/Mortgage.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of accumulated claims data — Mortgage","title":"Run off triangle of accumulated claims data — Mortgage","text":"Development triangle mortgage guarantee   business","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mortgage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of accumulated claims data — Mortgage","text":"","code":"data(Mortgage)"},{"path":"http://mages.github.io/ChainLadder/reference/Mortgage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of accumulated claims data — Mortgage","text":"matrix 9 accident years 9 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mortgage.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of accumulated claims data — Mortgage","text":"Competition Presented London Market Actuaries Dinner,   D.E.. Sanders, 1990","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mortgage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run off triangle of accumulated claims data — Mortgage","text":"See table 4 : \t\tDistribution-free Calculation   Standard Error Chain Ladder Reserve Estimates, Thomas Mack, 1993,   ASTIN Bulletin 23, 213 - 225","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mortgage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of accumulated claims data — Mortgage","text":"","code":"Mortgage #>       dev #> origin     1      2       3       4       5       6       7       8       9 #>      1 58046 127970  476599 1027692 1360489 1647310 1819179 1906852 1950105 #>      2 24492 141767  984288 2142656 2961978 3683940 4048898 4115760      NA #>      3 32848 274682 1522637 3203427 4445927 5158781 5342585      NA      NA #>      4 21439 529828 2900301 4999019 6460112 6853904      NA      NA      NA #>      5 40397 763394 2920745 4989572 5648563      NA      NA      NA      NA #>      6 90748 951994 4210640 5866482      NA      NA      NA      NA      NA #>      7 62096 868480 1954797      NA      NA      NA      NA      NA      NA #>      8 24983 284441      NA      NA      NA      NA      NA      NA      NA #>      9 13121     NA      NA      NA      NA      NA      NA      NA      NA Mortgage #>       dev #> origin     1      2       3       4       5       6       7       8       9 #>      1 58046 127970  476599 1027692 1360489 1647310 1819179 1906852 1950105 #>      2 24492 141767  984288 2142656 2961978 3683940 4048898 4115760      NA #>      3 32848 274682 1522637 3203427 4445927 5158781 5342585      NA      NA #>      4 21439 529828 2900301 4999019 6460112 6853904      NA      NA      NA #>      5 40397 763394 2920745 4989572 5648563      NA      NA      NA      NA #>      6 90748 951994 4210640 5866482      NA      NA      NA      NA      NA #>      7 62096 868480 1954797      NA      NA      NA      NA      NA      NA #>      8 24983 284441      NA      NA      NA      NA      NA      NA      NA #>      9 13121     NA      NA      NA      NA      NA      NA      NA      NA plot(Mortgage)  plot(Mortgage, lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Generic Function Mse — Mse-methods","title":"Methods for Generic Function Mse — Mse-methods","text":"Mse generic function calculate mean square error estimations chain-ladder framework.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Generic Function Mse — Mse-methods","text":"","code":"Mse(ModelFit, FullTriangles, ...)  # S4 method for class 'GMCLFit,triangles' Mse(ModelFit, FullTriangles, ...) # S4 method for class 'MCLFit,triangles' Mse(ModelFit, FullTriangles, mse.method=\"Mack\", ...)"},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Generic Function Mse — Mse-methods","text":"ModelFit object class \"GMCLFit\" \"MCLFit\". FullTriangles object class \"triangles\". output call predict. mse.method Character strings specify MSE estimation method. works \"MCLFit\". Use \"Mack\" generazliation Mack (1993) approach, \"Independence\" conditional resampling approach Merz Wuthrich (2008). ... Currently used.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for Generic Function Mse — Mse-methods","text":"functions calculate conditional mean square errors using recursive formulas Zhang (2010), generalization Mack (1993, 1999) formulas. GMCL model, conditional  mean square error single accident years aggregated accident years calcualted : $$\\hat{mse}(\\hat{Y}_{,k+1}|D)=\\hat{B}_k \\hat{mse}(\\hat{Y}_{,k}|D) \\hat{B}_k + (\\hat{Y}_{,k}' \\otimes ) \\hat{\\Sigma}_{B_k} (\\hat{Y}_{,k} \\otimes ) +  \\hat{\\Sigma}_{\\epsilon_{i_k}}.$$ $$\\hat{mse}(\\sum^I_{=a_k}\\hat{Y}_{,k+1}|D)=\\hat{B}_k \\hat{mse}(\\sum^I_{=a_k+1}\\hat{Y}_{,k}|D) \\hat{B}_k + (\\sum^I_{=a_k}\\hat{Y}_{,k}' \\otimes ) \\hat{\\Sigma}_{B_k} (\\sum^I_{=a_k}\\hat{Y}_{,k} \\otimes ) +  \\sum^I_{=a_k}\\hat{\\Sigma}_{\\epsilon_{i_k}} .$$ MCL model, conditional mean square error Merz Wüthrich (2008) also available, can shown equivalent following: $$\\hat{mse}(\\hat{Y}_{,k+1}|D)=(\\hat{\\beta}_k \\hat{\\beta}_k') \\odot \\hat{mse}(\\hat{Y}_{,k}|D)  + \\hat{\\Sigma}_{\\beta_k} \\odot (\\hat{Y}_{,k} \\hat{Y}_{,k}') +  \\hat{\\Sigma}_{\\epsilon_{i_k}} +\\hat{\\Sigma}_{\\beta_k} \\odot \\hat{mse}^E(\\hat{Y}_{,k}|D) .$$ $$\\hat{mse}(\\sum^I_{=a_k}\\hat{Y}_{,k+1}|D)=(\\hat{\\beta}_k \\hat{\\beta}_k') \\odot \\sum^I_{=a_k+1}\\hat{mse}(\\hat{Y}_{,k}|D)  + \\hat{\\Sigma}_{\\beta_k} \\odot (\\sum^I_{=a_k}\\hat{Y}_{,k} \\sum^I_{=a_k}\\hat{Y}_{,k}') +  \\sum^I_{=a_k}\\hat{\\Sigma}_{\\epsilon_{i_k}}  +\\hat{\\Sigma}_{\\beta_k} \\odot \\sum^I_{=a_k}\\hat{mse}^E(\\hat{Y}_{,k}|D) .$$ Mack approach MCL model, cross-product term \\(\\hat{\\Sigma}_{\\beta_k} \\odot \\hat{mse}^E(\\hat{Y}_{,k}|D) \\)two formulas drop .","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for Generic Function Mse — Mse-methods","text":"Mse  returns object class \"MultiChainLadderMse\"  following elements: mse.ay condtional mse accdient year mse.ay.est conditional estimation mse accdient year mse.ay.proc conditional process mse accdient year mse.total condtional mse aggregated accdient years mse.total.est conditional estimation mse aggregated accdient years mse.total.proc conditional process mse aggregated accdient years FullTriangles completed triangles","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for Generic Function Mse — Mse-methods","text":"Zhang Y (2010). general multivariate chain ladder model.Insurance: Mathematics Economics, 46, pp. 588-599. Zhang Y (2010). Prediction error general multivariate chain ladder model.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Mse-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for Generic Function Mse — Mse-methods","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class includes first second moment estimation result using multivariate reserving methods chain-ladder. Several primitive methods statistical methods also created facilitate analysis.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"MultiChainLadder\", ...), also result calls MultiChainLadder JoinFitMse.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"model: Object class \"character\". Either \"MCL\" \"GMCL\". Triangles: Object class \"triangles\". Input triangles. models: Object class \"list\". Fitted regression models using systemfit. coefficients: Object class \"list\". Estimated regression coefficients. coefCov: Object class \"list\". Estimated variance-covariance matrix coefficients. residCov: Object class \"list\". Estimated residual covariance matrix. fit.method: Object class \"character\". values \"SUR\" \"OLS\". delta: Object class \"numeric\". Parameter weights. int: Object class \"NullNum\". Indicator periods intercepts. mse.ay: Object class \"matrix\". Conditional mse accident year. mse.ay.est: Object class \"matrix\". Conditional estimation mse accident year. mse.ay.proc: Object class \"matrix\". Conditional process mse accident year. mse.total: Object class \"matrix\". Conditional mse aggregated accident years. mse.total.est: Object class \"matrix\". Conditional estimation mse aggregated accident years. mse.total.proc: Object class \"matrix\". Conditional process mse aggregated accident years. FullTriangles: Object class \"triangles\". Completed triangles. restrict.regMat: Object class \"NullList\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ","text":"Class \"MultiChainLadderFit\", directly. Class \"MultiChainLadderMse\", directly.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"$ signature(x = \"MultiChainLadder\"): Method primitive function \"$\". extracts slot x specified slot name, just list. [[ signature(x = \"MultiChainLadder\", = \"numeric\", j = \"missing\"):  Method primitive function \"[[\". extracts -th slot \"MultiChainLadder\" object, just list. vector. [[ signature(x = \"MultiChainLadder\", = \"character\", j = \"missing\"): Method primitive function \"[[\". extracts slots \"MultiChainLadder\" object names , just list. vector. coef signature(object = \"MultiChainLadder\"): Method function coef,  extract estimated development matrix. output list. fitted signature(object = \"MultiChainLadder\"):  Method function fitted,  calculate fitted values original triangles. Note return value list fitted valued based original scale, model scale first divided \\(Y_{,k}^{\\delta/2}\\). names signature(x = \"MultiChainLadder\"): Method function names, returns slot names \"MultiChainLadder\" object. plot signature(x = \"MultiChainLadder\", y = \"missing\"): See plot,MultiChainLadder,missing-method. residCov signature(object = \"MultiChainLadder\"): S4 generic function method extract residual covariance \"MultiChainLadder\" object. residCor signature(object = \"MultiChainLadder\"): S4 generic function method extract residual correlation \"MultiChainLadder\" object. residuals signature(object = \"MultiChainLadder\"): Method function residuals, extract residuals  system regression equations. residuals based model scale, equivalent original scale \\(\\delta\\) set 0. One use rstandard instead, independent scale. resid signature(object = \"MultiChainLadder\"): residuals. rstandard signature(model = \"MultiChainLadder\"): S4 generic function method extract standardized residuals \"MultiChainLadder\" object. show signature(object = \"MultiChainLadder\"): Method show. summary signature(object = \"MultiChainLadder\"): See summary,MultiChainLadder-method. vcov signature(object = \"MultiChainLadder\"): Method function vcov, extract variance-covariance matrix \"MultiChainLadder\" object. Note result list Bcov, variance-covariance matrix vectorized \\(B\\).","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"# example for class \"MultiChainLadder\" data(liab) fit.liab <-  MultiChainLadder(Triangles = liab) fit.liab #> $`Summary Statistics for Triangle 1` #>           Latest Dev.To.Date   Ultimate      IBNR     S.E     CV #> 1        549,589      1.0000    549,589         0       0 0.0000 #> 2        562,795      0.9966    564,740     1,945   1,743 0.8961 #> 3        602,710      0.9913    608,013     5,303   6,720 1.2673 #> 4        784,632      0.9868    795,128    10,496   8,154 0.7769 #> 5        768,373      0.9805    783,649    15,276  10,497 0.6871 #> 6        811,100      0.9688    837,214    26,114  16,269 0.6230 #> 7        896,728      0.9544    939,595    42,867  19,154 0.4468 #> 8      1,022,241      0.9301  1,099,087    76,846  22,726 0.2957 #> 9      1,019,303      0.8818  1,155,890   136,587  29,055 0.2127 #> 10     1,141,750      0.7970  1,432,561   290,811  36,849 0.1267 #> 11     1,174,196      0.6761  1,736,765   562,569  57,024 0.1014 #> 12     1,032,684      0.4999  2,065,835 1,033,151  88,941 0.0861 #> 13       772,971      0.2907  2,658,834 1,885,863 192,733 0.1022 #> 14       204,325      0.0901  2,268,006 2,063,681 282,477 0.1369 #> Total 11,343,397      0.6484 17,494,907 6,151,510 419,293 0.0682 #>  #> $`Summary Statistics for Triangle 2` #>          Latest Dev.To.Date   Ultimate      IBNR     S.E      CV #> 1       391,428       1.000    391,428         0       0  0.0000 #> 2       483,974       1.000    483,839      -135     604 -4.4846 #> 3       540,742       1.001    540,020      -722   1,324 -1.8323 #> 4       485,016       0.998    486,242     1,226   2,868  2.3394 #> 5       507,752       0.998    508,744       992   3,158  3.1844 #> 6       549,693       0.994    552,877     3,184   5,388  1.6923 #> 7       635,452       0.994    639,272     3,820   6,187  1.6193 #> 8       648,365       0.985    658,591    10,226   7,454  0.7289 #> 9       663,152       0.968    684,957    21,805   9,097  0.4172 #> 10      790,901       0.935    846,012    55,111  16,173  0.2935 #> 11      844,159       0.876    963,052   118,893  26,734  0.2249 #> 12      915,109       0.783  1,169,300   254,191  36,722  0.1445 #> 13      909,066       0.617  1,473,826   564,760  53,370  0.0945 #> 14      394,997       0.278  1,423,182 1,028,185 126,538  0.1231 #> Total 8,759,806       0.809 10,821,341 2,061,535 162,464  0.0788 #>  #> $`Summary Statistics for Triangle 1+2` #>           Latest Dev.To.Date   Ultimate      IBNR     S.E     CV #> 1        941,017       1.000    941,017         0       0 0.0000 #> 2      1,046,769       0.998  1,048,579     1,810   1,851 1.0221 #> 3      1,143,452       0.996  1,148,032     4,580   7,859 1.7158 #> 4      1,269,648       0.991  1,281,370    11,722   9,545 0.8143 #> 5      1,276,125       0.987  1,292,393    16,268  12,133 0.7458 #> 6      1,360,793       0.979  1,390,091    29,298  18,913 0.6455 #> 7      1,532,180       0.970  1,578,868    46,688  22,448 0.4808 #> 8      1,670,606       0.951  1,757,679    87,073  25,913 0.2976 #> 9      1,682,455       0.914  1,840,846   158,391  33,294 0.2102 #> 10     1,932,651       0.848  2,278,572   345,921  45,253 0.1308 #> 11     2,018,355       0.748  2,699,816   681,461  72,050 0.1057 #> 12     1,947,793       0.602  3,235,135 1,287,342 112,187 0.0871 #> 13     1,682,037       0.407  4,132,660 2,450,623 222,927 0.0910 #> 14       599,322       0.162  3,691,189 3,091,867 342,127 0.1107 #> Total 20,103,203       0.710 28,316,248 8,213,045 500,607 0.0610 #>   names(fit.liab) #>  [1] \"model\"           \"Triangles\"       \"models\"          \"coefficients\"    #>  [5] \"coefCov\"         \"residCov\"        \"fit.method\"      \"delta\"           #>  [9] \"int\"             \"restrict.regMat\" \"mse.ay\"          \"mse.ay.est\"      #> [13] \"mse.ay.proc\"     \"mse.total\"       \"mse.total.est\"   \"mse.total.proc\"  #> [17] \"FullTriangles\"   fit.liab[[1]] #> $model #> [1] \"MCL\" #>  fit.liab$model #> [1] \"MCL\" fit.liab@model #> [1] \"MCL\"  do.call(\"rbind\",coef(fit.liab)) #>       eq1_x[[1]] eq2_x[[2]] #>  [1,]   3.226968  2.2223681 #>  [2,]   1.719491  1.2688125 #>  [3,]   1.352471  1.1200255 #>  [4,]   1.178849  1.0665251 #>  [5,]   1.106443  1.0356290 #>  [6,]   1.054712  1.0168421 #>  [7,]   1.026122  1.0097022 #>  [8,]   1.015121  1.0002188 #>  [9,]   1.012075  1.0038313 #> [10,]   1.006418  0.9994269 #> [11,]   1.004538  1.0038691 #> [12,]   1.005324  0.9989420 #> [13,]   1.003456  0.9997216 vcov(fit.liab)[[1]] #>             eq1_x[[1]]  eq2_x[[2]] #> eq1_x[[1]] 0.012892793 0.001805951 #> eq2_x[[2]] 0.001805951 0.004262759 residCov(fit.liab)[[1]] #>           eq1       eq2 #> eq1 17649.406  3462.246 #> eq2  3462.246 11106.972 head(do.call(\"rbind\",rstandard(fit.liab))) #>           eq1        eq2 #> 1 -0.93310911 -0.1775342 #> 2 -0.23597735 -0.8092400 #> 3  0.08335632 -0.3371644 #> 4 -0.02340017 -0.4127673 #> 5 -0.97850855 -0.8516139 #> 6  0.39880326 -1.3145969"},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Chain-Ladder Models — MultiChainLadder","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"function MultiChainLadder implements multivariate methods  forecast insurance loss payments based several cumulative claims development triangles. methods multivariate extensions chain-ladder technique, develop several correlated triangles simultaneously way contemporaneous correlations structural relationships can accounted . estimated conditional Mean Square Errors (MSE) also produced.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"","code":"MultiChainLadder(Triangles, fit.method = \"SUR\", delta = 1,   int = NULL, restrict.regMat = NULL, extrap = TRUE,    mse.method = \"Mack\", model = \"MCL\", ...)      MultiChainLadder2(Triangles, mse.method = \"Mack\", last = 3,    type = c(\"MCL\", \"MCL+int\", \"GMCL-int\", \"GMCL\"), ...)"},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"Triangles list cumulative claims triangles dimensions. fit.method method used fit multivariate regression development period. default \"SUR\" - seemingly unrelated regressions. \"OLS\" (Ordinary Least Squares) used, developing triangle separately. delta parameter controlling weights. used determine covariance structure \\(D(Y_{,k}^{\\delta/2})\\Sigma_k D(Y_{,k}^{\\delta/2})\\). default value 1 means variance proportional cumulative loss previous period. int numeric vector indicates development periods intercepts specified. takes effect model = \"GMCL\". default NULL means intercepts specified. restrict.regMat list matrix specifying parameter restriction matrix period. used model = \"GMCL\". default value NULL means restriction imposed development matrix. example, 3 triangles, 9 parameters development matrix period restrict.regMat = NULL. See systemfit specify appropriate parameter constraints. extrap logical value indicating whether use Mack's extrapolation method last period get residual variance  estimation. takes effect  model = \"MCL\". data  trapezoids, set FALSE automatically warning message given. mse.method method estimate mean square error. can either \"Mack\" \"Independence\",  multivariate generalization Mack's formulas conditional re-sampling approach, respectively. model structure model fitted. either \"MCL\" \"GMCL\". See details . last integer. MultiChainLadder2 function splits triangles 2 parts internally (see details ), last argument indicates many development periods tail go second part split. default 3. type type model structure specified first part split model MultiChainLadder2. \"MCL\"- multivariate chain-ladder diagonal development matrix; \"MCL+int\"- multivariate chain-ladder additional intercepts; \"GMCL-int\"- general multivariate chain-ladder without intercepts; \"GMCL\" - full general multivariate chain-ladder intercepts non-diagonal development matrix. ... arguments passed systemfit.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"function implements multivariate loss reserving models within chain-ladder framework.  Two major models included. One Multivariate chain-ladder (MCL) model proposed Prohl Schmidt (2005). direct multivariate generalization univariate chain-ladder model losses different triangles assumed correlated mean development one triangle depends past values, observed values triangles. contrast, model, General Multivariate chain-ladder (GMCL) model outlined Zhang (2010), extends MCL model allowing development dependencies among different triangles well inclusion regression intercepts. result, structurally related triangles,  paid incurred loss triangles paid loss case reserve triangles, can developed together still accounting potential contemporaneous correlations. MCL model special case GMCL model, programmed listed separately : ) important model sake; b) different MSE methods available MCL model; c) extrapolation residual variance estimation can implemented MCL model, considerably difficult GMCL model. introduce details GMCL model following. Assume N triangles available. Denote \\(Y_{,k}=(Y^{(1)}_{,k}, \\ldots ,Y^{(N)}_{,k})\\) \\(N \\times 1\\) vector  cumulative losses accident year development year k, (n) refers n-th triangle. GMCL model development period k (development year k year k+1) :   $$Y_{,k+1}=A_k + B_k \\cdot Y_{,k}+\\epsilon_{,k},$$ \\(A_k\\) column intercepts \\(B_k\\)  \\(N \\times N\\) development matrix. default, MultiChainLadder sets \\(A_k\\) zero. behavior can changed appropriately specifying int argument. Assumptions model : $$E(\\epsilon_{,k}|Y_{,1},\\ldots,Y_{,+1-k})=0.$$ $$cov(\\epsilon_{,k}|Y_{,1},\\ldots,Y_{,+1-k})=\\Sigma_{\\epsilon_{,k}}=D(Y_{,k}^{\\delta/2})\\Sigma_k D(Y_{,k}^{\\delta/2}).$$ $$\\mbox{losses different accident years independent}.$$ $$\\epsilon_{,k} \\, \\mbox{symmetrically distributed}.$$ GMCL model structure generally -parameterized. Parameter restrictions usually necessary estimation feasible, can specified restrict.regMat argument. refer users documentation systemfit details demo present function examples. particular, one restricts development matrix diagonal, GMCL model reduce MCL model. non-diagonal development matrix used GMCL model applied paid incurred loss triangles, can reflect development relationship two triangles, described Quarg Mack (2004). full bivariate model identical \"double regression\" model described Mack (2003), argued similar Munich chain-ladder (MuCL) model. GMCL model intercepts can also help improve model adequacy described Barnett Zehnwirth (2000). Currently, GMCL model works trapezoid data, implements mse.method = \"Mack\". MCL model allows additional mse estimation method assumes independence among estimated parameters. , MCL model using fit.method = \"OLS\" equivalent running univariate chain-ladders separately triangle. Indeed, one triangle specified (list),  MCL model equivalent MackChainLadder. GMCL model allows different model structures specified development period. generally achieved combination int argument, specifies periods intercepts, restrict.regMat argument, imposes parameter restrictions development matrix. using multivariate methods, often specify separate univariate chain-ladders tail periods stabilize estimation - data points tail running multivariate model often produces extremely volatile estimates even fails. case, can use subset operator \"[\" defined class triangles split input data two parts. can specify multivariate model rich structures first part reflect multivariate dependencies, simply apply multiple univariate chain-ladders second part. two models subsequently joined together using Join2Fits function. can invoke predict Mse methods produce loss predictions mean square error estimations. can combined via JoinFitMse function  construct object class MultiChainLadder. See demo examples. facilitate split--join process applications, created function MultiChainLadder2. function splits data according last argument (e.g., last = 3, last three periods go second part), fits first part according structure indicated type argument. See 'Arguments' section details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"MultiChainLadder MultiChainLadder2 fails, possible reason little development tail periods. , development factor 1 almost equal 1. case, systemfit function may fail even fit.method = \"OLS\", residual covariance matrix \\(\\Sigma_k\\) singular. simplest solution remove columns using \"[\" operator fit model remaining part. Also, recommend use MultiChainLadder2 MultiChainLadder. function MultiChainLadder2 meets need applications, relatively easy use produces stable similar results MultiChainLadder. Use MultiChainLadder non-standard situation arises, e.g., different parameter restrictions needed different periods. See demo examples.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"MultiChainLadder returns object class MultiChainLadder  following slots: model model structure used, either \"MCL\" \"GMCL\" Triangles input triangles cumulative claims converted class triangles internally. models fitted models development period. output call systemfit. coefficients estimated regression coefficients development parameters. put matrix format GMCL model. coefCov estimated variance-covariance matrix regression coefficients. residCov estimated residual covariance matrix. fit.method multivariate regression estimation method delta value delta mse.ay mean square error matrix accident year mse.ay.est estimation error matrix accident year mse.ay.proc process error matrix accident year mse.total mean square error matrix accident years combined mse.total.est estimation error matrix accident years combined mse.total.proc process error matrix accident years combined FullTriangles forecasted full triangles class triangles int intercept indicators","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"Buchwalder M, Bühlmann H, Merz M, Wüthrich M.V (2006). mean square error prediction chain-ladder reserving method (Mack Murphy revisited), ASTIN Bulletin, 36(2), 521-542. Prohl C, Schmidt K.D (2005). Multivariate chain-ladder, Dresdner Schriften zur Versicherungsmathematik. Mack T (1993). Distribution-free calculation standard error, ASTIN Bulletin, 23, .2. Mack T (1999). standard error chain-ladder reserve estimates: recursive calculation inclusion tail factor, ASTIN Bulletin, 29, .2, 361-366. Merz M, Wüthrich M (2008). Prediction error multivariate chain ladder reserving method, North American Actuarial Journal, 12, .2, 175-197. Zhang Y (2010). general multivariate chain-ladder model.Insurance: Mathematics Economics, 46, pp. 588-599. Zhang Y (2010). Prediction error general multivariate chain ladder model.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Chain-Ladder Models — MultiChainLadder","text":"","code":"# This shows that the MCL model using \"OLS\" is equivalent to  # the MackChainLadder when applied to one triangle   data(GenIns) (U1 <- MackChainLadder(GenIns, est.sigma = \"Mack\")) #> MackChainLadder(Triangle = GenIns, est.sigma = \"Mack\") #>  #>       Latest Dev.To.Date  Ultimate      IBNR  Mack.S.E CV(IBNR) #> 1  3,901,463      1.0000 3,901,463         0         0      NaN #> 2  5,339,085      0.9826 5,433,719    94,634    75,535    0.798 #> 3  4,909,315      0.9127 5,378,826   469,511   121,699    0.259 #> 4  4,588,268      0.8661 5,297,906   709,638   133,549    0.188 #> 5  3,873,311      0.7973 4,858,200   984,889   261,406    0.265 #> 6  3,691,712      0.7223 5,111,171 1,419,459   411,010    0.290 #> 7  3,483,130      0.6153 5,660,771 2,177,641   558,317    0.256 #> 8  2,864,498      0.4222 6,784,799 3,920,301   875,328    0.223 #> 9  1,363,294      0.2416 5,642,266 4,278,972   971,258    0.227 #> 10   344,014      0.0692 4,969,825 4,625,811 1,363,155    0.295 #>  #>                  Totals #> Latest:   34,358,090.00 #> Dev:               0.65 #> Ultimate: 53,038,945.61 #> IBNR:     18,680,855.61 #> Mack.S.E   2,447,094.86 #> CV(IBNR):          0.13 (U2 <- MultiChainLadder(list(GenIns), fit.method = \"OLS\")) #> $`Summary Statistics for Input Triangle` #>           Latest Dev.To.Date   Ultimate       IBNR       S.E    CV #> 1      3,901,463      1.0000  3,901,463          0         0 0.000 #> 2      5,339,085      0.9826  5,433,719     94,634    75,535 0.798 #> 3      4,909,315      0.9127  5,378,826    469,511   121,699 0.259 #> 4      4,588,268      0.8661  5,297,906    709,638   133,549 0.188 #> 5      3,873,311      0.7973  4,858,200    984,889   261,406 0.265 #> 6      3,691,712      0.7223  5,111,171  1,419,459   411,010 0.290 #> 7      3,483,130      0.6153  5,660,771  2,177,641   558,317 0.256 #> 8      2,864,498      0.4222  6,784,799  3,920,301   875,328 0.223 #> 9      1,363,294      0.2416  5,642,266  4,278,972   971,258 0.227 #> 10       344,014      0.0692  4,969,825  4,625,811 1,363,155 0.295 #> Total 34,358,090      0.6478 53,038,946 18,680,856 2,447,095 0.131 #>   # show plots  parold <- par(mfrow = c(2, 2)) plot(U2, which.plot = 1:4)  plot(U2, which.plot = 5)  par(parold)   # For mse.method = \"Independence\", the model is equivalent  # to that in Buchwalder et al. (2006)  (B1 <- MultiChainLadder(list(GenIns), fit.method = \"OLS\",      mse.method = \"Independence\")) #> $`Summary Statistics for Input Triangle` #>           Latest Dev.To.Date   Ultimate       IBNR       S.E    CV #> 1      3,901,463      1.0000  3,901,463          0         0 0.000 #> 2      5,339,085      0.9826  5,433,719     94,634    75,535 0.798 #> 3      4,909,315      0.9127  5,378,826    469,511   121,700 0.259 #> 4      4,588,268      0.8661  5,297,906    709,638   133,551 0.188 #> 5      3,873,311      0.7973  4,858,200    984,889   261,412 0.265 #> 6      3,691,712      0.7223  5,111,171  1,419,459   411,028 0.290 #> 7      3,483,130      0.6153  5,660,771  2,177,641   558,356 0.256 #> 8      2,864,498      0.4222  6,784,799  3,920,301   875,430 0.223 #> 9      1,363,294      0.2416  5,642,266  4,278,972   971,385 0.227 #> 10       344,014      0.0692  4,969,825  4,625,811 1,363,385 0.295 #> Total 34,358,090      0.6478 53,038,946 18,680,856 2,447,618 0.131 #>   # use the unbiased residual covariance estimator  # in Merz and Wuthrich (2008) (W1 <- MultiChainLadder2(liab, mse.method = \"Independence\",          control = systemfit::systemfit.control(methodResidCov = \"Theil\")))  #> $`Summary Statistics for Triangle 1` #>           Latest Dev.To.Date   Ultimate      IBNR     S.E     CV #> 1        549,589      1.0000    549,589         0       0 0.0000 #> 2        562,795      0.9966    564,740     1,945   1,743 0.8961 #> 3        602,710      0.9911    608,104     5,394   7,354 1.3633 #> 4        784,632      0.9867    795,248    10,616   9,042 0.8518 #> 5        768,373      0.9804    783,768    15,395  11,181 0.7263 #> 6        811,100      0.9687    837,341    26,241  16,783 0.6396 #> 7        896,728      0.9542    939,740    43,012  19,706 0.4581 #> 8      1,022,241      0.9299  1,099,257    77,016  23,362 0.3033 #> 9      1,019,303      0.8817  1,156,068   136,765  29,610 0.2165 #> 10     1,141,750      0.7969  1,432,782   291,032  37,521 0.1289 #> 11     1,174,196      0.6760  1,737,032   562,836  57,669 0.1025 #> 12     1,032,684      0.4998  2,066,151 1,033,467  89,534 0.0866 #> 13       772,971      0.2907  2,659,239 1,886,268 193,211 0.1024 #> 14       204,325      0.0901  2,268,345 2,064,020 282,755 0.1370 #> Total 11,343,397      0.6483 17,497,403 6,154,006 427,041 0.0694 #>  #> $`Summary Statistics for Triangle 2` #>          Latest Dev.To.Date   Ultimate      IBNR     S.E      CV #> 1       391,428       1.000    391,428         0       0  0.0000 #> 2       483,974       1.000    483,839      -135     604 -4.4825 #> 3       540,742       1.001    540,002      -740   1,436 -1.9416 #> 4       485,016       0.998    486,227     1,211   2,912  2.4043 #> 5       507,752       0.998    508,728       976   3,201  3.2801 #> 6       549,693       0.994    552,860     3,167   5,418  1.7108 #> 7       635,452       0.994    639,253     3,801   6,221  1.6367 #> 8       648,365       0.985    658,572    10,207   7,484  0.7333 #> 9       663,152       0.968    684,936    21,784   9,125  0.4189 #> 10      790,901       0.935    845,986    55,085  16,196  0.2940 #> 11      844,159       0.877    963,023   118,864  26,752  0.2251 #> 12      915,109       0.783  1,169,265   254,156  36,741  0.1446 #> 13      909,066       0.617  1,473,780   564,714  53,391  0.0945 #> 14      394,997       0.278  1,423,135 1,028,138 126,545  0.1231 #> Total 8,759,806       0.809 10,821,034 2,061,228 162,785  0.0790 #>  #> $`Summary Statistics for Triangle 1+2` #>           Latest Dev.To.Date   Ultimate      IBNR     S.E     CV #> 1        941,017       1.000    941,017         0       0 0.0000 #> 2      1,046,769       0.998  1,048,579     1,810   1,845 1.0190 #> 3      1,143,452       0.996  1,148,107     4,655   7,493 1.6097 #> 4      1,269,648       0.991  1,281,475    11,827   9,499 0.8032 #> 5      1,276,125       0.987  1,292,496    16,371  12,068 0.7372 #> 6      1,360,793       0.979  1,390,201    29,408  18,888 0.6423 #> 7      1,532,180       0.970  1,578,993    46,813  22,455 0.4797 #> 8      1,670,606       0.950  1,757,828    87,222  26,019 0.2983 #> 9      1,682,455       0.914  1,841,004   158,549  33,404 0.2107 #> 10     1,932,651       0.848  2,278,768   346,117  45,438 0.1313 #> 11     2,018,355       0.748  2,700,055   681,700  72,278 0.1060 #> 12     1,947,793       0.602  3,235,416 1,287,623 112,426 0.0873 #> 13     1,682,037       0.407  4,133,019 2,450,982 223,181 0.0911 #> 14       599,322       0.162  3,691,479 3,092,157 342,288 0.1107 #> Total 20,103,203       0.710 28,318,437 8,215,234 505,376 0.0615 #>   if (FALSE) { # \\dontrun{ # use the iterative residual covariance estimator for (i in 1:5){   W2 <- MultiChainLadder2(liab, mse.method = \"Independence\",        control = systemfit::systemfit.control(       methodResidCov = \"Theil\", maxiter = i))   print(format(summary(W2)@report.summary[[3]][15, 4:5],            digits = 6, big.mark = \",\"))     }  # The following fits an MCL model with intercepts for years 1:7 # and separate chain-ladder models for the rest periods f1 <- MultiChainLadder2(auto, type = \"MCL+int\")  # compare with the model without intercepts through residual plots f0 <- MultiChainLadder2(auto, type = \"MCL\")  parold <- par(mfrow = c(2, 3), mar = c(3, 3, 2, 1)) mt <- list(c(\"Personal Paid\", \"Personal Incured\", \"Commercial Paid\")) plot(f0, which.plot = 3, main = mt) plot(f1, which.plot = 3, main = mt) par(parold)  ## summary statistics summary(f1, portfolio = \"1+3\")@report.summary[[4]]   # model for joint development of paid and incurred triangles  da <- auto[1:2] # MCL with diagonal development M0 <- MultiChainLadder(da) # non-diagonal development matrix with no intercepts M1 <- MultiChainLadder2(da, type = \"GMCL-int\") # Munich chain-ladder M2 <- MunichChainLadder(da[[1]], da[[2]]) # compile results and compare projected paid to incurred ratios r1 <- lapply(list(M0, M1), function(x){           ult <- summary(x)@Ultimate           ult[, 1] / ult[, 2]       }) names(r1) <- c(\"MCL\", \"GMCL\") r2 <- summary(M2)[[1]][, 6] r2 <- c(r2, summary(M2)[[2]][2, 3]) print(do.call(cbind, c(r1, list(MuCl = r2))) * 100, digits = 4)  } # }  # To reproduce results in Zhang (2010) and see more examples, use: if (FALSE) { # \\dontrun{  demo(MultiChainLadder) } # }"},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"\"MultiChainLadderFit\" virtual class fitted models multivariate chain ladder reserving framework, \"MCLFit\" result interal call .FitMCL store results model MCL \"GMCLFit\" result interal call .FitGMCL store results model GMCL. two classes \"MCLFit\" \"GMCLFit\" differ presentation \\(B_k\\) \\(\\Sigma_{B_k}\\), different methods Mse predict dispatched according classes.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"\"MultiChainLadderFit\" virtual Class: objects may created . \"MCLFit\" \"GMCLFit\", objects can created calls form new(\"MCLFit\", ...) new(\"GMCLFit\", ...) respectively.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Triangles: Object class \"triangles\" models: Object class \"list\" B: Object class \"list\" Bcov: Object class \"list\" ecov: Object class \"list\" fit.method: Object class \"character\" delta: Object class \"numeric\" int: Object class \"NullNum\" restrict.regMat: Object class \"NullList\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ","text":"\"MCLFit\" \"GMCLFit\" extends class \"MultiChainLadderFit\", directly.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"methods defined class \"MultiChainLadderFit\" signature. \"MCLFit\", following methods defined: Mse signature(ModelFit = \"MCLFit\", FullTriangles = \"triangles\"): Calculate Mse estimations. predict signature(object = \"MCLFit\"): Predict ultimate losses complete triangles. output object class \"triangles\". \"GMCLFit\", following methods defined: Mse signature(ModelFit = \"GMCLFit\", FullTriangles = \"triangles\"): Calculate Mse estimations. predict signature(object = \"GMCLFit\"): Predict ultimate losses complete triangles. output object class \"triangles\".","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderFit-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"MultiChainLadderFit\") #> Virtual Class \"MultiChainLadderFit\" [package \"ChainLadder\"] #>  #> Slots: #>                                                                        #> Name:        Triangles          models    coefficients         coefCov #> Class:       triangles            list            list            list #>                                                                        #> Name:         residCov      fit.method           delta             int #> Class:            list       character         numeric         NullNum #>                        #> Name:  restrict.regMat #> Class:        NullList #>  #> Known Subclasses: \"GMCLFit\", \"MCLFit\", \"MultiChainLadder\""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderMse-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class used define structure storing MSE results.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderMse-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"MultiChainLadderMse\", ...), result call Mse.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderMse-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"mse.ay: Object class \"matrix\" mse.ay.est: Object class \"matrix\" mse.ay.proc: Object class \"matrix\" mse.total: Object class \"matrix\" mse.total.est: Object class \"matrix\" mse.total.proc: Object class \"matrix\" FullTriangles: Object class \"triangles\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderMse-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"methods defined class \"MultiChainLadderMse\" signature.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderMse-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderMse-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"MultiChainLadderMse\") #> Class \"MultiChainLadderMse\" [package \"ChainLadder\"] #>  #> Slots: #>                                                                    #> Name:          mse.ay     mse.ay.est    mse.ay.proc      mse.total #> Class:         matrix         matrix         matrix         matrix #>                                                     #> Name:   mse.total.est mse.total.proc  FullTriangles #> Class:         matrix         matrix      triangles #>  #> Known Subclasses: \"MultiChainLadder\""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class stores summary statistics \"MultiChainLadder\" object. summary statistics include model summary report summary.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderSummary-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"MultiChainLadderSummary\", ...), call summary.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Triangles: Object class \"triangles\" FullTriangles: Object class \"triangles\" S.E.Full: Object class \"list\" S.E.Est.Full: Object class \"list\" S.E.Proc.Full: Object class \"list\" Ultimate: Object class \"matrix\" IBNR: Object class \"matrix\" S.E.Ult: Object class \"matrix\" S.E.Est.Ult: Object class \"matrix\" S.E.Proc.Ult: Object class \"matrix\" report.summary: Object class \"list\" coefficients: Object class \"list\" coefCov: Object class \"list\" residCov: Object class \"list\" rstandard: Object class \"matrix\" fitted.values: Object class \"matrix\" residCor: Object class \"matrix\" model.summary: Object class \"matrix\" portfolio: Object class \"NullChar\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderSummary-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"$ signature(x = \"MultiChainLadderSummary\"): Method primitive function \"$\". extracts slot x specified slot name, just list. [[ signature(x = \"MultiChainLadderSummary\", = \"numeric\", j = \"missing\"): Method primitive function \"[[\". extracts -th slot \"MultiChainLadder\" object, just list. vetor. [[ signature(x = \"MultiChainLadderSummary\", = \"character\", j = \"missing\"): Method primitive function \"[[\". extracts slots \"MultiChainLadder\" object names , just list. vetor. names signature(x = \"MultiChainLadderSummary\"):  Method function names, returns slot names \"MultiChainLadder\" object. show signature(object = \"MultiChainLadderSummary\"): Method show.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderSummary-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MultiChainLadderSummary-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"MultiChainLadderSummary\") #> Class \"MultiChainLadderSummary\" [package \"ChainLadder\"] #>  #> Slots: #>                                                                    #> Name:       Triangles  FullTriangles       S.E.Full   S.E.Est.Full #> Class:      triangles      triangles           list           list #>                                                                    #> Name:   S.E.Proc.Full       Ultimate           IBNR        S.E.Ult #> Class:           list         matrix         matrix         matrix #>                                                                    #> Name:     S.E.Est.Ult   S.E.Proc.Ult report.summary   coefficients #> Class:         matrix         matrix           list           list #>                                                                    #> Name:         coefCov       residCov      rstandard  fitted.values #> Class:           list           list         matrix         matrix #>                                                     #> Name:        residCor  model.summary      portfolio #> Class:         matrix         matrix       NullChar"},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Munich-chain-ladder Model — MunichChainLadder","title":"Munich-chain-ladder Model — MunichChainLadder","text":"Munich-chain-ladder model forecasts ultimate claims based cumulative   paid incurred claims triangle.   model assumes Mack-chain-ladder model applicable   paid incurred claims triangle, see MackChainLadder.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munich-chain-ladder Model — MunichChainLadder","text":"","code":"MunichChainLadder(Paid, Incurred,                    est.sigmaP = \"log-linear\", est.sigmaI = \"log-linear\",                    tailP=FALSE, tailI=FALSE, weights=1)"},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Munich-chain-ladder Model — MunichChainLadder","text":"Paid cumulative paid claims triangle. Assume columns development     period, use transpose otherwise. (mxn)-matrix \\(P_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n\\) Incurred cumulative incurred claims triangle. Assume columns development     period, use transpose otherwise. (mxn)-matrix     \\(I_{ik}\\) filled \\(k \\leq n+1-; =1,\\ldots,m,       m\\geq n \\) est.sigmaP defines \\(sigma_{n-1}\\) Paid triangle     estimated, see est.sigma MackChainLadder     details, est.sigmaP gets passed     MackChainLadder est.sigmaI defines \\(sigma_{n-1}\\) Incurred triangle     estimated, see est.sigma MackChainLadder     details, est.sigmaI passed     MackChainLadder tailP defines tail Paid triangle estimated     passed MackChainLadder, see tail just . tailI defines tail Incurred triangle estimated     passed MackChainLadder, see tail just . weights weights. Default: 1, sets weights triangle entries 1.                  Otherwise specify weights matrix dimension Triangle weight entries [0; 1].                  Hence, entry set 0 NA eliminates age--age factor inclusion model. See also 'Details' MackChainladder function.                  weight matrix Paid Incurred.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Munich-chain-ladder Model — MunichChainLadder","text":"MunichChainLadder returns list following elements call matched call Paid input paid triangle Incurred input incurred triangle MCLPaid Munich-chain-ladder forecasted full triangle paid data MCLIncurred Munich-chain-ladder forecasted full triangle incurred data MackPaid Mack-chain-ladder output paid triangle MackIncurred Mack-chain-ladder output incurred triangle PaidResiduals paid residuals IncurredResiduals incurred residuals QResiduals paid/incurred residuals QinverseResiduals incurred/paid residuals lambdaP dependency coefficient paid chain-ladder     age--age factors     incurred/paid age--age factors lambdaI dependency coefficient incurred chain-ladder     ratios paid/incurred ratios qinverse.f chain-ladder-link age--age factors incurred/paid triangle rhoP.sigma estimated conditional deviation around     paid/incurred age--age factors q.f chain-ladder age--age factors paid/incurred triangle rhoI.sigma estimated conditional deviation around     incurred/paid age--age factors","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Munich-chain-ladder Model — MunichChainLadder","text":"Gerhard Quarg Thomas Mack. Munich Chain Ladder. Blatter DGVFM 26,   Munich, 2004.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Munich-chain-ladder Model — MunichChainLadder","text":"Markus Gesmann markus.gesmann@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/MunichChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Munich-chain-ladder Model — MunichChainLadder","text":"","code":"MCLpaid #>       dev #> origin    1    2    3    4    5    6    7 #>      1  576 1804 1970 2024 2074 2102 2131 #>      2  866 1948 2162 2232 2284 2348   NA #>      3 1412 3758 4252 4416 4494   NA   NA #>      4 2286 5292 5724 5850   NA   NA   NA #>      5 1868 3778 4648   NA   NA   NA   NA #>      6 1442 4010   NA   NA   NA   NA   NA #>      7 2044   NA   NA   NA   NA   NA   NA MCLincurred #>       dev #> origin    1    2    3    4    5    6    7 #>      1  978 2104 2134 2144 2174 2182 2174 #>      2 1844 2552 2466 2480 2508 2454   NA #>      3 2904 4354 4698 4600 4644   NA   NA #>      4 3502 5958 6070 6142   NA   NA   NA #>      5 2812 4882 4852   NA   NA   NA   NA #>      6 2642 4406   NA   NA   NA   NA   NA #>      7 5022   NA   NA   NA   NA   NA   NA op <- par(mfrow=c(1,2)) plot(MCLpaid) plot(MCLincurred)  par(op)  # Following the example in Quarg's (2004) paper: MCL <- MunichChainLadder(MCLpaid, MCLincurred, est.sigmaP=0.1, est.sigmaI=0.1) MCL #> MunichChainLadder(Paid = MCLpaid, Incurred = MCLincurred, est.sigmaP = 0.1,  #>     est.sigmaI = 0.1) #>  #>   Latest Paid Latest Incurred Latest P/I Ratio Ult. Paid Ult. Incurred #> 1       2,131           2,174            0.980     2,131         2,174 #> 2       2,348           2,454            0.957     2,383         2,444 #> 3       4,494           4,644            0.968     4,597         4,629 #> 4       5,850           6,142            0.952     6,119         6,176 #> 5       4,648           4,852            0.958     4,937         4,950 #> 6       4,010           4,406            0.910     4,656         4,665 #> 7       2,044           5,022            0.407     7,549         7,650 #>   Ult. P/I Ratio #> 1          0.980 #> 2          0.975 #> 3          0.993 #> 4          0.991 #> 5          0.997 #> 6          0.998 #> 7          0.987 #>  #> Totals #>             Paid Incurred P/I Ratio #> Latest:   25,525   29,694      0.86 #> Ultimate: 32,371   32,688      0.99 plot(MCL)  # You can access the standard chain-ladder (Mack) output via MCL$MackPaid #> MackChainLadder(Triangle = Paid, weights = weights, est.sigma = est.sigmaP,  #>     tail = tailP) #>  #>   Latest Dev.To.Date Ultimate    IBNR Mack.S.E CV(IBNR) #> 1  2,131       1.000    2,131     0.0     0.00      NaN #> 2  2,348       0.986    2,380    32.4     7.05    0.218 #> 3  4,494       0.966    4,652   158.2    47.92    0.303 #> 4  5,850       0.946    6,182   331.6    63.52    0.192 #> 5  4,648       0.919    5,056   407.6    67.54    0.166 #> 6  4,010       0.813    4,934   924.1   289.09    0.313 #> 7  2,044       0.334    6,128 4,084.3   897.13    0.220 #>  #>              Totals #> Latest:   25,525.00 #> Dev:           0.81 #> Ultimate: 31,463.21 #> IBNR:      5,938.21 #> Mack.S.E     987.23 #> CV(IBNR):      0.17 MCL$MackIncurred #> MackChainLadder(Triangle = Incurred, weights = weights, est.sigma = est.sigmaI,  #>     tail = tailI) #>  #>   Latest Dev.To.Date Ultimate    IBNR Mack.S.E CV(IBNR) #> 1  2,174       1.000    2,174     0.0     0.00      NaN #> 2  2,454       1.004    2,445    -9.0     7.22   -0.803 #> 3  4,644       1.014    4,582   -62.5    83.30   -1.333 #> 4  6,142       1.003    6,126   -15.6   104.85   -6.705 #> 5  4,852       1.003    4,839   -13.0   118.50   -9.128 #> 6  4,406       0.984    4,476    70.1   217.45    3.101 #> 7  5,022       0.596    8,429 3,406.8   874.91    0.257 #>  #>              Totals #> Latest:   29,694.00 #> Dev:           0.90 #> Ultimate: 33,070.85 #> IBNR:      3,376.85 #> Mack.S.E     994.23 #> CV(IBNR):      0.29  # Input triangles section 3.3.1 MCL$Paid #>       dev #> origin    1    2    3    4    5    6    7 #>      1  576 1804 1970 2024 2074 2102 2131 #>      2  866 1948 2162 2232 2284 2348   NA #>      3 1412 3758 4252 4416 4494   NA   NA #>      4 2286 5292 5724 5850   NA   NA   NA #>      5 1868 3778 4648   NA   NA   NA   NA #>      6 1442 4010   NA   NA   NA   NA   NA #>      7 2044   NA   NA   NA   NA   NA   NA MCL$Incurred #>       dev #> origin    1    2    3    4    5    6    7 #>      1  978 2104 2134 2144 2174 2182 2174 #>      2 1844 2552 2466 2480 2508 2454   NA #>      3 2904 4354 4698 4600 4644   NA   NA #>      4 3502 5958 6070 6142   NA   NA   NA #>      5 2812 4882 4852   NA   NA   NA   NA #>      6 2642 4406   NA   NA   NA   NA   NA #>      7 5022   NA   NA   NA   NA   NA   NA # Parameters from section 3.3.2 # Standard chain-ladder age-to-age factors MCL$MackPaid$f #> [1] 2.436686 1.131242 1.029345 1.020756 1.021111 1.013796 1.000000 MCL$MackIncurred$f #> [1] 1.6520910 1.0186398 0.9998699 1.0110581 0.9901751 0.9963336 1.0000000 MCL$MackPaid$sigma #> [1] 13.4559310  3.6656420  0.4819578  0.2100029  0.4787308  0.1000000 MCL$MackIncurred$sigma #> [1] 9.7273990 2.5444838 1.0040570 0.1200991 0.8603340 0.1000000 # Check Mack's assumptions graphically plot(MCL$MackPaid)  plot(MCL$MackIncurred)   MCL$q.f #> [1] 0.5325822 0.8488621 0.9275964 0.9450735 0.9491744 0.9598792 0.9802208 MCL$rhoP.sigma #> [1] 14.9430129  4.9899464  2.1665565  1.6186098  1.7910011  0.2359799  0.1966189 MCL$rhoI.sigma #> [1] 5.7107795 3.8192859 1.9184007 1.4606629 1.6370399 0.2219648 0.2494577  MCL$PaidResiduals #>  [1]  1.240062341 -0.409542454  0.627731906 -0.432520662 -1.330415661 #>  [6]  0.971284236           NA -0.454493935 -0.257500458  0.003519297 #> [11] -0.984526495  1.660669736           NA           NA -0.178096214 #> [16]  0.292551156  1.248117471 -1.151042283           NA           NA #> [21]           NA  0.845586577  0.571652630 -0.978875177           NA #> [26]           NA           NA           NA -0.723943106  0.689859681 #> [31]           NA           NA           NA           NA           NA #> [36]           NA           NA           NA           NA           NA #> [41]           NA           NA           NA           NA           NA #> [46]           NA           NA           NA           NA MCL$IncurredResiduals #>  [1]  1.605020358 -1.183723533 -0.846383581  0.299450714  0.458137992 #>  [6]  0.082352480           NA -0.078980622 -1.039118036  1.565493903 #> [11]  0.004806834 -0.680589085           NA           NA  0.221585430 #> [16]  0.287221014 -1.415119918  0.930505026           NA           NA #> [21]           NA  1.131348046  0.096288253 -0.843077797           NA #> [26]           NA           NA           NA  0.731893789 -0.681418728 #> [31]           NA           NA           NA           NA           NA #> [36]           NA           NA           NA           NA           NA #> [41]           NA           NA           NA           NA           NA #> [46]           NA           NA           NA           NA  MCL$QinverseResiduals #>  [1] -0.28866099  0.49565517  0.45015637 -1.10614730 -1.07679458 -0.11554182 #>  [7]          NA -0.10001795  1.16766593 -0.23897922 -0.76095980  1.40633581 #> [13]          NA          NA  0.10639977  1.34252842  0.80771329 -0.61487164 #> [19]          NA          NA          NA  0.03251491  1.54674415 -0.67544873 #> [25]          NA          NA          NA          NA -0.13556094  1.18814416 #> [31]          NA          NA          NA          NA          NA          NA #> [37]          NA          NA          NA          NA          NA          NA #> [43]          NA          NA          NA          NA          NA          NA #> [49]          NA MCL$QResiduals #>  [1]  0.30871615 -0.47335565 -0.43743334  1.24543896  1.22304681  0.11895559 #>  [7]          NA  0.10271271 -1.13141939  0.24623239  0.79537557 -1.37205649 #> [13]          NA          NA -0.10709430 -1.31687503 -0.80498376  0.62550343 #> [19]          NA          NA          NA -0.03308516 -1.53672981  0.69308386 #> [25]          NA          NA          NA          NA  0.13749654 -1.17743245 #> [31]          NA          NA          NA          NA          NA          NA #> [37]          NA          NA          NA          NA          NA          NA #> [43]          NA          NA          NA          NA          NA          NA #> [49]          NA  MCL$lambdaP #>  #> Call: #> lm(formula = PaidResiduals ~ QinverseResiduals + 0) #>  #> Coefficients: #> QinverseResiduals   #>             0.636   #>  MCL$lambdaI #>  #> Call: #> lm(formula = IncurredResiduals ~ QResiduals + 0) #>  #> Coefficients: #> QResiduals   #>     0.4362   #>  # Section 3.3.3 Results MCL$MCLPaid #>      1       2        3        4        5        6          #> 1  576 1804.00 1970.000 2024.000 2074.000 2102.000 2131.000 #> 2  866 1948.00 2162.000 2232.000 2284.000 2348.000 2382.512 #> 3 1412 3758.00 4252.000 4416.000 4494.000 4573.461 4597.066 #> 4 2286 5292.00 5724.000 5850.000 5967.465 6080.613 6119.269 #> 5 1868 3778.00 4648.000 4761.928 4848.086 4922.643 4937.412 #> 6 1442 4010.00 4387.718 4493.324 4573.894 4642.893 4655.543 #> 7 2044 5658.75 6944.326 7176.571 7329.680 7485.196 7548.518 MCL$MCLIncurred #>      1       2        3        4        5        6          #> 1  978 2104.00 2134.000 2144.000 2174.000 2182.000 2174.000 #> 2 1844 2552.00 2466.000 2480.000 2508.000 2454.000 2443.520 #> 3 2904 4354.00 4698.000 4600.000 4644.000 4618.095 4628.803 #> 4 3502 5958.00 6070.000 6142.000 6211.546 6166.937 6175.985 #> 5 2812 4882.00 4852.000 4884.997 4944.225 4931.215 4950.330 #> 6 2642 4406.00 4566.563 4600.621 4656.710 4646.230 4665.171 #> 7 5022 7828.26 7687.543 7643.941 7726.764 7649.849 7649.759"},{"path":"http://mages.github.io/ChainLadder/reference/NullNum-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Virtual class c(\"null\", \"numeric\"), c(\"null\",\"character\"  c(\"null\",\"list\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/NullNum-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"virtual Class: objects may created .","code":""},{"path":"http://mages.github.io/ChainLadder/reference/NullNum-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"methods defined class \"NullNum\" signature.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":null,"dir":"Reference","previous_headings":"","what":"PaidIncurredChain — PaidIncurredChain","title":"PaidIncurredChain — PaidIncurredChain","text":"Paid-incurred Chain model (Merz, Wuthrich (2010)) combines claims payments incurred losses information get unified ultimate loss prediction.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PaidIncurredChain — PaidIncurredChain","text":"","code":"PaidIncurredChain(triangleP, triangleI)"},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PaidIncurredChain — PaidIncurredChain","text":"triangleP Cumulative claims payments triangle triangleI Incurred losses triangle.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PaidIncurredChain — PaidIncurredChain","text":"function returns: Ult.Loss.Origin Ultimate losses different origin years. Ult.Loss Total ultimate loss. Res.Origin Claims reserves different origin years. Res.Tot Total reserve. s.e. Square root mean square error prediction   total ultimate loss.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PaidIncurredChain — PaidIncurredChain","text":"method uses basic properties multivariate Gaussian distributions obtain mathematically rigorous consistent model combination two information channels. assume usual =J. model assumptions Log-Normal PIC Model following: Conditionally, given \\(\\Theta = (\\Phi_0,...,\\Phi_I,   \\Psi_0,...,\\Psi_{-1},\\sigma_0,...,\\sigma_{-1},\\tau_0,...,\\tau_{-1})\\)   random vector \\((\\xi_{0,0},...,\\xi_{,},     \\zeta_{0,0},...,\\zeta_{,-1})\\) multivariate Gaussian distribution     uncorrelated components given     $$\\xi_{,j} \\sim N(\\Phi_j,\\sigma^2_j),$$     $$\\zeta_{k,l} \\sim N(\\Psi_l,\\tau^2_l);$$ cumulative payments given recursion     $$P_{,j} = P_{,j-1} \\exp(\\xi_{,j}),$$     initial value \\(P_{,0} = \\exp (\\xi_{,0})\\); incurred losses \\(I_{,j}\\) given backwards     recursion     $$I_{,j-1} = I_{,j} \\exp(-\\zeta_{,j-1}),$$     initial value \\(I_{,}=P_{,}\\). components \\(\\Theta\\) independent   \\(\\sigma_j,\\tau_j > 0\\) j. Parameters \\(\\Theta\\) model general known need estimated observations. estimated Bayesian framework. Bayesian PIC model assume previous assumptions hold true deterministic \\(\\sigma_0,...,\\sigma_J\\) \\(\\tau_0,...,\\tau_{J-1}\\) $$\\Phi_m \\sim N(\\phi_m,s^2_m),$$ $$\\Psi_n \\sim N(\\psi_n,t^2_n).$$ full Bayesian approach advantage give analytical expressions posterior distributions prediction uncertainty.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"PaidIncurredChain — PaidIncurredChain","text":"model implemented special case non-informative priors.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PaidIncurredChain — PaidIncurredChain","text":"Merz, M., Wuthrich, M. (2010). Paid-incurred chain claims reserving method. Insurance: Mathematics Economics, 46(3), 568-579.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PaidIncurredChain — PaidIncurredChain","text":"Fabio Concina, fabio.concina@gmail.com","code":""},{"path":"http://mages.github.io/ChainLadder/reference/PaidIncurredChain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PaidIncurredChain — PaidIncurredChain","text":"","code":"PaidIncurredChain(USAApaid, USAAincurred) #> $Ult.Loss.Origin #>            [,1] #>  [1,]  983113.3 #>  [2,] 1078696.6 #>  [3,] 1145761.4 #>  [4,] 1245171.4 #>  [5,] 1371964.4 #>  [6,] 1433857.4 #>  [7,] 1415963.7 #>  [8,] 1410065.3 #>  [9,] 1320414.5 #>  #> $Ult.Loss #> [1] 11405008 #>  #> $Res.Origin #>              [,1] #>  [1,]    965.2681 #>  [2,]   3159.6104 #>  [3,]   7386.4026 #>  [4,]  18521.4454 #>  [5,]  47232.3846 #>  [6,] 113727.4102 #>  [7,] 230663.7420 #>  [8,] 443903.3046 #>  [9,] 778393.5002 #>  #> $Res.Tot #> [1] 1643953 #>  #> $s.e. #> [1] 113940.2 #>"},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"Quantile IFRS 17 function provides estimate quantile attained reserve risk distribution corresponds booked Risk Adjustment plus Best Estimate.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"","code":"QuantileIFRS17(MCL, Correlation, RiskMargin)"},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"MCL list MackChainLadder objects Correlation Correlation matrix depicting correlations triangle imported. correlation matrix dimension n x n, n number items list MackChainLadder objects. correlation estimations P&C risks, please refer article Arbenz et al. . RiskMargin Input risk margin single number. risk margin corresponds IFRS 17 risk adjustment. estimated outside function can come e.g. Solvency 2 standard formula. See International Actuarial Association reference details risk adjustment calculations.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"IFRS 17 quantile mandatory disclosure producing Financial Statements IFRS 17 framework: quantile reflects Probability Sufficiency reserves defined Best Estimate plus Risk Adjustment .e. probability reserves cover negative deviations disclosed quantile. risk measure quantile measure (Value risk) used determining Risk Adjustment, quantile estimated. purpose function provide estimation deriving first three moments reserve risk distribution. moments estimated triangles input function. triangles projected using chain-ladder methods standard Best Estimate, Mack volatility skewness estimated. resulting moments different triangles aggregated using Fleishman polynomials. using Cornish-Fisher expansion based three aggregated moments, Probability Sufficiency reserves including Risk Adjustment (given input function) can easily derived.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"QuantileIFRS17 returns vector following elements QuantileIFRS_17 Quantile attained reserve risk distribution booked Risk Adjustment Skewness Skewness overall aggregated risk distribution across triangles CoV Coefficient Variation overall aggregated risk distribution across triangles Reserve Sum reserves input MackChainLadder objects","code":""},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"Thomas Mack. Distribution-free calculation standard error chain ladder reserve estimates. Astin Bulletin. Vol. 23. 2. 1993. pp.213:225 Thomas Mack. standard error chain ladder reserve estimates: Recursive calculation inclusion tail factor. Astin Bulletin. Vol. 29. 2. 1999. pp.361:366 Dal Moro, Krvavych.   Probability sufficiency Solvency II Reserve risk margins: Practical approximations. ASTIN Bulletin, 47(3), 737-785 P. Arbenz, D. Canestraro (2012) Estimating Copulas Insurance Scarce Observations, Expert Opinion Prior Information: Bayesian Approach, Astin Bulletin, vol. 42(1), pages 271-290. International Actuarial Association (2018) Risk Adjustments Insurance Contracts IFRS 17","code":""},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"Eric Dal Moro, Yuriy Krvavych","code":""},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"use Fleishman polynomials Cornish-Fisher expansion imply different risks involved triangles inputs \"close normality\". risks involved input triangles far normal distributions (e.g. extreme events, nat cats ...), proposed framework apply quantile derived function relevant.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/QuantileIFRS17.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile estimation for the IFRS 17 Risk Adjustment — QuantileIFRS17","text":"","code":"QuantileIFRS17(MCL=list(M1=MackChainLadder(RAA, est.sigma = \"Mack\"),           M2=MackChainLadder(GenIns/1000, est.sigma = \"Mack\")),           Correlation=matrix(c(1,0.3, 0.3, 1), ncol=2),           RiskMargin = 20000) #> QuantileIFRS_17             CoV        Skewness         Reserve  #>    7.871247e-01    3.912851e-01    1.225958e+00    7.081608e+04"},{"path":"http://mages.github.io/ChainLadder/reference/RAA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of accumulated claims data — RAA","title":"Run off triangle of accumulated claims data — RAA","text":"Run-triangle Automatic Factultative business General Liability","code":""},{"path":"http://mages.github.io/ChainLadder/reference/RAA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of accumulated claims data — RAA","text":"","code":"data(RAA)"},{"path":"http://mages.github.io/ChainLadder/reference/RAA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of accumulated claims data — RAA","text":"matrix 10 accident years 10 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/RAA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of accumulated claims data — RAA","text":"Historical Loss Development, Reinsurance Association Ammerica     (RAA), 1991, p.96","code":""},{"path":"http://mages.github.io/ChainLadder/reference/RAA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run off triangle of accumulated claims data — RAA","text":"See Also: \t\tStochastic Model Underlying   Chain Ladder Method?, Thomas Mack, Insurance\t     Mathematics Economics,  15, 2/3, pp133-138, 1994 P.D.England R.J.Verrall, Stochastic Claims Reserving     General Insurance, British Actuarial Journal, Vol. 8,   pp443-544, 2002","code":""},{"path":"http://mages.github.io/ChainLadder/reference/RAA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of accumulated claims data — RAA","text":"","code":"RAA #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834 #>   1982  106  4285  5396 10666 13782 15599 15496 16169 16704    NA #>   1983 3410  8992 13873 16141 18735 22214 22863 23466    NA    NA #>   1984 5655 11555 15766 21266 23425 26083 27067    NA    NA    NA #>   1985 1092  9565 15836 22169 25955 26180    NA    NA    NA    NA #>   1986 1513  6445 11702 12935 15852    NA    NA    NA    NA    NA #>   1987  557  4020 10946 12314    NA    NA    NA    NA    NA    NA #>   1988 1351  6947 13112    NA    NA    NA    NA    NA    NA    NA #>   1989 3133  5395    NA    NA    NA    NA    NA    NA    NA    NA #>   1990 2063    NA    NA    NA    NA    NA    NA    NA    NA    NA plot(RAA)  plot(RAA, lattice=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic functions for triangles — triangle S3 Methods","title":"Generic functions for triangles — triangle S3 Methods","text":"Functions ease work triangle shaped matrix data.   'triangle' matrix generic functions. triangle creates triangle given set vectors   observed data. .triangle attempts turn argument triangle.   Triangles usually stored “long” format data bases.   function can transform data.frame triangle shape. .data.frame turns triangle data frame.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic functions for triangles — triangle S3 Methods","text":"","code":"triangle(..., bycol=FALSE, origin=\"origin\", dev=\"dev\", value=\"value\")  # S3 method for class 'matrix' as.triangle(Triangle, origin=\"origin\", dev=\"dev\", value=\"value\", ...) # S3 method for class 'data.frame' as.triangle(Triangle, origin=\"origin\", dev=\"dev\", value=\"value\", ...) # S3 method for class 'triangle' as.data.frame(x, row.names=NULL, optional, lob=NULL, na.rm=FALSE, ...) as.triangle(Triangle, origin=\"origin\", dev=\"dev\", value=\"value\", ...) # S3 method for class 'triangle' plot(x, type = \"b\", xlab = \"dev. period\", ylab = NULL, lattice=FALSE, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic functions for triangles — triangle S3 Methods","text":"Triangle triangle bycol logical. FALSE (default) triangle filled     rows, otherwise triangle filled columns. origin name origin period, default \"origin\". dev name development period, default \"dev\". value name value, default \"value\". row.names default set NULL merge origin     dev. period create row names. lob default NULL. idea use lob (line     business) additional column label triangle long format, see     examples details. optional used na.rm logical. Remove missing values? x matrix class 'triangle'  xlab label x axis, defaults 'dev. period' ylab label y axis, defaults NULL lattice logical. FALSE function     matplot used plot developments     triangle one graph, otherwise xyplot function     lattice package used, plot developments origin     period different panel. type type, see plot.default ... vectors data triangle, see details;     arguments passed methods everywhere else.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic functions for triangles — triangle S3 Methods","text":"Function triangle builds triangle matrix vectors   known data provided .... Normally,   vectors one shorter preceeding one. length   first vector dictates number development periods origin   periods (respectively bycol FALSE   TRUE). special case, function build \\(n     \\times n\\) triangle single vector \\(n(n + 1)/2\\) data   points. names arguments ... function   triangle (one) retained   row/column names. Similarly, names elements   first argument used column/row names.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic functions for triangles — triangle S3 Methods","text":"Markus Gesmann, Dan Murphy, Vincent Goulet","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Generic functions for triangles — triangle S3 Methods","text":"Please note function .triangle origin dev. period columns type numeric character can converted numeric. Also note converting data.frame matrix .triangle, multiple records origin dev aggregated.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/Triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic functions for triangles — triangle S3 Methods","text":"","code":"GenIns #>       dev #> origin      1       2       3       4       5       6       7       8       9 #>     1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>     2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>     3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>     4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>     5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>     6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>     7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>     8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>     9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>     10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>       dev #> origin      10 #>     1  3901463 #>     2       NA #>     3       NA #>     4       NA #>     5       NA #>     6       NA #>     7       NA #>     8       NA #>     9       NA #>     10      NA plot(GenIns)  plot(GenIns, lattice=TRUE)    ## Convert long format into triangle ## Triangles are usually stored as 'long' tables in data bases head(GenInsLong) #>   accyear devyear incurred claims #> 1       1       1          357848 #> 2       2       1          352118 #> 3       3       1          290507 #> 4       4       1          310608 #> 5       5       1          443160 #> 6       6       1          396132 as.triangle(GenInsLong, origin=\"accyear\", dev=\"devyear\", \"incurred claims\") #>        devyear #> accyear      1       2       3       4       5       6       7       8       9 #>      1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>      2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>      3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>      4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>      5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>      6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>      7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>      8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>      9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>      10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>        devyear #> accyear      10 #>      1  3901463 #>      2       NA #>      3       NA #>      4       NA #>      5       NA #>      6       NA #>      7       NA #>      8       NA #>      9       NA #>      10      NA  X <- as.data.frame(RAA) head(X) #>        origin dev value #> 1981-1   1981   1  5012 #> 1982-1   1982   1   106 #> 1983-1   1983   1  3410 #> 1984-1   1984   1  5655 #> 1985-1   1985   1  1092 #> 1986-1   1986   1  1513  Y <- as.data.frame(RAA, lob=\"General Liability\") head(Y) #>        origin dev value               lob #> 1981-1   1981   1  5012 General Liability #> 1982-1   1982   1   106 General Liability #> 1983-1   1983   1  3410 General Liability #> 1984-1   1984   1  5655 General Liability #> 1985-1   1985   1  1092 General Liability #> 1986-1   1986   1  1513 General Liability  ## Basic creation of a triangle from loss development data triangle(c(100, 150, 175, 180, 200),          c(110, 168, 192, 205),          c(115, 169, 202),          c(125, 185),          150) #>       dev #> origin   1   2   3   4   5 #>      1 100 150 175 180 200 #>      2 110 168 192 205  NA #>      3 115 169 202  NA  NA #>      4 125 185  NA  NA  NA #>      5 150  NA  NA  NA  NA  ## Same, with named origin periods triangle(\"2012\" = c(100, 150, 175, 180, 200),          \"2013\" = c(110, 168, 192, 205),          \"2014\" = c(115, 169, 202),          \"2015\" = c(125, 185),          \"2016\" = 150) #>       dev #> origin   1   2   3   4   5 #>   2012 100 150 175 180 200 #>   2013 110 168 192 205  NA #>   2014 115 169 202  NA  NA #>   2015 125 185  NA  NA  NA #>   2016 150  NA  NA  NA  NA  ## Again, with also named development periods triangle(\"2012\" = c(\"12 months\" = 100,                     \"24 months\" = 150,                     \"36 months\" = 175,                     \"48 months\" = 180,                     \"60 months\" = 200),          \"2013\" = c(110, 168, 192, 205),          \"2014\" = c(115, 169, 202),          \"2015\" = c(125, 185),          \"2016\" = 150) #>       dev #> origin 12 months 24 months 36 months 48 months 60 months #>   2012       100       150       175       180       200 #>   2013       110       168       192       205        NA #>   2014       115       169       202        NA        NA #>   2015       125       185        NA        NA        NA #>   2016       150        NA        NA        NA        NA  ## Quick, simplified usage triangle(c(100, 150, 175, 110, 168, 115)) #>       dev #> origin   1   2   3 #>      1 100 150 175 #>      2 110 168  NA #>      3 115  NA  NA"},{"path":"http://mages.github.io/ChainLadder/reference/UKMotor.html","id":null,"dir":"Reference","previous_headings":"","what":"UK motor claims triangle — UKMotor","title":"UK motor claims triangle — UKMotor","text":"Triangle cumulative claims payments four origin (accident) years time (development years).","code":""},{"path":"http://mages.github.io/ChainLadder/reference/UKMotor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK motor claims triangle — UKMotor","text":"","code":"data(\"UKMotor\")"},{"path":"http://mages.github.io/ChainLadder/reference/UKMotor.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK motor claims triangle — UKMotor","text":"matrix 7 accident years 7 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/UKMotor.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK motor claims triangle — UKMotor","text":"https://www.actuaries.org.uk/system/files/documents/pdf/crm2-D5.pdf","code":""},{"path":"http://mages.github.io/ChainLadder/reference/UKMotor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"UK motor claims triangle — UKMotor","text":"Stavros Christofides. Regression models based log-incremental payments. Claims Reserving Manual. Volume 2 D5. September 1997","code":""},{"path":"http://mages.github.io/ChainLadder/reference/UKMotor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UK motor claims triangle — UKMotor","text":"","code":"data(UKMotor) plot(UKMotor)  MackChainLadder(UKMotor, est.sigma=\"Mack\") #> MackChainLadder(Triangle = UKMotor, est.sigma = \"Mack\") #>  #>      Latest Dev.To.Date Ultimate   IBNR Mack.S.E CV(IBNR) #> 2007 12,690       1.000   12,690      0     0.00      NaN #> 2008 12,746       0.973   13,097    351     3.62   0.0103 #> 2009 12,993       0.926   14,031  1,038    22.90   0.0221 #> 2010 11,093       0.844   13,138  2,045   141.98   0.0694 #> 2011 10,217       0.736   13,880  3,663   426.70   0.1165 #> 2012  9,650       0.574   16,812  7,162   692.39   0.0967 #> 2013  6,283       0.304   20,680 14,397   900.58   0.0626 #>  #>               Totals #> Latest:    75,672.00 #> Dev:            0.73 #> Ultimate: 104,327.77 #> IBNR:      28,655.77 #> Mack.S.E    1,417.27 #> CV(IBNR):       0.05"},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":null,"dir":"Reference","previous_headings":"","what":"Example paid and incurred triangle data from CAS web site. — USAA triangle","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"Paid incurred triangle data United Services Automobile Association company private passenger auto liability/medical line business.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"","code":"data(\"USAApaid\")"},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"triangle 10 accident years 10 development years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"claims data comes Schedule P - Analysis Losses Loss Expenses National Association Insurance Commissioners (NAIC) database. CAS obtained permission NAIC make data available interested researchers CAS website. NAIC Schedule P contains information claims major personal commercial lines property-casualty insurers write business US.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"https://www.casact.org","code":""},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"CAS website.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/USAA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example paid and incurred triangle data from CAS web site. — USAA triangle","text":"","code":"data(USAApaid)"},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Triangle from wide to long — as.LongTriangle","title":"Convert Triangle from wide to long — as.LongTriangle","text":"Given Triangle matrix (\"wide\") format, convert data.frame (\"long\") format.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Triangle from wide to long — as.LongTriangle","text":"","code":"as.LongTriangle(Triangle, varnames = names(dimnames(Triangle)),                  value.name = \"value\", na.rm = TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Triangle from wide to long — as.LongTriangle","text":"Triangle loss \"triangle\". Must matrix. varnames character names columns store     rownames colnames matrix Triangle.     Defaults names(dimnames(Triangle)) available.     provided, uses c(\"origin\", \"dev\"). value.name column name given matrix     values stored data.frame.     Defaults \"value\". na.rm NA values excluded data.frame?     Defaults TRUE.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Triangle from wide to long — as.LongTriangle","text":"Unlike .data.frame.triangle method, Unlike 'melt' method 'reshape2' package, function returns data.frame rownames colnames Triangle stored factors. can critical feature order levels columns important. example, Triangle plotted, order origin dev dimensions important. See Examples section.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Triangle from wide to long — as.LongTriangle","text":"data.frame.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Triangle from wide to long — as.LongTriangle","text":"Daniel Murphy","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/as.LongTriangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Triangle from wide to long — as.LongTriangle","text":"","code":"as.LongTriangle(GenIns) #>    origin dev   value #> 1       1   1  357848 #> 2       2   1  352118 #> 3       3   1  290507 #> 4       4   1  310608 #> 5       5   1  443160 #> 6       6   1  396132 #> 7       7   1  440832 #> 8       8   1  359480 #> 9       9   1  376686 #> 10     10   1  344014 #> 11      1   2 1124788 #> 12      2   2 1236139 #> 13      3   2 1292306 #> 14      4   2 1418858 #> 15      5   2 1136350 #> 16      6   2 1333217 #> 17      7   2 1288463 #> 18      8   2 1421128 #> 19      9   2 1363294 #> 21      1   3 1735330 #> 22      2   3 2170033 #> 23      3   3 2218525 #> 24      4   3 2195047 #> 25      5   3 2128333 #> 26      6   3 2180715 #> 27      7   3 2419861 #> 28      8   3 2864498 #> 31      1   4 2218270 #> 32      2   4 3353322 #> 33      3   4 3235179 #> 34      4   4 3757447 #> 35      5   4 2897821 #> 36      6   4 2985752 #> 37      7   4 3483130 #> 41      1   5 2745596 #> 42      2   5 3799067 #> 43      3   5 3985995 #> 44      4   5 4029929 #> 45      5   5 3402672 #> 46      6   5 3691712 #> 51      1   6 3319994 #> 52      2   6 4120063 #> 53      3   6 4132918 #> 54      4   6 4381982 #> 55      5   6 3873311 #> 61      1   7 3466336 #> 62      2   7 4647867 #> 63      3   7 4628910 #> 64      4   7 4588268 #> 71      1   8 3606286 #> 72      2   8 4914039 #> 73      3   8 4909315 #> 81      1   9 3833515 #> 82      2   9 5339085 #> 91      1  10 3901463 if (FALSE) { # \\dontrun{ ggplot(as.LongTriangle(GenIns),         aes(x = dev, y = value, group = origin, color = origin)) + geom_line() } # }"},{"path":"http://mages.github.io/ChainLadder/reference/auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of accumulated claim data — auto","title":"Run off triangle of accumulated claim data — auto","text":"Run-triangles Personal Auto Commercial Auto insurance.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of accumulated claim data — auto","text":"","code":"data(auto)"},{"path":"http://mages.github.io/ChainLadder/reference/auto.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of accumulated claim data — auto","text":"list three matrices, paid Personal Auto, incurred Personal Auto paid Commercial Auto respectively.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/auto.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of accumulated claim data — auto","text":"Zhang (2010). general multivariate chain ladder model. Insurance: Mathematics Economics, 46, pp. 588-599.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of accumulated claim data — auto","text":"","code":"data(auto) names(auto) #> [1] \"PersonalAutoPaid\"     \"PersonalAutoIncurred\" \"CommercialAutoPaid\""},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate age-to-age factors — chainladder","title":"Estimate age-to-age factors — chainladder","text":"Basic chain-ladder function estimate age--age factors given cumulative run-triangle. function used Mack- MunichChainLadder.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate age-to-age factors — chainladder","text":"","code":"chainladder(Triangle, weights = 1, delta = 1)"},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate age-to-age factors — chainladder","text":"Triangle cumulative claims triangle.  (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g annual). weights weights. Default: 1, sets weights     triangle entries 1. Otherwise specify weights matrix     dimension Triangle weight entries [0; 1], entry     \\(w_{,k}\\) corresponds point \\(C_{,k+1}/C_{,k}\\).     Hence, entry set 0 NA eliminates age--age factor     inclusion model. See also 'Details'. delta 'weighting' parameters. Default: 1;     delta=1 gives historical chain-ladder age--age factors,     delta=2 gives straight average     observed individual development factors delta=0 result     ordinary regression \\(C_{,k+1}\\) \\(C_{,k}\\)     intercept 0, see Barnett & Zehnwirth (2000). Please note MackChainLadder uses argument alpha,     alpha = 2 - delta, following original paper Mack (1999)","code":""},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate age-to-age factors — chainladder","text":"key idea see chain-ladder algorithm special form   weighted linear regression origin, applied development   period. Suppose y vector cumulative claims development period   +1, x development period , weights   weighting factors F individual age--age factors F=y/x.   get various age--age factors: Basic (unweighted) linear regression origin:     lm(y~x + 0) Basic weighted linear regression origin:     lm(y~x + 0, weights=weights) Volume weighted chain-ladder age--age factors:   lm(y~x + 0, weights=1/x) Simple average age--age factors:   lm(y~x + 0, weights=1/x^2) Barnett & Zehnwirth (2000) use delta = 0, 1, 2 distinguish three different regression approaches: lm(y~x + 0, weights=weights/x^delta). Thomas Mack uses notation alpha = 2 - delta achieve result: sum(weights*x^alpha*F)/sum(weights*x^alpha) # Mack (1999) notation","code":""},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate age-to-age factors — chainladder","text":"chainladder returns list following elements: Models linear regression models development period Triangle input triangle cumulative claims weights weights used delta deltas used","code":""},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate age-to-age factors — chainladder","text":"Thomas Mack. standard error chain ladder reserve estimates: Recursive calculation inclusion tail factor. Astin Bulletin. Vol. 29. 2. 1999. pp.361:366 G. Barnett B. Zehnwirth. Best Estimates   Reserves. Proceedings CAS. Volume LXXXVII. Number 167. November 2000.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate age-to-age factors — chainladder","text":"Markus Gesmann <markus.gesmann@gmail.com>","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/chainladder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate age-to-age factors — chainladder","text":"","code":"## Concept of different chain-ladder age-to-age factors. ## Compare Mack's and Barnett & Zehnwirth's papers. x <- RAA[1:9,1] y <- RAA[1:9,2]  F <- y/x ## wtd. average chain-ladder age-to-age factors alpha <- 1 ## Mack notation delta <- 2 - alpha ## Barnett & Zehnwirth notation  sum(x^alpha*F)/sum(x^alpha) #> [1] 2.999359 lm(y~x + 0 ,weights=1/x^delta) #>  #> Call: #> lm(formula = y ~ x + 0, weights = 1/x^delta) #>  #> Coefficients: #>     x   #> 2.999   #>  summary(chainladder(RAA, delta=delta)$Models[[1]])$coef #>   Estimate Std. Error  t value   Pr(>|t|) #> x 2.999359   1.130203 2.653822 0.02908283  ## straight average age-to-age factors alpha <- 0 delta <- 2 - alpha  sum(x^alpha*F)/sum(x^alpha) #> [1] 8.206099 lm(y~x + 0, weights=1/x^(2-alpha)) #>  #> Call: #> lm(formula = y ~ x + 0, weights = 1/x^(2 - alpha)) #>  #> Coefficients: #>     x   #> 8.206   #>  summary(chainladder(RAA, delta=delta)$Models[[1]])$coef #>   Estimate Std. Error  t value   Pr(>|t|) #> x 8.206099   4.113487 1.994925 0.08115167  ## ordinary regression age-to-age factors alpha=2 delta <- 2-alpha sum(x^alpha*F)/sum(x^alpha) #> [1] 2.217241 lm(y~x + 0, weights=1/x^delta) #>  #> Call: #> lm(formula = y ~ x + 0, weights = 1/x^delta) #>  #> Coefficients: #>     x   #> 2.217   #>  summary(chainladder(RAA, delta=delta)$Models[[1]])$coef #>   Estimate Std. Error  t value     Pr(>|t|) #> x 2.217241  0.4112176 5.391893 0.0006522995  ## Compare different models CL0 <- chainladder(RAA) ## age-to-age factors sapply(CL0$Models, function(x) summary(x)$coef[\"x\",\"Estimate\"]) #> [1] 2.999359 1.623523 1.270888 1.171675 1.113385 1.041935 1.033264 1.016936 #> [9] 1.009217 ## f.se sapply(CL0$Models, function(x) summary(x)$coef[\"x\",\"Std. Error\"]) #> [1] 1.130203277 0.135836119 0.090498216 0.025389927 0.035376679 0.022577813 #> [7] 0.004881918 0.015055851         NaN ## sigma sapply(CL0$Models, function(x) summary(x)$sigma) #> [1] 166.983470  33.294538  26.295300   7.824960  10.928818   6.389042   1.159062 #> [8]   2.807704        NaN predict(CL0) #>       dev #> origin    1         2         3        4        5        6        7        8 #>   1981 5012  8269.000 10907.000 11805.00 13539.00 16181.00 18009.00 18608.00 #>   1982  106  4285.000  5396.000 10666.00 13782.00 15599.00 15496.00 16169.00 #>   1983 3410  8992.000 13873.000 16141.00 18735.00 22214.00 22863.00 23466.00 #>   1984 5655 11555.000 15766.000 21266.00 23425.00 26083.00 27067.00 27967.34 #>   1985 1092  9565.000 15836.000 22169.00 25955.00 26180.00 27277.85 28185.21 #>   1986 1513  6445.000 11702.000 12935.00 15852.00 17649.38 18389.50 19001.20 #>   1987  557  4020.000 10946.000 12314.00 14428.00 16063.92 16737.55 17294.30 #>   1988 1351  6947.000 13112.000 16663.88 19524.65 21738.45 22650.05 23403.47 #>   1989 3133  5395.000  8758.905 11131.59 13042.60 14521.43 15130.38 15633.68 #>   1990 2063  6187.677 10045.834 12767.13 14958.92 16655.04 17353.46 17930.70 #>       dev #> origin        9       10 #>   1981 18662.00 18834.00 #>   1982 16704.00 16857.95 #>   1983 23863.43 24083.37 #>   1984 28441.01 28703.14 #>   1985 28662.57 28926.74 #>   1986 19323.01 19501.10 #>   1987 17587.21 17749.30 #>   1988 23799.84 24019.19 #>   1989 15898.45 16044.98 #>   1990 18234.38 18402.44  CL1 <- chainladder(RAA, delta=1) ## age-to-age factors sapply(CL1$Models, function(x) summary(x)$coef[\"x\",\"Estimate\"]) #> [1] 2.999359 1.623523 1.270888 1.171675 1.113385 1.041935 1.033264 1.016936 #> [9] 1.009217 ## f.se sapply(CL1$Models, function(x) summary(x)$coef[\"x\",\"Std. Error\"]) #> [1] 1.130203277 0.135836119 0.090498216 0.025389927 0.035376679 0.022577813 #> [7] 0.004881918 0.015055851         NaN ## sigma sapply(CL1$Models, function(x) summary(x)$sigma) #> [1] 166.983470  33.294538  26.295300   7.824960  10.928818   6.389042   1.159062 #> [8]   2.807704        NaN predict(CL1) #>       dev #> origin    1         2         3        4        5        6        7        8 #>   1981 5012  8269.000 10907.000 11805.00 13539.00 16181.00 18009.00 18608.00 #>   1982  106  4285.000  5396.000 10666.00 13782.00 15599.00 15496.00 16169.00 #>   1983 3410  8992.000 13873.000 16141.00 18735.00 22214.00 22863.00 23466.00 #>   1984 5655 11555.000 15766.000 21266.00 23425.00 26083.00 27067.00 27967.34 #>   1985 1092  9565.000 15836.000 22169.00 25955.00 26180.00 27277.85 28185.21 #>   1986 1513  6445.000 11702.000 12935.00 15852.00 17649.38 18389.50 19001.20 #>   1987  557  4020.000 10946.000 12314.00 14428.00 16063.92 16737.55 17294.30 #>   1988 1351  6947.000 13112.000 16663.88 19524.65 21738.45 22650.05 23403.47 #>   1989 3133  5395.000  8758.905 11131.59 13042.60 14521.43 15130.38 15633.68 #>   1990 2063  6187.677 10045.834 12767.13 14958.92 16655.04 17353.46 17930.70 #>       dev #> origin        9       10 #>   1981 18662.00 18834.00 #>   1982 16704.00 16857.95 #>   1983 23863.43 24083.37 #>   1984 28441.01 28703.14 #>   1985 28662.57 28926.74 #>   1986 19323.01 19501.10 #>   1987 17587.21 17749.30 #>   1988 23799.84 24019.19 #>   1989 15898.45 16044.98 #>   1990 18234.38 18402.44  CL2 <- chainladder(RAA, delta=2) ## age-to-age factors sapply(CL2$Models, function(x) summary(x)$coef[\"x\",\"Estimate\"]) #> [1] 8.206099 1.695894 1.314510 1.182926 1.126962 1.043328 1.034355 1.017995 #> [9] 1.009217 ## f.se sapply(CL2$Models, function(x) summary(x)$coef[\"x\",\"Std. Error\"]) #> [1] 4.113487235 0.167616428 0.119849168 0.027269226 0.033389333 0.025122915 #> [7] 0.004953969 0.015093015         NaN ## sigma sapply(CL2$Models, function(x) summary(x)$sigma) #> [1] 12.340461705  0.474090850  0.317091093  0.066795689  0.074660819 #> [6]  0.050245830  0.008580526  0.021344747          NaN predict(CL2) #>       dev #> origin    1        2         3        4        5        6        7        8 #>   1981 5012  8269.00 10907.000 11805.00 13539.00 16181.00 18009.00 18608.00 #>   1982  106  4285.00  5396.000 10666.00 13782.00 15599.00 15496.00 16169.00 #>   1983 3410  8992.00 13873.000 16141.00 18735.00 22214.00 22863.00 23466.00 #>   1984 5655 11555.00 15766.000 21266.00 23425.00 26083.00 27067.00 27996.90 #>   1985 1092  9565.00 15836.000 22169.00 25955.00 26180.00 27314.32 28252.71 #>   1986 1513  6445.00 11702.000 12935.00 15852.00 17864.61 18638.64 19278.97 #>   1987  557  4020.00 10946.000 12314.00 14566.55 16415.95 17127.21 17715.62 #>   1988 1351  6947.00 13112.000 17235.86 20388.74 22977.34 23972.89 24796.49 #>   1989 3133  5395.00  9149.351 12026.92 14226.95 16033.23 16727.91 17302.61 #>   1990 2063 16929.18 28710.107 37739.73 44643.30 50311.31 52491.18 54294.53 #>       dev #> origin        9       10 #>   1981 18662.00 18834.00 #>   1982 16704.00 16857.95 #>   1983 23888.27 24108.44 #>   1984 28500.70 28763.38 #>   1985 28761.12 29026.20 #>   1986 19625.90 19806.78 #>   1987 18034.42 18200.63 #>   1988 25242.70 25475.36 #>   1989 17613.97 17776.31 #>   1990 55271.56 55780.98  ## Set 'weights' parameter to use only the last 5 diagonals,  ## i.e. the last 5 calendar years calPeriods <- (row(RAA) + col(RAA) - 1) (weights <- ifelse(calPeriods <= 5, 0, ifelse(calPeriods > 10, NA, 1))) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    1    1    1    1     1 #>  [2,]    0    0    0    0    1    1    1    1    1    NA #>  [3,]    0    0    0    1    1    1    1    1   NA    NA #>  [4,]    0    0    1    1    1    1    1   NA   NA    NA #>  [5,]    0    1    1    1    1    1   NA   NA   NA    NA #>  [6,]    1    1    1    1    1   NA   NA   NA   NA    NA #>  [7,]    1    1    1    1   NA   NA   NA   NA   NA    NA #>  [8,]    1    1    1   NA   NA   NA   NA   NA   NA    NA #>  [9,]    1    1   NA   NA   NA   NA   NA   NA   NA    NA #> [10,]    1   NA   NA   NA   NA   NA   NA   NA   NA    NA CL3 <- chainladder(RAA, weights=weights) summary(CL3$Models[[1]])$coef #>   Estimate Std. Error  t value   Pr(>|t|) #> x  3.47986   1.060538 3.281222 0.04638316 predict(CL3) #>       dev #> origin    1        2        3        4        5        6        7        8 #>   1981 5012  8269.00 10907.00 11805.00 13539.00 16181.00 18009.00 18608.00 #>   1982  106  4285.00  5396.00 10666.00 13782.00 15599.00 15496.00 16169.00 #>   1983 3410  8992.00 13873.00 16141.00 18735.00 22214.00 22863.00 23466.00 #>   1984 5655 11555.00 15766.00 21266.00 23425.00 26083.00 27067.00 27967.34 #>   1985 1092  9565.00 15836.00 22169.00 25955.00 26180.00 27277.85 28185.21 #>   1986 1513  6445.00 11702.00 12935.00 15852.00 17435.13 18166.26 18770.54 #>   1987  557  4020.00 10946.00 12314.00 14259.49 15683.57 16341.26 16884.83 #>   1988 1351  6947.00 13112.00 16600.64 19223.37 21143.20 22029.83 22762.62 #>   1989 3133  5395.00 10318.43 13063.80 15127.75 16638.55 17336.28 17912.95 #>   1990 2063  7178.95 13730.40 17383.58 20130.01 22140.38 23068.83 23836.18 #>       dev #> origin        9       10 #>   1981 18662.00 18834.00 #>   1982 16704.00 16857.95 #>   1983 23863.43 24083.37 #>   1984 28441.01 28703.14 #>   1985 28662.57 28926.74 #>   1986 19088.45 19264.38 #>   1987 17170.80 17329.05 #>   1988 23148.14 23361.48 #>   1989 18216.33 18384.22 #>   1990 24239.88 24463.29"},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"Check Year--Year Inflation rates columns run-triangle","code":""},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"","code":"checkTriangleInflation(Triangle)"},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"Triangle average claim amounts triangle. Assume columns development     period, use transpose otherwise.     (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g accident years).","code":""},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"sensitivity projections ultimate losses based incurred loss   development factors changes adequacy level case reserves increases   significantly long-tail lines. particular, adequacy case reserve   changing, estimates ultimate losses based reported claims severely distorted. function fits exponential inflation model takes form : $$Y=*(1+b)^x$$ \\(Y\\) represents inflated claim amount, \\(\\) represents claim amount beginning period (e.g. AY=0), \\(b\\) inflation rate  \\(x\\) time (e.g. AY). Fitting model average level case outstanding (average claim amount) development period, possible appreciate inflation rate affected average case reserve. necessary check inflation average amounts, otherwise estimates may distorted due increase number claims rather actual increase inflation level. level inflation material, necessary adjust cell triangle.   diagonal triangle level latest diagonal (.e. latest valuation). adjustment prevent distortions estimates caused inflation actual variations claim experience.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"checkTriangleInflation returns list following elements Triangle Input triangle summ_table summary table showing inflation rate, \\(R^2\\) regression number points used","code":""},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"Berquist, J.R. Sherman, R.E., Loss Reserve Adequacy Testing: Comprehensive,   Systematic Approach, Proceedings Casualty Actuarial Society, LXIV, 1977, pp.123-184.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/checkTriangleInflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Y-o-Y Triangle Inflation Rates — checkTriangleInflation","text":"","code":"# Create a triangle of average outstanding claims as the ratio between O/S Claims  # and Open Claims (i.e. the number of outstanding claims) avg <- MedMal$MedMalOutstanding / MedMal$MedMalOpen  # Check the level of average inflation Y-o-Y test<-checkTriangleInflation(avg)  # Plot the results # A model of exponential inflation fits quite well the level of average O/S claims # This is particularly evident for DP 1,2,3 plot(test)   # Get the summary in an analytical way to observe the ratios and the number of points used summary(test) #>                1         2         3         4         5         6        7 #> rate   0.1561905 0.2949749 0.3110902 0.3417400 0.3296170 0.3216367 0.276155 #> R2     0.7995755 0.8946321 0.8578738 0.9405004 0.9887844 0.9831351 1.000000 #> Points 8.0000000 7.0000000 6.0000000 5.0000000 4.0000000 3.0000000 2.000000  # Print the output print(test)  #> Triangle Inflation Calculation #>  #>                1         2         3         4         5         6        7 #> rate   0.1561905 0.2949749 0.3110902 0.3417400 0.3296170 0.3216367 0.276155 #> R2     0.7995755 0.8946321 0.8578738 0.9405004 0.9887844 0.9831351 1.000000 #> Points 8.0000000 7.0000000 6.0000000 5.0000000 4.0000000 3.0000000 2.000000 # There is an inflation level equal to .15 at the first development period. It would be  # appropriate to adjust the triangle before proceeding with any estimate method."},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing for Calendar Year Effect — cyEffTest","title":"Testing for Calendar Year Effect — cyEffTest","text":"One three basic assumptions underlying chain ladder   method independence accident years.   function tests assumption.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing for Calendar Year Effect — cyEffTest","text":"","code":"cyEffTest(Triangle, ci = 0.95)"},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Testing for Calendar Year Effect — cyEffTest","text":"Triangle cumulative claims triangle.  Assume columns development     period, use transpose otherwise.     (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g accident years). ci confidence interval. Default: .95. confidence interval   type interval estimate, computed statis tics observed data,   might contain true value unknown population parameter.   interval associated confidence level quantifies   level confidence parameter lies interval.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Testing for Calendar Year Effect — cyEffTest","text":"main reason independence can violated practice fact certain calendar year effects major changes claims handling case reserving external influences substantial changes court decisions inflation. described Mack's 1994 paper procedure designed test calendar year influences. procedure returns summary statistic \\(Z\\) assumed Normally Distributed. therefore possible define confidence interval threshold order evaluate outcome test.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Testing for Calendar Year Effect — cyEffTest","text":"cyEffTest returns list following elements test_table complete table results Z summary statistic E expected value resulting distribution Var variance resulting distribution Range vector range corresponding confidence interval threshold selected ci confidence interval","code":""},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Testing for Calendar Year Effect — cyEffTest","text":"Mack, T., Measuring Variability Chain Ladder Reserve Estimates, Casualty Actuarial Society Forum, Spring 1994","code":""},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Testing for Calendar Year Effect — cyEffTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Testing for Calendar Year Effect — cyEffTest","text":"Additional references reading: Thomas Mack. Distribution-free calculation standard error chain ladder reserve estimates. Astin Bulletin. Vol. 23. 2. 1993. pp.213:225 Thomas Mack. standard error chain ladder reserve estimates: Recursive calculation inclusion tail factor. Astin Bulletin. Vol. 29. 2. 1999. pp.361:366","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/cyEffTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Testing for Calendar Year Effect — cyEffTest","text":"","code":"# Before actually applying the Chain Ladder technique it is necessary to check # wether the triangle has Calendar Year Effect  # Apply the function to the triangle and save the output into the variable test test <- cyEffTest(RAA)  # Plot the confidence interval and the test metric plot(test)   # The metric is within the confidence interval, therefore the triangle doesn't # have Calendar Year Effect  # Print the summary table summary(test) #> $Table #>   j S_j L_j Z_j n m    E_Zj    Var_Zj #> 1 2   1   1   1 2 0 0.50000 0.2500000 #> 2 3   3   0   0 3 1 0.75000 0.1875000 #> 3 4   3   1   1 4 1 1.25000 0.4375000 #> 4 5   1   3   1 4 1 1.25000 0.4375000 #> 5 6   1   3   1 4 1 1.25000 0.4375000 #> 6 7   2   4   2 6 2 2.06250 0.6210938 #> 7 8   4   4   4 8 3 2.90625 0.8037109 #> 8 9   4   4   4 8 3 2.90625 0.8037109 #>  #> $Totals #>           Totals #> Z      14.000000 #> E[Z]   12.875000 #> Var[Z]  3.978516 #>  #> $Range #>           Value #> Lower  8.965613 #> Upper 16.784387 #>   # Print only the main outcomes print(test) #> Calendar Year Effect #>  #> Z = 14 #>  #> 95%-Range = ( 8.965613 ; 16.78439 ) #>  #> Calendar Year Effect: FALSE # The test has returned a negative outcome. This means that the triangle is  # not affected by Caledar Year Effect and therefore the chain ladder method  # can be applied."},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing for Correlations between Subsequent Development Factors — dfCorTest","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"One main assumptions underlying chain ladder   method uncorrelation subsequest development factor.   function tests assumption.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"","code":"dfCorTest(Triangle, ci = .5)"},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"Triangle cumulative claims triangle.  Assume columns development     period, use transpose otherwise.     (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g accident years). ci confidence interval. Default: .5. confidence interval   type interval estimate, computed statis tics observed data,   might contain true value unknown population parameter.   interval associated confidence level quantifies   level confidence parameter lies interval.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"described Mack's 1994 paper procedure designed test calendar year influences. usual test uncorrelatedness requires identically distributed pairs observations come  Normal distribution. conditions usually fulfilled adjacent columns development factors. Spearman's correlation coefficient therefore used. metric calulated procudeure described return statistic \\(T\\) assumed Normally Distributed. therefore possible define confidence interval threshold order evaluate outcome test.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"dfCorTest returns list following elements T_stat summary statistic Var variance resulting distribution Range vector range corresponding confidence interval threshold selected ci confidence interval","code":""},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"Mack, T., Measuring Variability Chain Ladder Reserve Estimates, Casualty Actuarial Society Forum, Spring 1994","code":""},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"Additional references reading: Thomas Mack. Distribution-free calculation standard error chain ladder reserve estimates. Astin Bulletin. Vol. 23. 2. 1993. pp.213:225 Thomas Mack. standard error chain ladder reserve estimates: Recursive calculation inclusion tail factor. Astin Bulletin. Vol. 29. 2. 1999. pp.361:366 Venter, G.G., Testing Assumptions Age--Age Factors, Proceedings Casualty Actuarial Society LXXXV, 1998, pp. 807-847","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/dfCorTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Testing for Correlations between Subsequent Development Factors — dfCorTest","text":"","code":"# Before actually applying the Chain Ladder technique it is necessary to check # whether the Development Factors are correlated  # Apply the function to the triangle and save the output into the variable test test <- dfCorTest(RAA)  # Plot the confidence interval and the test metric plot(test)   # The metric is within the confidence interval, therefore the Development Factors are nor correlated  # Print the summary table summary(test) #> $Results #>             Value #> T      0.06955782 #> E[T]   0.00000000 #> Var[T] 0.03571429 #>  #> $Range #>            Value #> Lower -0.1274666 #> Upper  0.1274666 #>   # Print only the main outcomes print(test) #> Development Factor Correlation #>  #> T = 0.06955782 #>  #> 50%-Range = ( -0.1274666 ; 0.1274666 ) #>  #> Development Factor Correlation: FALSE # The test has returned a negative outcome. This means that the triangle is  # not affected by Development Factor Correlation and therefore the chain ladder method  # can be applied."},{"path":"http://mages.github.io/ChainLadder/reference/getLatestCumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Triangle information for most recent calendar period. — getLatestCumulative","title":"Triangle information for most recent calendar period. — getLatestCumulative","text":"Return recent values origin periods cumulative development triangle.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/getLatestCumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triangle information for most recent calendar period. — getLatestCumulative","text":"","code":"getLatestCumulative(Triangle, na.values = NULL)"},{"path":"http://mages.github.io/ChainLadder/reference/getLatestCumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triangle information for most recent calendar period. — getLatestCumulative","text":"Triangle Triangle matrix format. na.values vector specifying values   considered synonymous NA searching rightmost non-NA.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/getLatestCumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triangle information for most recent calendar period. — getLatestCumulative","text":"vector recent non-'NA' (synonyms, appropriate) values   triangle origin periods.   names vector equal origin names Triangle.   vector additional attributes:   \"latestcol\" equalling index column Triangle corresponding   row's rightmost entry;   \"rowsname\" equalling name row dimension Triangle, ;   \"colnames\" equalling corresponding column name Triangle, ;   \"colsname\" equalling name column dimension Triangle, .","code":""},{"path":"http://mages.github.io/ChainLadder/reference/getLatestCumulative.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Triangle information for most recent calendar period. — getLatestCumulative","text":"Ben Escoto, Markus Gesmann, Dan Murphy","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/getLatestCumulative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triangle information for most recent calendar period. — getLatestCumulative","text":"","code":"RAA #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834 #>   1982  106  4285  5396 10666 13782 15599 15496 16169 16704    NA #>   1983 3410  8992 13873 16141 18735 22214 22863 23466    NA    NA #>   1984 5655 11555 15766 21266 23425 26083 27067    NA    NA    NA #>   1985 1092  9565 15836 22169 25955 26180    NA    NA    NA    NA #>   1986 1513  6445 11702 12935 15852    NA    NA    NA    NA    NA #>   1987  557  4020 10946 12314    NA    NA    NA    NA    NA    NA #>   1988 1351  6947 13112    NA    NA    NA    NA    NA    NA    NA #>   1989 3133  5395    NA    NA    NA    NA    NA    NA    NA    NA #>   1990 2063    NA    NA    NA    NA    NA    NA    NA    NA    NA getLatestCumulative(RAA) #>  1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  #> 18834 16704 23466 27067 26180 15852 12314 13112  5395  2063  #> attr(,\"latestcol\") #> 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990  #>   10    9    8    7    6    5    4    3    2    1  #> attr(,\"rowsname\") #> [1] \"origin\" #> attr(,\"colnames\") #>  [1] \"10\" \"9\"  \"8\"  \"7\"  \"6\"  \"5\"  \"4\"  \"3\"  \"2\"  \"1\"  #> attr(,\"colsname\") #> [1] \"dev\" Y <- matrix(c(1,  2,  3,               4,  5,  0,                6, NA, NA), byrow=TRUE, nrow=3) getLatestCumulative(Y) # c(3, 0, 6)  #> [1] 3 0 6 #> attr(,\"latestcol\") #> [1] 3 3 1 getLatestCumulative(Y, na.values = 0) # c(3, 5, 6)  #> [1] 3 5 6 #> attr(,\"latestcol\") #> [1] 3 2 1"},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"GLM-based Reserving Model — glmReserve","title":"GLM-based Reserving Model — glmReserve","text":"function implements loss reserving models within generalized linear model framework. takes accident year development lag mean predictors estimating ultimate loss reserves, provides analytical  bootstrapping methods compute associated prediction errors. bootstrapping approach also generates full predictive distribution loss reserves.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLM-based Reserving Model — glmReserve","text":"","code":"glmReserve(triangle, var.power = 1, link.power = 0, cum = TRUE,        mse.method = c(\"formula\", \"bootstrap\"),  nsim = 1000, nb = FALSE, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLM-based Reserving Model — glmReserve","text":"triangle object  class triangle. var.power index (p) power variance function \\(V(\\mu)=\\mu^p\\). Default p = 1, -dispersed Poisson model. NULL, assumed (1, 2) estimated using cplm package.  See tweedie. link.power index power link function. default link.power = 0 produces log link. See tweedie. cum logical value indicating whether input triangle   cumulative incremental scale. TRUE,   triangle assumed cumulative scale,   converted incremental losses internally GLM fitted. mse.method character indicating whether prediction error computed analytically (mse.method = \"formula\") via bootstrapping (mse.method = \"bootstrap\"). Partial match supported. nsim Number simulations performed bootstrapping, default value 1000. nb Whether negative binomial distribution used. true, arguments var.power link.power ignored negative binomial GLM fitted using glm.nb. ... Arguments passed onto function glm cpglm contrasts control. important offset weight specified. Otherwise, error reported program quit.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GLM-based Reserving Model — glmReserve","text":"function takes insurance loss triangle, converts incremental losses internally necessary, transforms long format (see .data.frame) fits resulting loss data generalized linear model mean structure includes accident year development lag effects. distributions allowed exponential family admits power variance function, , \\(V(\\mu)=\\mu^p\\). subclass distributions usually called Tweedie distribution includes many commonly used distributions special cases. function allow user specify GLM options usual family argument, instead, uses tweedie family internally takes two arguments, var.power link.power, user still full control distribution forms link functions. argument var.power determines specific distribution used, link.power determines form link function. Tweedie compound Poisson distribution 1 < p < 2 used, user option specify var.power = NULL, variance power p estimated data using cplm package. bcplm function cplm package also example Bayesian compound Poisson loss reserving model. See details tweedie, cpglm  bcplm. glmReserve allows certain measures exposures used offset term underlying GLM. , user use usual offset argument glm. Instead, one specifies exposure measure accident year exposure attribute triangle. Make sure exposures original scale (log transformations example). vector named, make sure names coincide rownames/origin triangle. vector unnamed, make sure exposures order consistent accident years, character rownames Triangle must convertible numeric. exposure attribute NULL, glmReserve function use exposures, link-function-transformed, offset term GLM. example, link function log, log exposure used offset, original exposure. See examples . Moreover, user MUST supply typical offset weight arguments list additional arguments .... offset specified , weight implemented (due prediction reasons). Two methods available assess prediction error estimated loss reserves. One using analytical formula (mse.method = \"formula\") derived first-order Taylor approximation. using bootstrapping (mse.method = \"bootstrap\") reconstructs triangle nsim times sampling replacement GLM (Pearson) residuals. time new triangle formed, GLM fitted corresponding loss reserves generated. Based predicted mean loss reserves, model assumption distribution forms, realizations predicted values generated via rtweedie function. Prediction errors well uncertainty measures quantiles predictive intervals can calculated based samples.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GLM-based Reserving Model — glmReserve","text":"use GLM insurance loss reserving many compelling aspects, e.g., -dispersed Poisson model used, reproduces estimates Chain Ladder; provides coherent modeling framework Mack method; relevant established statistical theory can directly applied perform hypothesis testing diagnostic checking; However,  user cautious key assumptions underlie GLM model, order determine whether model appropriate problem considered: GLM model assumes tail development, projects losses latest time point observed data. use model enables tail extrapolation, please consider growth curve model ClarkLDF ClarkCapeCod; model assumes incremental loss independent others.   assumption may valid cells calendar year usually correlated due inflation business operating factors; model tends -parameterized, may lead inferior predictive performance. solve potential problems, many variants current basic GLM model proposed actuarial literature. may included future release. Support negative binomial GLM added since version 0.2.3.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GLM-based Reserving Model — glmReserve","text":"output object class \"glmReserve\" following components: call matched call. summary data frame containing predicted loss reserve statistics. Similar summary statistics MackChainLadder. Triangle input triangle. FullTriangle completed triangle, empty cells original triangle filled model predictions. model fitted GLM, class \"glm\" \"cpglm\". convenient work component model fit information wanted. sims.par matrix simulated parameter values bootstrapping. sims.reserve.mean matrix simulated mean loss reserves (without process variance) year bootstrapping. sims.par matrix simulated realizations loss reserves (process variance) year bootstrapping. can used summarize predictive uncertainty loss reserves.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GLM-based Reserving Model — glmReserve","text":"England P. Verrall R. (1999). Analytic bootstrap estimates prediction errors claims reserving. Insurance: Mathematics Economics, 25, 281-293.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GLM-based Reserving Model — glmReserve","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/glmReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLM-based Reserving Model — glmReserve","text":"","code":"data(GenIns) GenIns <- GenIns / 1000  # over-dispersed Poisson: reproduce ChainLadder estimates (fit1 <- glmReserve(GenIns)) #>          Latest Dev.To.Date  Ultimate  IBNR       S.E        CV #> 2      5339.085  0.98251776  5434.085    95  110.0999 1.1589460 #> 3      4909.315  0.91262828  5379.315   470  216.0434 0.4596668 #> 4      4588.268  0.86599394  5298.268   710  260.8721 0.3674255 #> 5      3873.311  0.79725464  4858.311   985  303.5500 0.3081726 #> 6      3691.712  0.72234788  5110.712  1419  375.0139 0.2642804 #> 7      3483.130  0.61527116  5661.130  2178  495.3780 0.2274463 #> 8      2864.498  0.42221223  6784.498  3920  789.9611 0.2015207 #> 9      1363.294  0.24162052  5642.294  4279 1046.5138 0.2445697 #> 10      344.014  0.06921791  4970.014  4626 1980.1014 0.4280375 #> total 30456.627  0.61982291 49137.627 18681 2945.6609 0.1576822 summary(fit1, type = \"model\")   # extract the underlying glm #>  #> Call: #> glm(formula = value ~ factor(origin) + factor(dev), family = fam,  #>     data = ldaFit, offset = offset) #>  #> Coefficients: #>                   Estimate Std. Error t value Pr(>|t|)     #> (Intercept)       5.598649   0.172924  32.376  < 2e-16 *** #> factor(origin)2   0.331272   0.153537   2.158  0.03771 *   #> factor(origin)3   0.321119   0.157719   2.036  0.04916 *   #> factor(origin)4   0.305960   0.160736   1.903  0.06499 .   #> factor(origin)5   0.219316   0.167970   1.306  0.19994     #> factor(origin)6   0.270077   0.170756   1.582  0.12247     #> factor(origin)7   0.372208   0.174451   2.134  0.03976 *   #> factor(origin)8   0.553333   0.186525   2.967  0.00532 **  #> factor(origin)9   0.368934   0.239181   1.542  0.13170     #> factor(origin)10  0.242033   0.427562   0.566  0.57485     #> factor(dev)2      0.912526   0.148850   6.131 4.65e-07 *** #> factor(dev)3      0.958831   0.152569   6.285 2.90e-07 *** #> factor(dev)4      1.025997   0.156883   6.540 1.33e-07 *** #> factor(dev)5      0.435276   0.183914   2.367  0.02344 *   #> factor(dev)6      0.080057   0.214770   0.373  0.71152     #> factor(dev)7     -0.006381   0.238290  -0.027  0.97878     #> factor(dev)8     -0.394452   0.310289  -1.271  0.21180     #> factor(dev)9      0.009378   0.320249   0.029  0.97680     #> factor(dev)10    -1.379907   0.896690  -1.539  0.13258     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for Tweedie family taken to be 52.60193) #>  #>     Null deviance: 10699  on 54  degrees of freedom #> Residual deviance:  1903  on 36  degrees of freedom #> AIC: NA #>  #> Number of Fisher Scoring iterations: 4 #>   # which: # 1 Original triangle  # 2 Full triangle  # 3 Reserve distribution # 4 Residual plot # 5 QQ-plot  # plot original triangle plot(fit1, which = 1, xlab = \"dev year\", ylab = \"cum loss\")   # plot residuals  plot(fit1, which = 4, xlab = \"fitted values\", ylab = \"residuals\")   # Gamma GLM: (fit2 <- glmReserve(GenIns, var.power = 2)) #>          Latest Dev.To.Date  Ultimate  IBNR        S.E        CV #> 2      5339.085  0.98287950  5432.085    93   45.16637 0.4856599 #> 3      4909.315  0.91654710  5356.315   447  160.55717 0.3591883 #> 4      4588.268  0.88248346  5199.268   611  177.62461 0.2907113 #> 5      3873.311  0.79610759  4865.311   992  254.47093 0.2565231 #> 6      3691.712  0.71757408  5144.712  1453  351.33426 0.2417992 #> 7      3483.130  0.61440292  5669.130  2186  526.28787 0.2407538 #> 8      2864.498  0.43870111  6529.498  3665  941.32225 0.2568410 #> 9      1363.294  0.24853618  5485.294  4122 1175.94587 0.2852853 #> 10      344.014  0.07078457  4860.014  4516 1667.39240 0.3692189 #> total 30456.627  0.62742025 48542.627 18086 2702.70978 0.1494366  # compound Poisson GLM (variance function estimated from the data): (fit3 <- glmReserve(GenIns, var.power = NULL)) #>          Latest Dev.To.Date  Ultimate  IBNR        S.E        CV #> 2      5339.085  0.98269860  5433.085    94   91.59865 0.9744537 #> 3      4909.315  0.91330741  5375.315   466  186.54619 0.4003137 #> 4      4588.268  0.86779562  5287.268   699  223.72322 0.3200618 #> 5      3873.311  0.79709058  4859.311   986  264.76238 0.2685217 #> 6      3691.712  0.72164188  5115.712  1424  333.24690 0.2340217 #> 7      3483.130  0.61505387  5663.130  2180  452.93426 0.2077680 #> 8      2864.498  0.42364843  6761.498  3897  754.58057 0.1936311 #> 9      1363.294  0.24230764  5626.294  4263 1019.45920 0.2391413 #> 10      344.014  0.06942745  4955.014  4611 1910.99069 0.4144417 #> total 30456.627  0.62058068 49077.627 18621 2831.45526 0.1520571  # Now suppose we have an exposure measure # we can put it as an offset term in the model # to do this, use the \"exposure\" attribute of the 'triangle' expos <- (7 + 1:10 * 0.4) * 100 GenIns2 <- GenIns attr(GenIns2, \"exposure\") <- expos (fit4 <- glmReserve(GenIns2)) #>          Latest Dev.To.Date  Ultimate  IBNR       S.E        CV #> 2      5339.085  0.98251776  5434.085    95  110.0999 1.1589460 #> 3      4909.315  0.91262828  5379.315   470  216.0434 0.4596668 #> 4      4588.268  0.86599394  5298.268   710  260.8721 0.3674255 #> 5      3873.311  0.79725464  4858.311   985  303.5500 0.3081726 #> 6      3691.712  0.72234788  5110.712  1419  375.0139 0.2642804 #> 7      3483.130  0.61527116  5661.130  2178  495.3780 0.2274463 #> 8      2864.498  0.42221223  6784.498  3920  789.9611 0.2015207 #> 9      1363.294  0.24162052  5642.294  4279 1046.5138 0.2445697 #> 10      344.014  0.06921791  4970.014  4626 1980.1014 0.4280375 #> total 30456.627  0.61982291 49137.627 18681 2945.6609 0.1576822 # If the triangle's rownames are not convertible to numeric, # supply names to the exposures GenIns3 <- GenIns2 rownames(GenIns3) <- paste0(2007:2016, \"-01-01\") names(expos) <- rownames(GenIns3) attr(GenIns3, \"exposure\") <- expos (fit4b <- glmReserve(GenIns3)) #>               Latest Dev.To.Date  Ultimate  IBNR       S.E        CV #> 2008-01-01  5339.085  0.98251776  5434.085    95  110.0999 1.1589460 #> 2009-01-01  4909.315  0.91262828  5379.315   470  216.0434 0.4596668 #> 2010-01-01  4588.268  0.86599394  5298.268   710  260.8721 0.3674255 #> 2011-01-01  3873.311  0.79725464  4858.311   985  303.5500 0.3081726 #> 2012-01-01  3691.712  0.72234788  5110.712  1419  375.0139 0.2642804 #> 2013-01-01  3483.130  0.61527116  5661.130  2178  495.3780 0.2274463 #> 2014-01-01  2864.498  0.42221223  6784.498  3920  789.9611 0.2015207 #> 2015-01-01  1363.294  0.24162052  5642.294  4279 1046.5138 0.2445697 #> 2016-01-01   344.014  0.06921791  4970.014  4626 1980.1014 0.4280375 #> total      30456.627  0.61982291 49137.627 18681 2945.6609 0.1576822  # use bootstrapping to compute prediction error if (FALSE) { # \\dontrun{ set.seed(11) (fit5 <- glmReserve(GenIns, mse.method = \"boot\"))  # compute the quantiles of the predicted loss reserves t(apply(fit5$sims.reserve.pred, 2, quantile,          c(0.025, 0.25, 0.5, 0.75, 0.975)))          # plot distribution of reserve plot(fit5, which = 3) } # }  # alternative over-dispersed Poisson: negative binomial GLM (fit6 <- glmReserve(GenIns, nb = TRUE)) #>          Latest Dev.To.Date  Ultimate  IBNR        S.E        CV #> 2      5339.085  0.98287950  5432.085    93   39.61362 0.4259529 #> 3      4909.315  0.91654710  5356.315   447  133.65746 0.2990100 #> 4      4588.268  0.88197455  5202.268   614  148.48036 0.2418247 #> 5      3873.311  0.79594399  4866.311   993  211.05374 0.2125415 #> 6      3691.712  0.71771359  5143.712  1452  290.03379 0.1997478 #> 7      3483.130  0.61440292  5669.130  2186  433.04985 0.1981015 #> 8      2864.498  0.43836543  6534.498  3670  772.92403 0.2106060 #> 9      1363.294  0.24826462  5491.294  4128  967.75982 0.2344379 #> 10      344.014  0.07075545  4862.014  4518 1380.13957 0.3054758 #> total 30456.627  0.62723935 48556.627 18100 2232.91773 0.1233656"},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"Inflate amounts Triangle latest diagonal based Inflation Rate","code":""},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"","code":"inflateTriangle(Triangle, rate)"},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"Triangle claim triangle. Assume columns development     period, use transpose otherwise.     (mxn)-matrix \\(C_{ik}\\)     filled \\(k \\leq n+1-; =1,\\ldots,m; m\\geq n \\), see     qpaid use (mxn)-development triangles     m<n, say higher development period frequency (e.g quarterly)     origin period frequency (e.g accident years). rate Inflation rate applied triangle according exponential model","code":""},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"sensitivity projections ultimate losses based incurred loss   development factors changes adequacy level case reserves increases   significantly long-tail lines. particular, adequacy case reserve   changing, estimates ultimate losses based reported claims severely distorted.   function deflates amounts latest diagonal diagonal triangle according inflation rate provided,   considering exponential model.   purpose restating amounts diagonal triangle level   latest diagonal (.e. latest valuation).   Ideally metrics restated average O/S average claim paid.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"inflateTriangle returns inflated triangle according provided rate","code":""},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"Berquist, J.R. Sherman, R.E., Loss Reserve Adequacy Testing: Comprehensive,   Systematic Approach, Proceedings Casualty Actuarial Society, LXIV, 1977, pp.123-184.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/inflateTriangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inflate a Triangle based on an Inflation Rate — inflateTriangle","text":"","code":"# Create a Triangle of Average Case O/S  avg <- MedMal$MedMalOutstanding / MedMal$MedMalOpen  # Select a rate of 15% and inflate the average =/S Triangle  inflated_tr <- inflateTriangle(Triangle = avg, rate = .15)   # Multiply it by open claims and add paymnets to calulate the adjusted Reported Claims Trinagle  adj_reported <- inflated_tr * MedMal$MedMalOpen + MedMal$MedMalPaid  # Calculate the IBNR from the unadjusted Triangle  std_ibnr <- summary(MackChainLadder(MedMal$MedMalReported))$Totals[4, 1]  # Calculate the IBNR from the adjusted Triangle  adj_reported_ibnr <- summary(MackChainLadder(adj_reported))$Totals[4, 1]  # Compare the two  std_ibnr - adj_reported_ibnr #> [1] 321739113"},{"path":"http://mages.github.io/ChainLadder/reference/liab.html","id":null,"dir":"Reference","previous_headings":"","what":"Run off triangle of accumulated claim data — liab","title":"Run off triangle of accumulated claim data — liab","text":"Run-triangles General Liability Auto Liability.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/liab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run off triangle of accumulated claim data — liab","text":"","code":"data(auto)"},{"path":"http://mages.github.io/ChainLadder/reference/liab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Run off triangle of accumulated claim data — liab","text":"list two matrices, General Liability Auto Liability respectively.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/liab.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Run off triangle of accumulated claim data — liab","text":"Braun C (2004). prediction error chain ladder method applied correlated run triangles. ASTIN Bulletin 34(2): 399-423","code":""},{"path":"http://mages.github.io/ChainLadder/reference/liab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run off triangle of accumulated claim data — liab","text":"","code":"data(liab) names(liab) #> [1] \"GeneralLiab\" \"AutoLiab\""},{"path":"http://mages.github.io/ChainLadder/reference/plot-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Function plot — plot-MultiChainLadder","title":"Methods for Function plot — plot-MultiChainLadder","text":"Methods function plot produce different diagonostic plots object class \"MultiChainLadder\".","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Function plot — plot-MultiChainLadder","text":"","code":"# S4 method for class 'MultiChainLadder,missing' plot(x, y, which.plot=1:4,              which.triangle=NULL,              main=NULL,               portfolio=NULL,             lowess=TRUE,              legend.cex=0.75,...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Function plot — plot-MultiChainLadder","text":"x object class \"MultiChainLadder\". y \"missing\" .plot specifies type plot desired. range 1:5, defaults 1:4. \"1\" barplot observed losses predicted IBNR stacked MSE predictions error bars;  \"2\" trajectory plot development pattern; \"3\" residual plot standardized residuals fitted values; \"4\" Normal-QQ plot standardized residuals. \"5\" \"xyplot\" development confidence intervals accident year.  Note \"3\" \"4\" available portfolio. .triangle specifies triangles plotted. Default value NULL, triangles plus portfolio result plotted. main list titles plot. supplied, use default titles. portfolio specifies triangles summed portfolio, passed summary. lowess Logical. TRUE,  smoothing lines added residual plots. legend.cex plotting parameter passes cex legend .plot=1. ... optional graphical arguments.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for Function plot — plot-MultiChainLadder","text":"","code":"if (FALSE) { # \\dontrun{ data(liab) fit.liab <- MultiChainLadder(liab)  # generate diagonostic plots par(mfcol=(c(3,2))) plot(fit.liab,which.plot=1:2)  par(mfrow=(c(2,2))) plot(fit.liab,which.plot=3:4)  plot(fit.liab,which.triangle=1,which.plot=5) graphics.off() } # }"},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for a BootChainLadder object — plot.BootChainLadder","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"plot.BootChainLadder, method plot output   BootChainLadder. designed give quick overview   BootChainLadder object check model assumptions.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"","code":"# S3 method for class 'BootChainLadder' plot(x, mfrow=NULL, title=NULL, log=FALSE,      which=1:4, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"x output BootChainLadder mfrow see par title see title log logical. TRUE y-axes 'latest     incremental actual vs. simulated' plot log-scale subset plots required, specify subset numbers 1:4. ... optional arguments. See plot.default     details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"plot.BootChainLadder shows four graphs, starting histogram  total simulated IBNRs origin periods, including rug  plot; plot empirical cumulative distribution total  IBNRs origin periods; box-whisker plot simulated ultimate  claims costs origin periods; box-whisker plot  simulated incremental claims cost latest available calendar period  actual incremental claims period. last plot  simulated data follow trend actual data,  otherwise original data might intrinsic trends  reflected model.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"Markus Gesmann","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"box-whisker plot latest actual incremental claims simulated   claims follows based ideas Barnett Zehnwirth :   Barnett Zehnwirth. need diagnostic assessment     bootstrap predictive models, Insureware technical report. 2007","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot.BootChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for a BootChainLadder object — plot.BootChainLadder","text":"","code":"B <- BootChainLadder(RAA) plot(B)  plot(B, log=TRUE)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.MackChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for a MackChainLadder object — plot.MackChainLadder","title":"Plot method for a MackChainLadder object — plot.MackChainLadder","text":"plot.MackChainLadder, method plot output   MackChainLadder. designed give quick overview   MackChainLadder object check Mack's model assumptions.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MackChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for a MackChainLadder object — plot.MackChainLadder","text":"","code":"# S3 method for class 'MackChainLadder' plot(x, mfrow=NULL, title=NULL,  lattice=FALSE, which=1:6, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.MackChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for a MackChainLadder object — plot.MackChainLadder","text":"x output MackChainLadder mfrow see par title see title lattice logical. Default set FALSE plots   described details section produced. lattice=TRUE, function   xyplot lattice package used plot   developments origin period different panels, plus Mack's S.E. subset plots required, specify subset numbers 1:6. ... optional arguments. See plot.default     details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MackChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for a MackChainLadder object — plot.MackChainLadder","text":"plot.MackChainLadder shows six graphs, starting top left  stacked bar-chart latest claims position plus IBNR  Mack's standard error origin period; next right  plot forecasted development patterns origin periods  (numbered, starting 1 oldest origin period),  4 residual plots. residual plots  show standardised residuals fitted values, origin period,  calendar period development period. residual plot show  patterns directions Mack's method applicable.  Pattern direction can result trends   investigated, see  Barnett Zehnwirth. Best estimates reserves. Proceedings    CAS, LXXXVI (167), November 2000. details trends.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MackChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for a MackChainLadder object — plot.MackChainLadder","text":"Markus Gesmann","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot.MackChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for a MackChainLadder object — plot.MackChainLadder","text":"","code":"plot(MackChainLadder(RAA))"},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"plot.MunichChainLadder, method plot output   MunichChainLadder object. designed give quick   overview MunichChainLadder object check   correlation paid incurred residuals.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"","code":"# S3 method for class 'MunichChainLadder' plot(x,  mfrow=c(2,2), title=NULL, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"x output MunichChainLadder mfrow see par title see title ... optional arguments. See plot.default     details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"plot.MunichChainLadder shows four plots, starting top   left barchart forecasted ultimate claims costs   Munich-chain-ladder (MCL) paid incurred data origin period;   barchart next compares ratio forecasted ultimate   claims cost paid incurred data based Mack-chain-ladder   Munich-chain-ladder methods; two residual plots bottom show   correlation (incurred/paid)-chain-ladder factors   paid-chain-ladder factors correlation   (paid/incurred)-chain-ladder factors incurred-chain-ladder   factors.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"Markus Gesmann","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"design plots follows Quarg's (2004) paper:     Gerhard Quarg Thomas Mack. Munich Chain Ladder. Blatter DGVFM 26,   Munich, 2004.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot.MunichChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for a MunichChainLadder object — plot.MunichChainLadder","text":"","code":"M <- MunichChainLadder(MCLpaid, MCLincurred) #> Warning: 'loglinear' model to estimate sigma_n doesn't appear appropriate.  #> p-value > 5. #>  est.sigma will be overwritten to 'Mack'. #>  Mack's estimation method will be used instead. #> Warning: 'loglinear' model to estimate sigma_n doesn't appear appropriate.  #> p-value > 5. #>  est.sigma will be overwritten to 'Mack'. #>  Mack's estimation method will be used instead. plot(M)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.checkTriangleInflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","title":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","text":"plot.checkTriangleInflation, method plot output   checkTriangleInflation. designed give quick overview   checkTriangleInflation object check inflation regression curves.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.checkTriangleInflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","text":"","code":"# S3 method for class 'checkTriangleInflation' plot(x, col.line = \"black\", type = \"b\", xlab = \"dev. period\", ylab = NULL, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.checkTriangleInflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","text":"x output checkTriangleInflation col.line Default: \"black\". Line color type Default: \"b\". type plot drawn xlab Default: \"dev. period\". X axis label ylab Default: NULL. Y axis label ... optional arguments. See plot.default     details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.checkTriangleInflation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","text":"plot.cyeff.test plots columns triangle (Development Periods) regression curves.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.checkTriangleInflation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot.checkTriangleInflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for a checkTriangleInflation object — plot.checkTriangleInflation","text":"","code":"test <- checkTriangleInflation(MedMal$MedMalOutstanding / MedMal$MedMalOpen) plot(test)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.cyEffTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for a cyEffTest object — plot.cyEffTest","title":"Plot method for a cyEffTest object — plot.cyEffTest","text":"plot.cyEffTest, method plot output   cyEffTest. designed give quick overview   cyEffTest object check assumption independece calendar years.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.cyEffTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for a cyEffTest object — plot.cyEffTest","text":"","code":"# S3 method for class 'cyEffTest' plot(x, type = \"l\", xlab = \"Z\", ylab = \"Density\",                            main = \"Calendar Year Effect\", col.area = \"gray\",                            border = NA, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.cyEffTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for a cyEffTest object — plot.cyEffTest","text":"x output cyEffTest type Default: \"l\". type plot drawn xlab Default: \"Z\". X axis label ylab Default: \"Density\". Y axis label main Default: \"Calendar Year Effect\". Plot title col.area Default: \"gray\". Color shaded area. border Default: NULL, color draw border. Use border = NA omit borders. ... optional arguments. See plot.default     details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.cyEffTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for a cyEffTest object — plot.cyEffTest","text":"plot.cyEffTest shows underlying distribution, test statistic \\(Z\\) relative Confidence Interval.  test statistic \\(Z\\) within highlighted region hypothesis dependence calendar years rejected.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.cyEffTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for a cyEffTest object — plot.cyEffTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot.cyEffTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for a cyEffTest object — plot.cyEffTest","text":"","code":"plot(cyEffTest(RAA))"},{"path":"http://mages.github.io/ChainLadder/reference/plot.dfCorTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for a dfCorTest object — plot.dfCorTest","title":"Plot method for a dfCorTest object — plot.dfCorTest","text":"plot.dfCorTest, method plot output   dfCorTest. designed give quick overview   dfCorTest object check assumption independece development factors.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.dfCorTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for a dfCorTest object — plot.dfCorTest","text":"","code":"# S3 method for class 'dfCorTest' plot(x, type = \"l\", xlab = \"T\", ylab = \"Density\",                            main = \"Development Factor Correlation\", col.area = \"gray\",                           border = NA, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/plot.dfCorTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for a dfCorTest object — plot.dfCorTest","text":"x output dfCorTest type Default: \"l\". type plot drawn xlab Default: \"Z\". X axis label ylab Default: \"Density\". Y axis label main Default: \"Development Factor Correlation\". Plot title col.area Default: \"gray\". Color shaded area. border Default: NULL, color draw border. Use border = NA omit borders. ... optional arguments. See plot.default     details.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.dfCorTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for a dfCorTest object — plot.dfCorTest","text":"plot.dfCorTest shows underlying distribution, test statistic \\(Z\\) relative Confidence Interval.  test statistic \\(Z\\) within highlighted region hypothesis correlation development factors rejected.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/plot.dfCorTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for a dfCorTest object — plot.dfCorTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/plot.dfCorTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for a dfCorTest object — plot.dfCorTest","text":"","code":"plot(dfCorTest(RAA))"},{"path":"http://mages.github.io/ChainLadder/reference/predict.TriangleModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of a claims triangle — predict.TriangleModel","title":"Prediction of a claims triangle — predict.TriangleModel","text":"function internally used MackChainLadder forecast future claims.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/predict.TriangleModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of a claims triangle — predict.TriangleModel","text":"","code":"# S3 method for class 'TriangleModel' predict(object,...) # S3 method for class 'ChainLadder' predict(object,...)"},{"path":"http://mages.github.io/ChainLadder/reference/predict.TriangleModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of a claims triangle — predict.TriangleModel","text":"object list two items: Models, Triangle Models list linear models development period Triangle input triangle forecast  ... use","code":""},{"path":"http://mages.github.io/ChainLadder/reference/predict.TriangleModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of a claims triangle — predict.TriangleModel","text":"FullTriangle forecasted claims triangle","code":""},{"path":"http://mages.github.io/ChainLadder/reference/predict.TriangleModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of a claims triangle — predict.TriangleModel","text":"Markus Gesmann","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/predict.TriangleModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of a claims triangle — predict.TriangleModel","text":"","code":"RAA #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834 #>   1982  106  4285  5396 10666 13782 15599 15496 16169 16704    NA #>   1983 3410  8992 13873 16141 18735 22214 22863 23466    NA    NA #>   1984 5655 11555 15766 21266 23425 26083 27067    NA    NA    NA #>   1985 1092  9565 15836 22169 25955 26180    NA    NA    NA    NA #>   1986 1513  6445 11702 12935 15852    NA    NA    NA    NA    NA #>   1987  557  4020 10946 12314    NA    NA    NA    NA    NA    NA #>   1988 1351  6947 13112    NA    NA    NA    NA    NA    NA    NA #>   1989 3133  5395    NA    NA    NA    NA    NA    NA    NA    NA #>   1990 2063    NA    NA    NA    NA    NA    NA    NA    NA    NA  CL <- chainladder(RAA) CL #> $Models #> $Models[[1]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 2.999   #>  #>  #> $Models[[2]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.624   #>  #>  #> $Models[[3]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.271   #>  #>  #> $Models[[4]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.172   #>  #>  #> $Models[[5]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.113   #>  #>  #> $Models[[6]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.042   #>  #>  #> $Models[[7]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.033   #>  #>  #> $Models[[8]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.017   #>  #>  #> $Models[[9]] #>  #> Call: #> lm(formula = y ~ x + 0, data = data.frame(x = Triangle[, i],  #>     y = Triangle[, i + 1]), weights = weights[, i]/Triangle[,  #>     i]^delta[i]) #>  #> Coefficients: #>     x   #> 1.009   #>  #>  #>  #> $Triangle #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834 #>   1982  106  4285  5396 10666 13782 15599 15496 16169 16704    NA #>   1983 3410  8992 13873 16141 18735 22214 22863 23466    NA    NA #>   1984 5655 11555 15766 21266 23425 26083 27067    NA    NA    NA #>   1985 1092  9565 15836 22169 25955 26180    NA    NA    NA    NA #>   1986 1513  6445 11702 12935 15852    NA    NA    NA    NA    NA #>   1987  557  4020 10946 12314    NA    NA    NA    NA    NA    NA #>   1988 1351  6947 13112    NA    NA    NA    NA    NA    NA    NA #>   1989 3133  5395    NA    NA    NA    NA    NA    NA    NA    NA #>   1990 2063    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  #> $delta #> [1] 1 1 1 1 1 1 1 1 1 #>  #> $weights #>       dev #> origin 1  2  3  4  5  6  7  8  9 10 #>   1981 1  1  1  1  1  1  1  1  1  1 #>   1982 1  1  1  1  1  1  1  1  1 NA #>   1983 1  1  1  1  1  1  1  1 NA NA #>   1984 1  1  1  1  1  1  1 NA NA NA #>   1985 1  1  1  1  1  1 NA NA NA NA #>   1986 1  1  1  1  1 NA NA NA NA NA #>   1987 1  1  1  1 NA NA NA NA NA NA #>   1988 1  1  1 NA NA NA NA NA NA NA #>   1989 1  1 NA NA NA NA NA NA NA NA #>   1990 1 NA NA NA NA NA NA NA NA NA #>  #> attr(,\"class\") #> [1] \"ChainLadder\"   \"TriangleModel\" \"list\"          predict(CL) #>       dev #> origin    1         2         3        4        5        6        7        8 #>   1981 5012  8269.000 10907.000 11805.00 13539.00 16181.00 18009.00 18608.00 #>   1982  106  4285.000  5396.000 10666.00 13782.00 15599.00 15496.00 16169.00 #>   1983 3410  8992.000 13873.000 16141.00 18735.00 22214.00 22863.00 23466.00 #>   1984 5655 11555.000 15766.000 21266.00 23425.00 26083.00 27067.00 27967.34 #>   1985 1092  9565.000 15836.000 22169.00 25955.00 26180.00 27277.85 28185.21 #>   1986 1513  6445.000 11702.000 12935.00 15852.00 17649.38 18389.50 19001.20 #>   1987  557  4020.000 10946.000 12314.00 14428.00 16063.92 16737.55 17294.30 #>   1988 1351  6947.000 13112.000 16663.88 19524.65 21738.45 22650.05 23403.47 #>   1989 3133  5395.000  8758.905 11131.59 13042.60 14521.43 15130.38 15633.68 #>   1990 2063  6187.677 10045.834 12767.13 14958.92 16655.04 17353.46 17930.70 #>       dev #> origin        9       10 #>   1981 18662.00 18834.00 #>   1982 16704.00 16857.95 #>   1983 23863.43 24083.37 #>   1984 28441.01 28703.14 #>   1985 28662.57 28926.74 #>   1986 19323.01 19501.10 #>   1987 17587.21 17749.30 #>   1988 23799.84 24019.19 #>   1989 15898.45 16044.98 #>   1990 18234.38 18402.44"},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"print method checkTriangleInflation   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"","code":"# S3 method for class 'checkTriangleInflation' print(x, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"x object class checkTriangleInflation ... optional arguments print method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"print.checkTriangleInflation show print checkTriangleInflation object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"print.checkTriangleInflation displays default information resulting   call checkTriangleInflation method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/print.checkTriangleInflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for a checkTriangleInflation object — print.checkTriangleInflation","text":"","code":"test <- checkTriangleInflation(MedMal$MedMalOutstanding / MedMal$MedMalOpen)  print(test) #> Triangle Inflation Calculation #>  #>                1         2         3         4         5         6        7 #> rate   0.1561905 0.2949749 0.3110902 0.3417400 0.3296170 0.3216367 0.276155 #> R2     0.7995755 0.8946321 0.8578738 0.9405004 0.9887844 0.9831351 1.000000 #> Points 8.0000000 7.0000000 6.0000000 5.0000000 4.0000000 3.0000000 2.000000"},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for a cyEffTest object — print.cyEffTest","title":"Print function for a cyEffTest object — print.cyEffTest","text":"print method cyEffTest   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for a cyEffTest object — print.cyEffTest","text":"","code":"# S3 method for class 'cyEffTest' print(x, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for a cyEffTest object — print.cyEffTest","text":"x object class cyEffTest ... optional arguments print method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print function for a cyEffTest object — print.cyEffTest","text":"print.cyEffTest show print cyEffTest object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function for a cyEffTest object — print.cyEffTest","text":"print.cyEffTest displays default information resulting   call cyEffTest method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print function for a cyEffTest object — print.cyEffTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/print.cyEffTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for a cyEffTest object — print.cyEffTest","text":"","code":"test <- cyEffTest(RAA)  print(test) #> Calendar Year Effect #>  #> Z = 14 #>  #> 95%-Range = ( 8.965613 ; 16.78439 ) #>  #> Calendar Year Effect: FALSE"},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for a dfCorTest object — print.dfCorTest","title":"Print function for a dfCorTest object — print.dfCorTest","text":"print method dfCorTest   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for a dfCorTest object — print.dfCorTest","text":"","code":"# S3 method for class 'dfCorTest' print(x, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for a dfCorTest object — print.dfCorTest","text":"x object class dfCorTest ... optional arguments print method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print function for a dfCorTest object — print.dfCorTest","text":"print.dfCorTest show print dfCorTest object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function for a dfCorTest object — print.dfCorTest","text":"print.dfCorTest displays default information resulting   call dfCorTest method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print function for a dfCorTest object — print.dfCorTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/print.dfCorTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for a dfCorTest object — print.dfCorTest","text":"","code":"test <- dfCorTest(RAA)  print(test) #> Development Factor Correlation #>  #> T = 0.06955782 #>  #> 50%-Range = ( -0.1274666 ; 0.1274666 ) #>  #> Development Factor Correlation: FALSE"},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"quantile methods MackChainLadder object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"","code":"# S3 method for class 'MackChainLadder' quantile(x, probs=c(0.75, 0.95), na.rm = FALSE,               names = TRUE, type = 7,...)"},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"x object class \"MackChainLadder\" probs numeric vector probabilities values [0,1],     see quantile help na.rm used names used type used ... used","code":""},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"Reserves desired quantile using Cornish-Fisher expansion. Cornish-Fisher expansion relies first three moments reserve risk distribution: Best estimate resulting Chain-Ladder projection, Mack standard deviation skewness distribution (skewness estimation, see references ). quantile estimation requires standard Mack assumptions met. details underlying calculations, see references .","code":""},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"quantile.MackChainLadder gives list two elements back: ByOrigin data frame skewness quantile statistics     origin period Totals data frame total skewness quantile statistics     across origin periods","code":""},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"Eric Dal Moro Yuriy Krvavych.   Probability sufficiency Solvency II Reserve risk margins: Practical approximations. ASTIN Bulletin, 47(3), 737-785 Dal Moro, Eric, Closed-Form Formula Skewness Estimation Non-Life Reserve Risk Distribution (September 15, 2013). Available SSRN: https://ssrn.com/abstract=2344297 https://dx.doi.org/10.2139/ssrn.2344297","code":""},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"Eric Dal Moro eric_dal_moro@yahoo.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/quantile.MackChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"quantile function for Mack-chain-ladder — quantile.MackChainLadder","text":"","code":"M <- MackChainLadder(GenIns, est.sigma=\"Mack\") quantile(M, c(0.65, 0.75, 0.9)) #> $ByOrigin #>         Skewness  IBNR 65%  IBNR 75%  IBNR 90% #> 1   0.0000000000       NaN       NaN       NaN #> 2   0.0000000000  123739.0  145581.4  191435.9 #> 3  -0.0286634126  516899.3  551912.6  625100.8 #> 4  -0.0432877277  761917.4  800240.3  880168.6 #> 5  -0.0006540419 1085638.2 1161220.1 1319876.2 #> 6   0.1799508151 1567333.2 1689962.3 1954108.1 #> 7   0.0549677343 2388416.0 2551431.7 2896438.1 #> 8   0.2674116868 4224362.7 4489436.4 5067138.8 #> 9   0.2861886611 4613768.9 4908824.4 5553448.6 #> 10  0.3141065593 5090294.9 5506347.5 6418605.5 #>  #> $Totals #>                 Totals #> Skewness  2.142952e-01 #> IBNR 65%: 1.954935e+07 #> IBNR 75%: 2.028376e+07 #> IBNR 90%: 2.187308e+07 #>"},{"path":"http://mages.github.io/ChainLadder/reference/residCov-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function for residCov and residCor — residCov","title":"Generic function for residCov and residCor — residCov","text":"residCov  residCov generic functions extract residual covariance residual correlation system fitted regressions respectively.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/residCov-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function for residCov and residCor — residCov","text":"","code":"residCov(object,...) residCor(object,...)  # S4 method for class 'MultiChainLadder' residCov(object,...) # S4 method for class 'MultiChainLadder' residCor(object,...)"},{"path":"http://mages.github.io/ChainLadder/reference/residCov-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function for residCov and residCor — residCov","text":"object object class \"MultiChainLadder\". ... Currently used.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/residCov-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic function for residCov and residCor — residCov","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/residuals.MackChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","title":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","text":"Extract residuals MackChainLadder model   origin-, calendar- development period.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/residuals.MackChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","text":"","code":"# S3 method for class 'MackChainLadder' residuals(object, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/residuals.MackChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","text":"object output MackChainLadder ... use","code":""},{"path":"http://mages.github.io/ChainLadder/reference/residuals.MackChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","text":"function returns data.frame residuals standardised residuals   origin-, calendar- development period.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/residuals.MackChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","text":"Markus Gesmann","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/residuals.MackChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract residuals of a MackChainLadder model — residuals.MackChainLadder","text":"","code":"RAA #>       dev #> origin    1     2     3     4     5     6     7     8     9    10 #>   1981 5012  8269 10907 11805 13539 16181 18009 18608 18662 18834 #>   1982  106  4285  5396 10666 13782 15599 15496 16169 16704    NA #>   1983 3410  8992 13873 16141 18735 22214 22863 23466    NA    NA #>   1984 5655 11555 15766 21266 23425 26083 27067    NA    NA    NA #>   1985 1092  9565 15836 22169 25955 26180    NA    NA    NA    NA #>   1986 1513  6445 11702 12935 15852    NA    NA    NA    NA    NA #>   1987  557  4020 10946 12314    NA    NA    NA    NA    NA    NA #>   1988 1351  6947 13112    NA    NA    NA    NA    NA    NA    NA #>   1989 3133  5395    NA    NA    NA    NA    NA    NA    NA    NA #>   1990 2063    NA    NA    NA    NA    NA    NA    NA    NA    NA  MCL=MackChainLadder(RAA)  MCL   #> MackChainLadder(Triangle = RAA) #>  #>      Latest Dev.To.Date Ultimate   IBNR Mack.S.E CV(IBNR) #> 1981 18,834       1.000   18,834      0        0      NaN #> 1982 16,704       0.991   16,858    154      143    0.928 #> 1983 23,466       0.974   24,083    617      592    0.959 #> 1984 27,067       0.943   28,703  1,636      713    0.436 #> 1985 26,180       0.905   28,927  2,747    1,452    0.529 #> 1986 15,852       0.813   19,501  3,649    1,995    0.547 #> 1987 12,314       0.694   17,749  5,435    2,204    0.405 #> 1988 13,112       0.546   24,019 10,907    5,354    0.491 #> 1989  5,395       0.336   16,045 10,650    6,332    0.595 #> 1990  2,063       0.112   18,402 16,339   24,566    1.503 #>  #>               Totals #> Latest:   160,987.00 #> Dev:            0.76 #> Ultimate: 213,122.23 #> IBNR:      52,135.23 #> Mack.S.E   26,880.74 #> CV(IBNR):       0.52   residuals(MCL) #>    origin.period dev.period cal.period     residuals standard.residuals #> 1           1981          1       1981 -6.763786e+03      -0.6518587127 #> 2           1982          1       1982  3.967068e+03       2.3131310956 #> 3           1983          1       1983 -1.235813e+03      -0.1379704193 #> 4           1984          1       1984 -5.406373e+03      -0.5001778243 #> 5           1985          1       1985  6.289700e+03       1.1694700671 #> 6           1986          1       1986  1.906970e+03       0.3043328370 #> 7           1987          1       1987  2.349357e+03       0.6038940301 #> 8           1988          1       1988  2.894866e+03       0.4869681180 #> 9           1989          1       1989 -4.001991e+03      -0.4626632036 #> 10          1981          2       1982 -2.517910e+03      -0.8955622462 #> 11          1982          2       1983 -1.560795e+03      -0.7431309175 #> 12          1983          2       1984 -7.257166e+02      -0.2492715390 #> 13          1984          2       1985 -2.993805e+03      -0.9307852849 #> 14          1985          2       1986  3.070049e+02       0.1028219694 #> 15          1986          2       1987  1.238396e+03       0.4903618988 #> 16          1987          2       1988  4.419439e+03       2.1673048699 #> 17          1988          2       1989  1.833387e+03       0.7025323710 #> 18          1981          3       1983 -2.056577e+03      -0.8025136628 #> 19          1982          3       1984  3.808288e+03       2.0377822470 #> 20          1983          3       1985 -1.490031e+03      -0.5262744644 #> 21          1984          3       1986  1.229178e+03       0.4128212956 #> 22          1985          3       1987  2.043216e+03       0.6850481136 #> 23          1986          3       1988 -1.936933e+03      -0.7336781618 #> 24          1987          3       1989 -1.597141e+03      -0.6222874301 #> 25          1981          4       1984 -2.926190e+02      -0.3677955805 #> 26          1982          4       1985  1.284918e+03       1.6875563766 #> 27          1983          4       1986 -1.770003e+02      -0.1954209622 #> 28          1984          4       1987 -1.491833e+03      -1.4840033877 #> 29          1985          4       1988 -1.985494e+01      -0.0194638893 #> 30          1986          4       1989  6.963886e+02       0.8419293284 #> 31          1981          5       1985  1.106882e+03       0.9396302313 #> 32          1982          5       1986  2.543295e+02       0.2143062398 #> 33          1983          5       1987  1.354734e+03       1.0102053305 #> 34          1984          5       1988  1.959041e+00       0.0013483019 #> 35          1985          5       1989 -2.717905e+03      -1.8091460074 #> 36          1981          6       1986  1.149456e+03       1.5833277459 #> 37          1982          6       1987 -7.571384e+02      -1.0573998685 #> 38          1983          6       1988 -2.825360e+02      -0.3490423583 #> 39          1984          6       1989 -1.097812e+02      -0.1295670061 #> 40          1981          7       1987 -4.334019e-02      -0.0003377707 #> 41          1982          7       1988  1.575480e+02       1.2823293692 #> 42          1983          7       1989 -1.575046e+02      -1.1656855985 #> 43          1981          8       1988 -2.611540e+02      -1.0000000000 #> 44          1982          8       1989  2.611540e+02       1.0000000000 #>    fitted.value #> 1     15032.786 #> 2       317.932 #> 3     10227.813 #> 4     16961.373 #> 5      3275.300 #> 6      4538.030 #> 7      1670.643 #> 8      4052.134 #> 9      9396.991 #> 10    13424.910 #> 11     6956.795 #> 12    14598.717 #> 13    18759.805 #> 14    15528.995 #> 15    10463.604 #> 16     6526.561 #> 17    11278.613 #> 18    13861.577 #> 19     6857.712 #> 20    17631.031 #> 21    20036.822 #> 22    20125.784 #> 23    14871.933 #> 24    13911.141 #> 25    13831.619 #> 26    12497.082 #> 27    18912.000 #> 28    24916.833 #> 29    25974.855 #> 30    15155.611 #> 31    15074.118 #> 32    15344.671 #> 33    20859.266 #> 34    26081.041 #> 35    28897.905 #> 36    16859.544 #> 37    16253.138 #> 38    23145.536 #> 39    27176.781 #> 40    18608.043 #> 41    16011.452 #> 42    23623.505 #> 43    18923.154 #> 44    16442.846"},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Function summary — summary-methods","title":"Methods for Function summary — summary-methods","text":"Methods function summary calculate summary statistics \"MultiChainLadder\" object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Function summary — summary-methods","text":"","code":"# S4 method for class 'MultiChainLadder' summary(object, portfolio=NULL,...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Function summary — summary-methods","text":"object object class \"MultiChainLadder\" portfolio character strings specifying triangles summed portfolio. ... optional arguments summary methods","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for Function summary — summary-methods","text":"summary calculations summary statistics triangle whole portfolio portfolio. portfolio defaults sum input triangles. can also specified \"+j\" format, means sum -th j-th triangle portfolio. example, \"1+3\" means sum first third triangle portfolio.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for Function summary — summary-methods","text":"summary function returns object class \"MultiChainLadderSummary\" following slots: Triangles input triangles FullTriangles predicted triangles S.E.Full list prediction errors cell S.E.Est.Full list estimation errors cell S.E.Proc.Full list process errors cell Ultimate predicted ultimate losses triangle portfolio Latest latest observed losses triangle portfolio IBNR predicted IBNR triangle portfolio S.E.Ult matrix prediction errors ultimate losses triangle portfolio S.E.Est.Ult matrix estimation errors ultimate losses triangle portfolio S.E.Proc.Ult matrix process errors ultimate losses triangle portfolio report.summary summary statistics triangle portfolio coefficients estimated coefficients systemfit. put matrix format GMCL coefCov estimated variance-covariance matrix returned systemfit residCov estimated residual covariance matrix returned systemfit rstandard standardized residuals fitted.values fitted.values residCor residual correlation model.summary summary statistics cofficients including p-values portfolio portfolio calculated","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for Function summary — summary-methods","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for Function summary — summary-methods","text":"","code":"data(GenIns) fit.bbmw=MultiChainLadder(list(GenIns),fit.method=\"OLS\", mse.method=\"Independence\") summary(fit.bbmw) #> $`Summary Statistics for Input Triangle` #>           Latest Dev.To.Date   Ultimate       IBNR       S.E    CV #> 1      3,901,463      1.0000  3,901,463          0         0 0.000 #> 2      5,339,085      0.9826  5,433,719     94,634    75,535 0.798 #> 3      4,909,315      0.9127  5,378,826    469,511   121,700 0.259 #> 4      4,588,268      0.8661  5,297,906    709,638   133,551 0.188 #> 5      3,873,311      0.7973  4,858,200    984,889   261,412 0.265 #> 6      3,691,712      0.7223  5,111,171  1,419,459   411,028 0.290 #> 7      3,483,130      0.6153  5,660,771  2,177,641   558,356 0.256 #> 8      2,864,498      0.4222  6,784,799  3,920,301   875,430 0.223 #> 9      1,363,294      0.2416  5,642,266  4,278,972   971,385 0.227 #> 10       344,014      0.0692  4,969,825  4,625,811 1,363,385 0.295 #> Total 34,358,090      0.6478 53,038,946 18,680,856 2,447,618 0.131 #>"},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for BootChainLadder objects — summary.BootChainLadder","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"summary, print, mean, quantile   methods BootChainLadder objects","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"","code":"# S3 method for class 'BootChainLadder' summary(object, probs=c(0.75,0.95), ...)  # S3 method for class 'BootChainLadder' print(x, probs=c(0.75,0.95), ...)  # S3 method for class 'BootChainLadder' quantile(x, probs=c(0.75, 0.95), na.rm = FALSE,               names = TRUE, type = 7,...)  # S3 method for class 'BootChainLadder' mean(x, ...)  # S3 method for class 'BootChainLadder' residuals(object, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"x, object output BootChainLadder probs numeric vector probabilities values [0,1],     see quantile help na.rm logical; true, NA NaN's     removed 'x' quantiles computed,     see quantile help names logical; true, result names     attribute. Set FALSE speedup many 'probs',     see quantile help type integer 1 9 selecting one nine quantile     algorithms detailed used, see quantile ... arguments passed methods","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"print.BootChainLadder calls summary.BootChainLadder   prints formatted version summary.   residuals.BootChainLadder gives residual triangle   expected chain-ladder minus actual triangle back.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"summary.BootChainLadder, mean.BootChainLadder,   quantile.BootChainLadder, give list two elements back:  ByOrigin data frame summary/mean/quantile statistics     origin period Totals data frame total summary/mean/quantile statistics     origin period","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"Markus Gesmann","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary.BootChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for BootChainLadder objects — summary.BootChainLadder","text":"","code":"B <- BootChainLadder(RAA, R=999, process.distr=\"gamma\") B #> BootChainLadder(Triangle = RAA, R = 999, process.distr = \"gamma\") #>  #>      Latest Mean Ultimate Mean IBNR IBNR.S.E IBNR 75% IBNR 95% #> 1981 18,834        18,834         0        0        0        0 #> 1982 16,704        16,883       179      780      220    1,368 #> 1983 23,466        24,112       646    1,304    1,089    3,174 #> 1984 27,067        28,776     1,709    1,991    2,675    5,289 #> 1985 26,180        28,987     2,807    2,434    3,965    7,628 #> 1986 15,852        19,540     3,688    2,441    4,947    8,199 #> 1987 12,314        17,686     5,372    3,126    7,008   11,280 #> 1988 13,112        24,275    11,163    5,075   14,001   20,196 #> 1989  5,395        16,572    11,177    6,377   14,909   23,720 #> 1990  2,063        19,710    17,647   13,552   25,784   41,999 #>  #>                  Totals #> Latest:         160,987 #> Mean Ultimate:  215,376 #> Mean IBNR:       54,389 #> IBNR.S.E         19,370 #> Total IBNR 75%:  65,617 #> Total IBNR 95%:  89,191 summary(B) #> $ByOrigin #>      Latest Mean Ultimate  Mean IBNR   SD IBNR   IBNR 75%  IBNR 95% #> 1981  18834      18834.00     0.0000     0.000     0.0000     0.000 #> 1982  16704      16883.32   179.3249   779.533   220.3238  1367.977 #> 1983  23466      24111.65   645.6530  1304.426  1088.9090  3173.708 #> 1984  27067      28776.20  1709.1990  1990.882  2674.8965  5289.365 #> 1985  26180      28987.16  2807.1556  2434.282  3964.5693  7628.258 #> 1986  15852      19539.69  3687.6936  2440.635  4946.8657  8198.906 #> 1987  12314      17686.37  5372.3663  3125.773  7007.9105 11280.426 #> 1988  13112      24275.25 11163.2478  5075.214 14000.8210 20195.902 #> 1989   5395      16572.34 11177.3363  6377.035 14909.4309 23719.853 #> 1990   2063      19710.25 17647.2453 13552.213 25783.6734 41999.016 #>  #> $Totals #>                    Totals #> Latest:         160987.00 #> Mean Ultimate:  215376.22 #> Mean IBNR:       54389.22 #> SD IBNR:         19370.14 #> Total IBNR 75%:  65617.22 #> Total IBNR 95%:  89191.21 #>  mean(B) #> $ByOrigin #>       Mean IBNR #> 1981     0.0000 #> 1982   179.3249 #> 1983   645.6530 #> 1984  1709.1990 #> 1985  2807.1556 #> 1986  3687.6936 #> 1987  5372.3663 #> 1988 11163.2478 #> 1989 11177.3363 #> 1990 17647.2453 #>  #> $Totals #>               Total #> Mean IBNR: 54389.22 #>  quantile(B, c(0.75,0.95,0.99, 0.995)) #> $ByOrigin #>        IBNR 75%  IBNR 95%  IBNR 99% IBNR 99.5% #> 1981     0.0000     0.000     0.000      0.000 #> 1982   220.3238  1367.977  3060.579   3629.873 #> 1983  1088.9090  3173.708  4960.796   6270.826 #> 1984  2674.8965  5289.365  7991.119   9064.156 #> 1985  3964.5693  7628.258 10336.713  11558.160 #> 1986  4946.8657  8198.906 10951.729  12853.460 #> 1987  7007.9105 11280.426 14513.349  17229.377 #> 1988 14000.8210 20195.902 26784.041  28168.720 #> 1989 14909.4309 23719.853 28558.182  32446.893 #> 1990 25783.6734 41999.016 53969.268  61867.263 #>  #> $Totals #>                Totals #> IBNR 75%:    65617.22 #> IBNR 95%:    89191.21 #> IBNR 99%:   107677.06 #> IBNR 99.5%: 121189.77 #>"},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"summary print methods MackChainLadder   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"","code":"# S3 method for class 'MackChainLadder' summary(object, ...)  # S3 method for class 'MackChainLadder' print(x, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"x, object object class \"MackChainLadder\" ... optional arguments print summary methods","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"print.MackChainLadder calls summary.MackChainLadder   prints formatted version summary.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"summary.MackChainLadder gives list two elements back ByOrigin data frame Latest (latest actual claims costs),     Dev..Date (chain-ladder development date),     Ultimate (estimated ultimate claims cost), IBNR     (estimated IBNR), Mack.S.E (Mack's estimation standard     error IBNR), CV(IBNR) (Coefficient Variance=Mack.S.E/IBNR) Totals data frame totals origin periods. items     follow naming convention ByOrigin ","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"Markus Gesmann","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary.MackChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary and print function for Mack-chain-ladder — summary.MackChainLadder","text":"","code":"R <- MackChainLadder(RAA)  R #> MackChainLadder(Triangle = RAA) #>  #>      Latest Dev.To.Date Ultimate   IBNR Mack.S.E CV(IBNR) #> 1981 18,834       1.000   18,834      0        0      NaN #> 1982 16,704       0.991   16,858    154      143    0.928 #> 1983 23,466       0.974   24,083    617      592    0.959 #> 1984 27,067       0.943   28,703  1,636      713    0.436 #> 1985 26,180       0.905   28,927  2,747    1,452    0.529 #> 1986 15,852       0.813   19,501  3,649    1,995    0.547 #> 1987 12,314       0.694   17,749  5,435    2,204    0.405 #> 1988 13,112       0.546   24,019 10,907    5,354    0.491 #> 1989  5,395       0.336   16,045 10,650    6,332    0.595 #> 1990  2,063       0.112   18,402 16,339   24,566    1.503 #>  #>               Totals #> Latest:   160,987.00 #> Dev:            0.76 #> Ultimate: 213,122.23 #> IBNR:      52,135.23 #> Mack.S.E   26,880.74 #> CV(IBNR):       0.52  summary(R) #> $ByOrigin #>      Latest Dev.To.Date Ultimate       IBNR   Mack.S.E  CV(IBNR) #> 1981  18834   1.0000000 18834.00     0.0000     0.0000       NaN #> 1982  16704   0.9908676 16857.95   153.9539   142.9317 0.9284058 #> 1983  23466   0.9743653 24083.37   617.3709   592.1483 0.9591451 #> 1984  27067   0.9429978 28703.14  1636.1422   712.8539 0.4356919 #> 1985  26180   0.9050451 28926.74  2746.7363  1452.0903 0.5286603 #> 1986  15852   0.8128771 19501.10  3649.1032  1994.9878 0.5467063 #> 1987  12314   0.6937737 17749.30  5435.3026  2203.8385 0.4054675 #> 1988  13112   0.5458968 24019.19 10907.1925  5354.3405 0.4909000 #> 1989   5395   0.3362422 16044.98 10649.9841  6331.5430 0.5945120 #> 1990   2063   0.1121047 18402.44 16339.4425 24565.7757 1.5034647 #>  #> $Totals #>                  Totals #> Latest:    1.609870e+05 #> Dev:       7.553740e-01 #> Ultimate:  2.131222e+05 #> IBNR:      5.213523e+04 #> Mack S.E.: 2.688074e+04 #> CV(IBNR):  5.155965e-01 #>   summary(R)$ByOrigin$Ultimate #>  [1] 18834.00 16857.95 24083.37 28703.14 28926.74 19501.10 17749.30 24019.19 #>  [9] 16044.98 18402.44"},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"summary print methods MunichChainLadder object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"","code":"# S3 method for class 'MunichChainLadder' summary(object, ...)  # S3 method for class 'MunichChainLadder' print(x, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"x, object object class \"MunichChainLadder\" ... optional arguments print summary methods","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"print.MunichChainLadder calls summary.MunichChainLadder   prints formatted version summary.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"summary.MunichChainLadder gives list two elements back ByOrigin data frame Latest Paid (latest actual paid     claims costs), Latest Incurred (latest actual incurred     claims position), Latest P/Ratio (ratio latest     paid/incurred claims), Ult. Paid (estimate ultimate claims     cost based paid triangle), Ult. Incurred (estimate     ultimate claims cost based incurred triangle),Ult. P/      Ratio (ratio ultimate paid forecast / ultimate incurred forecast) Totals data frame totals origin periods. items     follow naming convention ByOrigin ","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"Markus Gesmann","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary.MunichChainLadder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary and print function for Munich-chain-ladder — summary.MunichChainLadder","text":"","code":"M <- MunichChainLadder(MCLpaid, MCLincurred) #> Warning: 'loglinear' model to estimate sigma_n doesn't appear appropriate.  #> p-value > 5. #>  est.sigma will be overwritten to 'Mack'. #>  Mack's estimation method will be used instead. #> Warning: 'loglinear' model to estimate sigma_n doesn't appear appropriate.  #> p-value > 5. #>  est.sigma will be overwritten to 'Mack'. #>  Mack's estimation method will be used instead. M #> MunichChainLadder(Paid = MCLpaid, Incurred = MCLincurred) #>  #>   Latest Paid Latest Incurred Latest P/I Ratio Ult. Paid Ult. Incurred #> 1       2,131           2,174            0.980     2,131         2,174 #> 2       2,348           2,454            0.957     2,385         2,443 #> 3       4,494           4,644            0.968     4,554         4,634 #> 4       5,850           6,142            0.952     6,070         6,182 #> 5       4,648           4,852            0.958     4,879         4,958 #> 6       4,010           4,406            0.910     4,599         4,672 #> 7       2,044           5,022            0.407     7,505         7,655 #>   Ult. P/I Ratio #> 1          0.980 #> 2          0.976 #> 3          0.983 #> 4          0.982 #> 5          0.984 #> 6          0.984 #> 7          0.980 #>  #> Totals #>             Paid Incurred P/I Ratio #> Latest:   25,525   29,694      0.86 #> Ultimate: 32,121   32,720      0.98 summary(M) #> $ByOrigin #>   Latest Paid Latest Incurred Latest P/I Ratio Ult. Paid Ult. Incurred #> 1        2131            2174        0.9802208  2131.000      2174.000 #> 2        2348            2454        0.9568052  2384.842      2443.222 #> 3        4494            4644        0.9677003  4553.624      4634.358 #> 4        5850            6142        0.9524585  6069.509      6182.347 #> 5        4648            4852        0.9579555  4878.950      4957.805 #> 6        4010            4406        0.9101226  4598.996      4672.402 #> 7        2044            5022        0.4070092  7504.576      7655.378 #>   Ult. P/I Ratio #> 1      0.9802208 #> 2      0.9761052 #> 3      0.9825792 #> 4      0.9817483 #> 5      0.9840948 #> 6      0.9842894 #> 7      0.9803012 #>  #> $Totals #>              Paid Incurred P/I Ratio #> Latest:   25525.0 29694.00 0.8596013 #> Ultimate: 32121.5 32719.51 0.9817230 #>  summary(M)$ByOrigin #>   Latest Paid Latest Incurred Latest P/I Ratio Ult. Paid Ult. Incurred #> 1        2131            2174        0.9802208  2131.000      2174.000 #> 2        2348            2454        0.9568052  2384.842      2443.222 #> 3        4494            4644        0.9677003  4553.624      4634.358 #> 4        5850            6142        0.9524585  6069.509      6182.347 #> 5        4648            4852        0.9579555  4878.950      4957.805 #> 6        4010            4406        0.9101226  4598.996      4672.402 #> 7        2044            5022        0.4070092  7504.576      7655.378 #>   Ult. P/I Ratio #> 1      0.9802208 #> 2      0.9761052 #> 3      0.9825792 #> 4      0.9817483 #> 5      0.9840948 #> 6      0.9842894 #> 7      0.9803012"},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"summary method checkTriangleInflation   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"","code":"# S3 method for class 'checkTriangleInflation' summary(object, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"object object class checkTriangleInflation ... optional arguments summary method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"summary.checkTriangleInflation shows summary checkTriangleInflation object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"summary.checkTriangleInflation gives named numeric array three rows. rate Inflation rate specific development period R2 \\(R^2\\) coefficient regression curve points Number points used","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary.checkTriangleInflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for a checkTriangleInflation object — summary.checkTriangleInflation","text":"","code":"test <- checkTriangleInflation( MedMal$MedMalOutstanding / MedMal$MedMalOpen )  summary(test) #>                1         2         3         4         5         6        7 #> rate   0.1561905 0.2949749 0.3110902 0.3417400 0.3296170 0.3216367 0.276155 #> R2     0.7995755 0.8946321 0.8578738 0.9405004 0.9887844 0.9831351 1.000000 #> Points 8.0000000 7.0000000 6.0000000 5.0000000 4.0000000 3.0000000 2.000000"},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for a cyEffTest object — summary.cyEffTest","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"summary method cyEffTest   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"","code":"# S3 method for class 'cyEffTest' summary(object, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"object object class cyEffTest ... optional arguments summary method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"summary.cyEffTest shows summary cyEffTest object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"summary.cyEffTest gives list three elements back Table data frame containing statistics calendar year Totals data frame totals main statistics dataframe Table Range data frame containing upper lower limits confidence interval range","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary.cyEffTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for a cyEffTest object — summary.cyEffTest","text":"","code":"test <- cyEffTest(RAA)  summary(test) #> $Table #>   j S_j L_j Z_j n m    E_Zj    Var_Zj #> 1 2   1   1   1 2 0 0.50000 0.2500000 #> 2 3   3   0   0 3 1 0.75000 0.1875000 #> 3 4   3   1   1 4 1 1.25000 0.4375000 #> 4 5   1   3   1 4 1 1.25000 0.4375000 #> 5 6   1   3   1 4 1 1.25000 0.4375000 #> 6 7   2   4   2 6 2 2.06250 0.6210938 #> 7 8   4   4   4 8 3 2.90625 0.8037109 #> 8 9   4   4   4 8 3 2.90625 0.8037109 #>  #> $Totals #>           Totals #> Z      14.000000 #> E[Z]   12.875000 #> Var[Z]  3.978516 #>  #> $Range #>           Value #> Lower  8.965613 #> Upper 16.784387 #>"},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for a dfCorTest object — summary.dfCorTest","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"summary method dfCorTest   object","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"","code":"# S3 method for class 'dfCorTest' summary(object, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"object object class dfCorTest ... optional arguments summary method","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"summary.dfCorTest shows summary dfCorTest object.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"summary.dfCorTest gives list two elements back Results data frame containing summary statistics Range data frame containing upper lower limits confidence interval range","code":""},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"Marco De Virgilis devirgilis.marco@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/summary.dfCorTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for a dfCorTest object — summary.dfCorTest","text":"","code":"test <- dfCorTest(RAA)  summary(test) #> $Results #>             Value #> T      0.06955782 #> E[T]   0.00000000 #> Var[T] 0.03571429 #>  #> $Range #>            Value #> Lower -0.1274666 #> Upper  0.1274666 #>"},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 Class ","title":"S4 Class ","text":"S4 class \"list\" data part. class created facilitate validation extraction data.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"S4 Class ","text":"Objects can created calls form new(\"triangles\", ...), use (...,\"triangles\"), ... \"list\".","code":""},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 Class ","text":".Data: Object class \"list\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"S4 Class ","text":"Class \"list\", data part. Class \"vector\", class \"list\", distance 2.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"S4 Class ","text":"Mse signature(ModelFit = \"GMCLFit\", FullTriangles = \"triangles\"): See Mse Mse signature(ModelFit = \"MCLFit\", FullTriangles = \"triangles\"):  See Mse [ signature(x = \"triangles\", = \"missing\", j = \"numeric\", drop = \"logical\"): Method primitive function \"[\" subset certain columns. drop=TRUE, rows composed \"NA\"s removed. Dimensions dropped. [ signature(x = \"triangles\", = \"missing\", j = \"numeric\", drop = \"missing\"): Method primitive function \"[\" subset certain columns, rows composed \"NA\"s removed. Dimensions dropped. [ signature(x = \"triangles\", = \"numeric\", j = \"missing\", drop = \"logical\"): Method primitive function \"[\" subset certain rows. drop=TRUE, columns composed \"NA\"s removed. Dimensions dropped. [ signature(x = \"triangles\",  = \"numeric\", j = \"missing\", drop = \"missing\"): Method primitive function \"[\" subset certain rows, columns composed \"NA\"s removed. Dimensions dropped. [ signature(x = \"triangles\", = \"numeric\", j = \"numeric\", drop = \"missing\"): Method primitive function \"[\" subset certain rows columns. Dimensions dropped. [<- signature(x = \"triangles\", = \"numeric\", j = \"numeric\", value = \"list\"): Method primitive function \"[<-\" replace one cell triangle  values specified value. coerce signature(= \"list\", = \"triangles\"): Method construct \"triangles\" object \"list\". dim signature(x = \"triangles\"): Method get dimensions. return value vector length 3, first element number triangles, sencond number accident years, third number development years. cbind2 signature(x = \"triangles\", y=\"missing\"): Method column bind triangles using cbind internally. rbind2 signature(x = \"triangles\", y=\"missing\"):  Method row bind triangles using rbind internally.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S4 Class ","text":"Wayne Zhang actuary_zhang@hotmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/triangles-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 Class ","text":"","code":"data(auto)  # \"coerce\" auto <- as(auto,\"triangles\")  # transform \"list\" to be \"triangles\"  # method for \"[\" auto[,4:6,drop=FALSE] # rows of all NA's not dropped #> An object of class \"triangles\" #> [[1]] #>         [,1]   [,2]   [,3] #>  [1,] 305107 327850 340669 #>  [2,] 303182 328932 340948 #>  [3,] 345542 367760 377999 #>  [4,] 340669 359979 369248 #>  [5,] 354490 372376 382738 #>  [6,] 365780 386725     NA #>  [7,] 367357     NA     NA #>  [8,]     NA     NA     NA #>  [9,]     NA     NA     NA #> [10,]     NA     NA     NA #>  #> [[2]] #>         [,1]   [,2]   [,3] #>  [1,] 347726 350995 353598 #>  [2,] 349295 351038 351583 #>  [3,] 384699 387678 387954 #>  [4,] 384819 380914 380163 #>  [5,] 409322 394154 392802 #>  [6,] 406711 406503     NA #>  [7,] 400540     NA     NA #>  [8,]     NA     NA     NA #>  [9,]     NA     NA     NA #> [10,]     NA     NA     NA #>  #> [[3]] #>         [,1]   [,2]   [,3] #>  [1,]  77398  88079  95695 #>  [2,]  92356 104958 112399 #>  [3,]  88435 102044 112672 #>  [4,]  98063 113149 121515 #>  [5,] 104936 117663 126180 #>  [6,] 108835 121326     NA #>  [7,] 111987     NA     NA #>  [8,]     NA     NA     NA #>  [9,]     NA     NA     NA #> [10,]     NA     NA     NA #>  auto[,4:6]      # drop rows of all NA's #> An object of class \"triangles\" #> [[1]] #>        [,1]   [,2]   [,3] #> [1,] 305107 327850 340669 #> [2,] 303182 328932 340948 #> [3,] 345542 367760 377999 #> [4,] 340669 359979 369248 #> [5,] 354490 372376 382738 #> [6,] 365780 386725     NA #> [7,] 367357     NA     NA #>  #> [[2]] #>        [,1]   [,2]   [,3] #> [1,] 347726 350995 353598 #> [2,] 349295 351038 351583 #> [3,] 384699 387678 387954 #> [4,] 384819 380914 380163 #> [5,] 409322 394154 392802 #> [6,] 406711 406503     NA #> [7,] 400540     NA     NA #>  #> [[3]] #>        [,1]   [,2]   [,3] #> [1,]  77398  88079  95695 #> [2,]  92356 104958 112399 #> [3,]  88435 102044 112672 #> [4,]  98063 113149 121515 #> [5,] 104936 117663 126180 #> [6,] 108835 121326     NA #> [7,] 111987     NA     NA #>   auto[8:10, ,drop=FALSE] #columns of all NA's not dropped #> An object of class \"triangles\" #> [[1]] #>        [,1]   [,2]   [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,] 127177 244249 317972   NA   NA   NA   NA   NA   NA    NA #> [2,] 128631 246803     NA   NA   NA   NA   NA   NA   NA    NA #> [3,] 126288     NA     NA   NA   NA   NA   NA   NA   NA    NA #>  #> [[2]] #>        [,1]   [,2]   [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,] 378754 361097 369328   NA   NA   NA   NA   NA   NA    NA #> [2,] 351081 335507     NA   NA   NA   NA   NA   NA   NA    NA #> [3,] 329236     NA     NA   NA   NA   NA   NA   NA   NA    NA #>  #> [[3]] #>       [,1]  [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,] 31803 63471 92439   NA   NA   NA   NA   NA   NA    NA #> [2,] 40559 77667    NA   NA   NA   NA   NA   NA   NA    NA #> [3,] 46285    NA    NA   NA   NA   NA   NA   NA   NA    NA #>  auto[8:10, ]       #columns of all NA's  dropped #> An object of class \"triangles\" #> [[1]] #>        [,1]   [,2]   [,3] #> [1,] 127177 244249 317972 #> [2,] 128631 246803     NA #> [3,] 126288     NA     NA #>  #> [[2]] #>        [,1]   [,2]   [,3] #> [1,] 378754 361097 369328 #> [2,] 351081 335507     NA #> [3,] 329236     NA     NA #>  #> [[3]] #>       [,1]  [,2]  [,3] #> [1,] 31803 63471 92439 #> [2,] 40559 77667    NA #> [3,] 46285    NA    NA #>   auto[1:2,1] #> An object of class \"triangles\" #> [[1]] #>        [,1] #> [1,] 101125 #> [2,] 102541 #>  #> [[2]] #>        [,1] #> [1,] 325423 #> [2,] 323627 #>  #> [[3]] #>       [,1] #> [1,] 19827 #> [2,] 22331 #>   # replacement method auto[1:2,1] <- list(1,2,3) auto[1,2] #> An object of class \"triangles\" #> [[1]] #>        [,1] #> [1,] 209921 #>  #> [[2]] #>        [,1] #> [1,] 336426 #>  #> [[3]] #>       [,1] #> [1,] 44449 #>      dim(auto) #> [1]  3 10 10  cbind2(auto[1:2,1]) #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 rbind2(auto[1:2,1]) #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    2 #> [4,]    2 #> [5,]    3 #> [6,]    3"},{"path":"http://mages.github.io/ChainLadder/reference/tweedieMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Reserve Risk Capital Report — tweedieReserve methods","title":"Reserve Risk Capital Report — tweedieReserve methods","text":"Main purpose function create report assess reserve risk capital given object tweedieReserve class. displays ultimate one year risk views given percentiles.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reserve Risk Capital Report — tweedieReserve methods","text":"","code":"# S3 method for class 'tweedieReserve' print(x, ...) # S3 method for class 'tweedieReserve' summary(object, q = c(0.5, 0.75, 0.9, 0.95, 0.995),...)"},{"path":"http://mages.github.io/ChainLadder/reference/tweedieMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reserve Risk Capital Report — tweedieReserve methods","text":"x object class tweedieReserve. object object class tweedieReserve. q Array percentiles displayed. ... used","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieMethods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reserve Risk Capital Report — tweedieReserve methods","text":"list two items Predicton data.frame ultimate view reserve risk   one year view reserve risk given percentiles. Diagnostic Quick diagnostic show deterministic reserve vs ultimate         view one year view best estimate. model working properly,         three value much different.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieMethods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reserve Risk Capital Report — tweedieReserve methods","text":"Alessandro Carrato MSc FIA OA alessandro.carrato@gmail.com","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/tweedieMethods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reserve Risk Capital Report — tweedieReserve methods","text":"","code":"if (FALSE) { # \\dontrun{ tw <- tweedieReserve(MW2008, rereserving = TRUE) summary(tw) # For comparison  CDR.BootChainLadder(BootChainLadder(MW2008)) } # }"},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Tweedie Stochastic Reserving Model — tweedieReserve","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"function implements loss reserving models within generalized linear model framework order generate full predictive distribution loss reserves. Besides, generates also one year risk view useful derive reserve risk capital Solvency II framework. Finally, allows user validate model error changing different model parameters, regression structure diagnostics Tweedie p parameter.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"","code":"tweedieReserve(triangle, var.power = 1,                      link.power = 0, design.type = c(1, 1, 0),                      rereserving = FALSE, cum = TRUE, exposure = FALSE,                      bootstrap = 1, boot.adj = 0, nsim = 1000,                      proc.err = TRUE, p.optim = FALSE,                     p.check = c(0, seq(1.1, 2.1, by = 0.1), 3),                     progressBar = TRUE, ...)"},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"triangle object class triangle. var.power index (p) power variance function \\(V(\\mu)=\\mu^p\\).     Default p = 1, -dispersed Poisson model.     NULL, assumed (1, 2)     estimated using cplm package.     See tweedie. link.power index power link function. default link.power = 0   produces log link. See tweedie. design.type 3 dimension array specifies design matrix underlying   GLM. dimensions represent respectively: origin period,   development calendar period. Accepted values : 0 (  modelled), 1 (modelled factor) 2 (modelled   variable). Default c(1,1,0), common   specification actuarial literature (origin development period   factors, calendar period modelled). parameter calendar period specified,       linear regression log CY parameter fitted estimate future values, thus recommended validate running plot gamma values (see output gamma_y) . rereserving Boolean, TRUE one year risk view loss reserve   distribution derived. Default FALSE. Note, runtime   can materially increase set TRUE. cum Boolean, indicating whether input triangle   cumulative incremental along development period.   TRUE,   triangle assumed cumulative scale,   converted incremental losses internally GLM fitted. exposure Boolean, TRUE exposure defined   triangle object specified offset GLM   model specification. Default FALSE. bootstrap Integer, specifies type bootstrap parameter error.   Accepted values : 0 (disabled), 1 (parametric),   2 (semi-parametric). Default 1. boot.adj Integer, specified methodology using semi-parametric   bootstrapping. Accepted values : 0 (cycles   values pseudo-triangle >= 0), 1 (overwrite negative   values 0.01). Default 0. Note, runtime can materially   increase set  0, struggle find pseudo-triangles >= 0) nsim Integer, number simulations derive loss reserve distribution.   Default 1000. Note, high num simulations materially   increase runtime, particular re-reserving algorithm used   well. proc.err Boolean, TRUE process error (coherent specified   model) added forecasted distribution. Default TRUE. p.optim Boolean, TRUE model estimates MLE Tweedie's   p parameter. Default FALSE. Recommended use validate Tweedie's     p parameter. p.check p.optim=TRUE, vector p values consideration. values must larger one (response variable exact zeros, values must one two). Default c(0,seq(1.1,2.1,=0.1),3). fitting Tweedie p-value straightforward process, please refer tweedie.profile, p.vec argument. progressBar Boolean, TRUE progress bar shown console   give indication bootstrap progress. ... Arguments passed onto function glm   cpglm contrasts control.   important offset weight specified.   Otherwise, error reported program quit.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"output object class \"glm\" following components: call matched call. summary data frame containing predicted loss reserve   statistics. following items displayed: Latest: Latest paid Det.Reserve: Deterministic reserve, .e. MLE GLM       estimate Reserve Ultimate: Ultimate cost, defined       Latest+Det.Reserve Dev..Date: Development date, defined       Latest/Ultimate following items available bootstrap>0 Expected.Reserve: expected reserve, defined       average reserve simulations.       roughly Det.Reserve. Prediction.Error: prediction error reserve,       defined sqrt simulations. Please note       proc.err=FALSE, field contains parameter       error given bootstrap. CoV: Coefficient Variation, defined       Prediction. Error/Expected.Reserve. Expected Ultimate: expected ultimate, defined       Expected.Reserve+Latest. following items availbale bootstrap>0 & reserving=TRUE Expected.Reserve_1yr: reserve derived sum       next year payment expected value re-reserve       end year. similar       Expected.Reserve Det.Reserve. ,       recommended change regression structure parameters. Prediction.Error_1yr: prediction error       prospective Claims Development Result (CDR), defined       Wüthrich (CDR=R(0)-X-R(1)). Emergence.Pattern: emergence pattern defined       Prediction.Error_1yr/Prediction.Error.  Triangle input triangle. FullTriangle completed triangle, empty cells   original triangle filled model predictions. model fitted GLM, class glm cpglm.   convenient work component model fit   information wanted. scale dispersion parameter phi bias model bias, defined bias<-sqrt(n/d.f) GLMReserve Deterministic reserve, .e. MLE GLM estimate   Reserve gamma_y calendar year used, displays observed   fitted calendar year (usually called \"gamma\"\") factors. res.diag data frame residual diagnostics.   contains: unscaled: GLM Pearson residuals. unscaled.biasadj: GLM Person residuals adjusted       bias, .e. unscaled.biasadj=unscaled*bias. scaled: GLM Person scaled residuals, .e.       scaled=unscaled/sqrt(phi). scaled, biasadj: GLM Person scaled residuals       adjusted bias, .e. scaled.biasadj=scaled*bias. dev: Development year. origin: Origin year. cy: Calendar year.  [boostrap>1] distr.res_ult full distribution \"Ultimate View\" [rereserve=TRUE] distr.res_1yr full distribution \"1yr View\"","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"Gigante, Sigalotti. Model risk claims reserving generalized linear models. Giornale dell'Istituto Italiano degli Attuari, Volume LXVIII. 55-87. 2005 England, Verrall. Stochastic claims reserving general insurance. B..J. 8, III. 443-544. 2002 England, Verrall. Predictive distributions outstanding liabilities general insurance. ..S. 1, II. 221-270. 2006 Peters, Shevchenko, Wüthrich, Model uncertainty claims reserving within Tweedie's compound poisson models. Astin Bulletin 39(1). 1-33. 2009 Renshaw, Verrall. stochastic model underlying chain-ladder technique. B..J. 4, IV. 903-923. 1998","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"Alessandro Carrato MSc FIA OA alessandro.carrato@gmail.com","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"function born initially fork glmReserve  Wayne Zhang. like thank work permitted  speed coding.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"Note runtime can materially increase certain parameter   setting. See details.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/tweedieReserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tweedie Stochastic Reserving Model — tweedieReserve","text":"","code":"if (FALSE) { # \\dontrun{ ## Verrall's ODP Model is a Tweedie with p=1, log link and  ## origin/development periods as factors, thus c(1,1,0) res1 <- tweedieReserve(MW2008, var.power=1, link.power=0,                             design.type=c(1,1,0), rereserving=TRUE,                            progressBar=TRUE)  ## To get directly ultimate view and respective one year view  ## at selected percentiles summary(res1)   #To get other interesting statistics res1$summary  ## In order to validate the Tweedie parameter 'p', it is interesting to  ## review its loglikelihood profile. Please note that, given the nature  ## of our data, it is expected that we may have some fitting issues for  ## given 'p' parameters, thus any results/errors should be considered  ## only indicatively. Considering different regression structures is anyway  ## recommended. Different 'p' values can be defined via the p.check array  ## as input of the function.  ## See help(tweedie.profile), p.vec parameter, for further information. ## Note: The parameters rereserving and bootstrap can be set to 0 to speed up  ## the process, as they aren't needed.   ## Runs a 'p' loglikelihood profile on the parameters  ## p=c(0,1.1,1.2,1.3,1.4,1.5,2,3) res2 <- tweedieReserve(MW2008, p.optim=TRUE,                         p.check=c(0,1.1,1.2,1.3,1.4,1.5,2,3),                         design.type=c(1,1,0),                          rereserving=FALSE, bootstrap=0,                          progressBar=FALSE)  ## As it is possible to see in this example, the MLE of p (or xi) results  ## between 0 and 1, which is not possible as Tweedie models aren't  ## defined for 0 < p < 1, thus the Error message.  ## But, despite this, we can conclude that overall the value p=1 could be  ## reasonable for this dataset, as anyway it seems to be near the MLE.   ## In order to consider an inflation parameter across the origin period,  ## it may be interesting to change the regression structure to c(0,1,1)  ## to get the same estimates of the Arithmetic Separation Method, as  ## referred in Gigante/Sigalotti.  res3 <- tweedieReserve(MW2008, var.power=1, link.power=0,                             design.type=c(0,1,1), rereserving=TRUE,                            progressBar=TRUE) res3  ## An assessment on future fitted calendar year values (usually defined  ## as \"gamma\") is recommended plot(res3$gamma_y)  ## Model residuals can be plotted using the res.diag output plot(scaled.biasadj ~ dev, data=res3$res.diag) # Development year plot(scaled.biasadj ~ cy, data=res3$res.diag) # Calendar year plot(scaled.biasadj ~ origin, data=res3$res.diag) # Origin year } # }"},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative and incremental triangles — Cumulative and incremental triangles","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"Functions convert cumulative incremental triangles","code":""},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"","code":"incr2cum(Triangle, na.rm=FALSE) cum2incr(Triangle)"},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"Triangle triangle. Assume columns development \tperiod, use transpose otherwise. na.rm logical. missing values removed?","code":""},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"incr2cum transforms incremental triangle cumulative   triangle, cum2incr provides reserve operation.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"functions return triangle.","code":""},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"Markus Gesmann, Christophe Dutang","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/reference/utilityfunctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative and incremental triangles — Cumulative and incremental triangles","text":"","code":"# See the Taylor/Ashe example in Mack's 1993 paper  #original triangle GenIns #>       dev #> origin      1       2       3       4       5       6       7       8       9 #>     1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>     2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>     3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>     4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>     5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>     6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>     7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>     8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>     9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>     10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>       dev #> origin      10 #>     1  3901463 #>     2       NA #>     3       NA #>     4       NA #>     5       NA #>     6       NA #>     7       NA #>     8       NA #>     9       NA #>     10      NA  #incremental triangle cum2incr(GenIns) #>       dev #> origin      1       2       3       4      5      6      7      8      9    10 #>     1  357848  766940  610542  482940 527326 574398 146342 139950 227229 67948 #>     2  352118  884021  933894 1183289 445745 320996 527804 266172 425046    NA #>     3  290507 1001799  926219 1016654 750816 146923 495992 280405     NA    NA #>     4  310608 1108250  776189 1562400 272482 352053 206286     NA     NA    NA #>     5  443160  693190  991983  769488 504851 470639     NA     NA     NA    NA #>     6  396132  937085  847498  805037 705960     NA     NA     NA     NA    NA #>     7  440832  847631 1131398 1063269     NA     NA     NA     NA     NA    NA #>     8  359480 1061648 1443370      NA     NA     NA     NA     NA     NA    NA #>     9  376686  986608      NA      NA     NA     NA     NA     NA     NA    NA #>     10 344014      NA      NA      NA     NA     NA     NA     NA     NA    NA  #original triangle incr2cum(cum2incr(GenIns)) #>       dev #> origin      1       2       3       4       5       6       7       8       9 #>     1  357848 1124788 1735330 2218270 2745596 3319994 3466336 3606286 3833515 #>     2  352118 1236139 2170033 3353322 3799067 4120063 4647867 4914039 5339085 #>     3  290507 1292306 2218525 3235179 3985995 4132918 4628910 4909315      NA #>     4  310608 1418858 2195047 3757447 4029929 4381982 4588268      NA      NA #>     5  443160 1136350 2128333 2897821 3402672 3873311      NA      NA      NA #>     6  396132 1333217 2180715 2985752 3691712      NA      NA      NA      NA #>     7  440832 1288463 2419861 3483130      NA      NA      NA      NA      NA #>     8  359480 1421128 2864498      NA      NA      NA      NA      NA      NA #>     9  376686 1363294      NA      NA      NA      NA      NA      NA      NA #>     10 344014      NA      NA      NA      NA      NA      NA      NA      NA #>       dev #> origin      10 #>     1  3901463 #>     2       NA #>     3       NA #>     4       NA #>     5       NA #>     6       NA #>     7       NA #>     8       NA #>     9       NA #>     10      NA  # See the example in Mack's 1999 paper  #original triangle Mortgage #>       dev #> origin     1      2       3       4       5       6       7       8       9 #>      1 58046 127970  476599 1027692 1360489 1647310 1819179 1906852 1950105 #>      2 24492 141767  984288 2142656 2961978 3683940 4048898 4115760      NA #>      3 32848 274682 1522637 3203427 4445927 5158781 5342585      NA      NA #>      4 21439 529828 2900301 4999019 6460112 6853904      NA      NA      NA #>      5 40397 763394 2920745 4989572 5648563      NA      NA      NA      NA #>      6 90748 951994 4210640 5866482      NA      NA      NA      NA      NA #>      7 62096 868480 1954797      NA      NA      NA      NA      NA      NA #>      8 24983 284441      NA      NA      NA      NA      NA      NA      NA #>      9 13121     NA      NA      NA      NA      NA      NA      NA      NA incMortgage <- cum2incr(Mortgage) #add missing values incMortgage[1,1] <- NA incMortgage[2,1] <- NA incMortgage[1,2] <- NA  #with missing values argument incr2cum(incMortgage, na.rm=TRUE) #>       dev #> origin     1      2       3       4       5       6       7       8       9 #>      1     0      0  348629  899722 1232519 1519340 1691209 1778882 1822135 #>      2     0 117275  959796 2118164 2937486 3659448 4024406 4091268      NA #>      3 32848 274682 1522637 3203427 4445927 5158781 5342585      NA      NA #>      4 21439 529828 2900301 4999019 6460112 6853904      NA      NA      NA #>      5 40397 763394 2920745 4989572 5648563      NA      NA      NA      NA #>      6 90748 951994 4210640 5866482      NA      NA      NA      NA      NA #>      7 62096 868480 1954797      NA      NA      NA      NA      NA      NA #>      8 24983 284441      NA      NA      NA      NA      NA      NA      NA #>      9 13121     NA      NA      NA      NA      NA      NA      NA      NA  #compared to  incr2cum(Mortgage) #>       dev #> origin     1       2       3        4        5        6        7        8 #>      1 58046  186016  662615  1690307  3050796  4698106  6517285  8424137 #>      2 24492  166259 1150547  3293203  6255181  9939121 13988019 18103779 #>      3 32848  307530 1830167  5033594  9479521 14638302 19980887       NA #>      4 21439  551267 3451568  8450587 14910699 21764603       NA       NA #>      5 40397  803791 3724536  8714108 14362671       NA       NA       NA #>      6 90748 1042742 5253382 11119864       NA       NA       NA       NA #>      7 62096  930576 2885373       NA       NA       NA       NA       NA #>      8 24983  309424      NA       NA       NA       NA       NA       NA #>      9 13121      NA      NA       NA       NA       NA       NA       NA #>       dev #> origin        9 #>      1 10374242 #>      2       NA #>      3       NA #>      4       NA #>      5       NA #>      6       NA #>      7       NA #>      8       NA #>      9       NA"},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0219","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.19","title":"ChainLadder 0.2.19","text":"CRAN release: 2024-07-21 Fixed links documentation references functions different R packages, reported CRAN checks","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0218","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.18","title":"ChainLadder 0.2.18","text":"CRAN release: 2023-06-27 Changes Matrix package (1.5-5) impacted MultiChainLadder2 function, need resolved. cases function fails data results near-singular matrix inversions","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0217","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.17","title":"ChainLadder 0.2.17","text":"CRAN release: 2023-01-12 New seed argument BootChainLadder set optional seed random generator","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0216","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.16","title":"ChainLadder 0.2.16","text":"CRAN release: 2022-08-23 New weights argument MuinchChainLadder Fixed typo checking weight argument glmReserve. Thanks Kennedy Mwavu reporting issue Fixed weights CDR.MackChainLadder. Thanks Giorgia Chieruzzi contributing patch","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0215","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.15","title":"ChainLadder 0.2.15","text":"CRAN release: 2022-01-09 Started using pkgdown create package website Added ChainLadder hexagon graphic Moved vignettes/NEWS.Rmd NEW.md autogenerate changelog pkgdown Clarified extract MackChainLadder objects package vignette","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0214","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.14","title":"ChainLadder 0.2.14","text":"CRAN release: 2021-11-11 Updated package dependencies address warning CRAN","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0213","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.13","title":"ChainLadder 0.2.13","text":"CRAN release: 2021-10-06 Updated URLs bibliography package vignette help files","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0212","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.12","title":"ChainLadder 0.2.12","text":"CRAN release: 2021-01-05 Moved continuous integration testing TravisCI GitHub Actions Changed vignette format Sweave RMarkdown facilitate easier testing using GitHub Actions","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0211","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.11","title":"ChainLadder 0.2.11","text":"CRAN release: 2020-02-10 Fixed .triangle ‘long’ data set, input data missing values. Thanks Dimitri Minassian reporting issue. Fixed standard error estimation MackChainLadder tail factor > 1 alpha = 2. Thanks Valentin Cornaciu reporting issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-0210","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.10","title":"ChainLadder 0.2.10","text":"CRAN release: 2019-05-27 Added Berquist-Sherman Paid Claim Development Adjustment methods adjust paid claims based underlying relation paid closed claims. Added tests check calendar year effect, correlation development factors inflation. Thanks Marco De Virgilis.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-029","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.9","title":"ChainLadder 0.2.9","text":"CRAN release: 2018-12-06 Fix .triangle.data.frame. labels origin development period mixed move away reshape2 aggregate version 0.2.8. Thanks Edward Tasker reporting issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-028","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.8","title":"ChainLadder 0.2.8","text":"CRAN release: 2018-11-12 Fix print statements align generic print methods. Thanks Markus Senn Clarified ‘weights’ argument chainladder MackChainLadder can used Removed dependency reshape2 deprecated","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-027","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.7","title":"ChainLadder 0.2.7","text":"CRAN release: 2018-10-16 New quantile method ‘MackChainLadder’ andv function QuantileIFRS17 estimate IFRS 17 Risk Adjustment. Thanks Eric Dal Moro Yuriy Krvavych","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-026","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.6","title":"ChainLadder 0.2.6","text":"CRAN release: 2018-05-29 New function ‘triangle’ create triangle given set vectors observed data. Thanks Vincent Goulet","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-025","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.5","title":"ChainLadder 0.2.5","text":"CRAN release: 2017-10-19 Fixed bug Mack.S.E function “sigma[- 2]^2” zero. Thanks Patrick Green reporting fixing issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-024","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.4","title":"ChainLadder 0.2.4","text":"CRAN release: 2017-01-01 Fixed meta information NEWS vignette, shown NEWS CRAN","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-023","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.3","title":"ChainLadder 0.2.3","text":"CRAN release: 2016-10-21","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"news-file-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"NEWS file","title":"ChainLadder 0.2.3","text":"Moved NEWS file Markdown format.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"triangles-may-now-have-non-numeric-rownames-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"Triangles may now have non-numeric rownames","title":"ChainLadder 0.2.3","text":"Previously required row column names triangle convertible numeric, although “requirement” always cause problem. example, following sets rownames GenIns beginning Date accident year. plot lattice=TRUE option, previously blow , now displays nice headings. can often useful “origin” values necessarily convertible numeric. example, suppose table claim detail various evaluation dates. Invariably, table Date field holding date loss. nice able summarize data accident year “cuts”. turns ’s builtin function R get way . ’s called ‘cut’. take GenIns data long format generate 50 claims per accident period. assign claim random date within year. incurred (paid) “value” given random perturbation one-fiftieth GenInsLong$value. accumulate detail accident year triangle using ChainLadder’s .triangle method. summarized triangle displayed end similar GenIns, informative row labels. user encouraged experiment cut’s – e.g., breaks = \"quarters\" generate accident quarter triangles.","code":"x <- GenIns rownames(x) <- paste0(2001:2010, \"-01-01\") plot(x, lattice=TRUE) x <- GenInsLong # start off y with x's headings y <- x[0,] names(y)[1] <- \"lossdate\" set.seed(1234) n = 50 # number of simulated claims per accident perior for (i in 1:nrow(x)) {   y <- rbind(y,              data.frame(                lossdate = as.Date(                  as.numeric(as.Date(paste0(x[i, \"accyear\"]+2000, \"-01-01\"))) +                    round(runif(n, 0, 364),0), origin = \"1970-01-01\"),                devyear = x[i, \"devyear\"],                incurred.claims = rnorm(n, mean = x[i, \"incurred claims\"] / n,                                          sd = x[i, \"incurred claims\"]/(10*n))              )) } # here's the magic cut y$ay <- cut(y$lossdate, breaks = \"years\") # this summarized triangle is very similar to GenIns as.triangle(y, origin = \"ay\", dev = \"devyear\", value = \"incurred.claims\")"},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-aslongtriangle-function-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"New as.LongTriangle function","title":"ChainLadder 0.2.3","text":"new function, .LongTriangle, convert triangle “wide” (matrix) format “long” (data.frame) format. differs ChainLadder’s .data.frame.triangle method rownames colnames Triangle stored factors. feature can particularly important plotting triangle order “origin” “dev” values important. Additionally, columns resulting data frame may renamed default values (“origin”, “dev”, “value”) using “varnames” argument “origin”/“dev” “value.name” argument “value”. following example, GenIns triangle ChainLadder converted data.frame non-default names: following plot, last accident year last development age shown last, rather second displayed alphabetically (ggplot’s default character data):","code":"GenLong <- as.LongTriangle(GenIns,               varnames = c(\"accident year\", \"development age\"),                            value.name = \"Incurred Loss\") library(ggplot2) ggplot(GenLong, aes(x=`development age`, y = `Incurred Loss`,                     group = `accident year`, color = `accident year`)) +   geom_line()"},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"glmreserve-exposure-attribute-may-now-have-names-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"glmReserve “exposure” attribute may now have names","title":"ChainLadder 0.2.3","text":"Previously, “exposure” attribute assigned triangle use glmReserve, assumed/expected user supply values order accident years. , behind scenes, glmReserve use arithmetic formula match exposure appropriate accident year using numeric “origin” values triangle converted long format. glmReserve now allows “exposure” “names” coincide rownames triangle, used match origin long format. example, newly found ?glmReserve.","code":"GenIns2 <- GenIns   rownames(GenIns2) <- paste0(2001:2010, \"-01-01\")   expos <- (7 + 1:10 * 0.4) * 10   names(expos) <- rownames(GenIns2)   attr(GenIns2, \"exposure\") <- expos   glmReserve(GenIns2)"},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"glmreserve-adds-support-for-negative-binomial-glm-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"glmReserve adds support for negative binomial GLM","title":"ChainLadder 0.2.3","text":"glmReserve function now supports negative binomial GLM, natural way model -dispersion count data. model fitted glm.nb function MASS package. fit negative binomial GLM loss triangle, simply set nb = TRUE calling glmReserve function:","code":"(fit6 <- glmReserve(GenIns, nb = TRUE))"},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-unit-tests-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"New unit tests","title":"ChainLadder 0.2.3","text":"New files /inst/unittests/ folder can used future enhancements runit.Triangles.R Triangles.R runit.glmReserve.R glmReserve.R Contributors new contributions R files encouraged utilize runit scripts testing, , course, add runit scripts warrantted.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"clarified-warnings-issued-by-mackchainladder-0-2-3","dir":"Changelog","previous_headings":"Changes","what":"Clarified warnings issued by MackChainLadder","title":"ChainLadder 0.2.3","text":"default, R’s lm method generates warning detects “essentially perfect fit”. can happen one column triangle identical previous column; .e., link ratios column . example , second column fixed constant, 1.05, times first column. ChainLadder previously issued lm warning . may raised concern user none warranted. Now ChainLadder issues “informational warning”:","code":"x <- matrix(byrow = TRUE, nrow = 4, ncol = 4,             dimnames = list(origin = LETTERS[1:4], dev = 1:4),             data = c(               100, 105, 106, 106.5,               200, 210, 211, NA,               300, 315, NA, NA,               400, NA, NA, NA)             ) mcl <- MackChainLadder(x, est.sigma = \"Mack\")  Warning messages: 1: In summary.lm(x) : essentially perfect fit: summary may be unreliable 2: In summary.lm(x) : essentially perfect fit: summary may be unreliable 3: In summary.lm(x) : essentially perfect fit: summary may be unreliable x <- matrix(byrow = TRUE, nrow = 4, ncol = 4,             dimnames = list(origin = LETTERS[1:4], dev = 1:4),             data = c(               100, 105, 106, 106.5,               200, 210, 211, NA,               300, 315, NA, NA,               400, NA, NA, NA)             ) mcl <- MackChainLadder(x, est.sigma = \"Mack\")"},{"path":[]},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"fixed-tail-extrapolation-0-2-3","dir":"Changelog","previous_headings":"Bug fixes","what":"Fixed tail extrapolation","title":"ChainLadder 0.2.3","text":"Fixed tail extrapolation Vignette. (Thanks Mark Lee.) Fixed summary calls. Updated documentation weights parameter chainladder method. calculation tail log-linear extrapolation given vignette minor error. corrected, result now agrees results MackChainLadder(RAA, tail=TRUE). calculation tail using log-linear extrapolation ChainLadder.R potential error - clratios values less unity dropped, extrapolation started quantity indexed length f, value fn. changes results clratios pattern like e.,g.: … 1.1, 0.98,1.01,0.005 (.e. link ratio less unity last value) Minor fix comments ChainLadder.R MackChainLadder.R, fixing notation alpha now consistent documentation Mack’s original paper.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-022-2015-08-31","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.2 [2015-08-31]","title":"ChainLadder 0.2.2 [2015-08-31]","text":"CRAN release: 2015-08-31 Added back functionality estimate index parameter compound Poisson model ‘glmReserve’ (now depends package cplm). works ‘formula’ ‘bootstrap’. Added methods ‘resid’ plot class ‘glmReserve’ (now depends ggplot2)","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-021","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.1","title":"ChainLadder 0.2.1","text":"CRAN release: 2015-07-11","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.2.1","text":"New function PaidIncurredChain Fabio Concina, based 2010 Merz & Wuthrich paper Paid-incurred chain claims reserving method plot.MackChainLadder plot.BootChainLadder gained new argument ‘’, allowing users specify sub-plot display. Thanks Christophe Dutang suggestion.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.2.1","text":"Updated NAMESPACE file comply new R CMD checks R-3.3.0 Removed package dependencies grDevices Hmisc Expanded package vignette new paragraph importing spreadsheet data, new section “Paid-Incurred Chain Model” added example full claims development picture “One Year Claims Development Result” section.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-020","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.2.0","title":"ChainLadder 0.2.0","text":"CRAN release: 2015-03-04","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.2.0","text":"New generic function CDR estimate one year claims development result. S3 methods Mack bootstrap model added already: CDR.MackChainLadder estimate one year claims development result Mack model without tail factor, based papers Merz & Wuthrich (2008, 2014) CDR.BootChainLadder estimate one year claims development result bootstrap model, using ideas code Giuseppe Crupi. New function tweedieReserve estimate reserves GLM framework, including one year claims development result. Package vignette new chapter ‘One Year Claims Development Result’. New example data MW2008 MW2014 form Merz & Wuthrich (2008, 2014) papers","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.2.0","text":"Source code development moved Google Code GitHub: https://github.com/mages/ChainLadder .data.frame.triangle now gives warning message dev. period character Alessandro Carrato, Giuseppe Crupi Mario Wuthrich added authors, thanks major contribution code documentation Christophe Dutang, Arnaud Lacoume Arthur Charpentier added contributors, thanks feedback, guidance code contribution","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-019","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.9","title":"ChainLadder 0.1.9","text":"CRAN release: 2014-12-20","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-1-9","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.1.9","text":"Updated README DESCRIPTION file comply changes CRAN policy.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-018","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.8","title":"ChainLadder 0.1.8","text":"CRAN release: 2014-08-23","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-8","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"ChainLadder 0.1.8","text":"BootChainLadder produced warnings triangles static developments argument process.distr set “od.pois”. .triangle.data.frame didn’t work data.frame less three rows Arguments xlab ylab passed plot.triangle, lattice=TRUE","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-017","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.7","title":"ChainLadder 0.1.7","text":"CRAN release: 2013-09-28","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.1.7","text":"glmReserve function currently doesn’t allow parameter var.power set NULL, called cpglm function cplm package. cplm package due dependency issues lme4 longer available via CRAN.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-016","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.6","title":"ChainLadder 0.1.6","text":"CRAN release: 2013-08-09","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.6","text":"new function, CLFMdelta, finds value delta model coefficients resulting ‘chainladder’ function value argument delta consistent input vector ‘selected’ age--age factors, subject restrictions ‘selected’ factors relative input ‘Triangle’. See paper “Family Chain-Ladder Factor Models Selected Link Ratios” Bardis, Majidi, Murphy, Variance Journal new ‘coef’ method returns age--age factor coefficients regression models estimated ‘chainladder’ function. Exports function “LRfunction” calculates Triangle’s link ratio function can used plot space “reasonable link ratio selections” per CLFM paper.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.1.6","text":"Removed package dependencies DESCRIPTION moved Imports.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-015-6","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.5-6","title":"ChainLadder 0.1.5-6","text":"CRAN release: 2013-03-17","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-5-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.5-6","text":"list output MackChainLadder function now includes parameter risk process risk breakdowns total risk estimate sum projected losses across origin years development age. Mack Method’s recursive parameter risk calculation now enables Dr. Mack’s original two-term formula (default) optionally three-term formula found Murphy’s 1994 paper 2006 paper Buchwalder, Buhlmann, Merz, Wuthrich. Mack Method examples.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-5-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"ChainLadder 0.1.5-5","text":"phi-scaling factor BootChainLadder incorrect. Instead calculating number data items upper left triangle n(n+1)/2, n(n-1)/2 used. Thanks Thomas Girodot reporting bug.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-015-4","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.5-4","title":"ChainLadder 0.1.5-4","text":"CRAN release: 2012-11-11","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-5-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.5-4","text":"names = origin (rownames) Triangle rowsname = name row dimension Triangle colnames = dev (colnames) Triangle colsname = name column dimension Triangle function additional argument, na.values, vector values (e.g., zero) synonymous NA searching rightmost non-NA value .triangle.data.frame now aggregates multiple data.frame records one (origin, dev) observation found (previous version took first observation).","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-1-5-4","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.1.5-4","text":"vignette updated sections Multivariate chain-ladder, Clark’s method Generalised linear model methods MunichChainLadder longer accepts triangles rows columns function laid data sets yet. Thanks Ben Escoto highlighting issue.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-5-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.5-3","text":"function “glmReserve” now simulates predictive distributions loss reserves bootstrapping used. “glmReserve” allows variance function compound Poisson distribution estimated data, using estimation method provided “cplm” package. offer new function “MultiChainLadder2” fit several commonly used multivariate chain ladder models, much easier use.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-1-5-3","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.1.5-3","text":"output “glmReserve” made class “glmReserve”, instead class “glm” used previous versions. Fix bugs exposure included “glmReserve”. Thanks Alessandro Carrato reporting bug. “mse.method” argument “glmReserve” supports partial match. Dramatic improvement documentation “MultiChainLadder”. Complete sections “MultiChainLadder” “glmReserve” vignettes.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-015-2","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.5-2","title":"ChainLadder 0.1.5-2","text":"CRAN release: 2012-03-25","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-5-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.5-2","text":"started writing vignette. current version still draft far complete. Feedback much appreciated.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"changes-0-1-5-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"ChainLadder 0.1.5-2","text":"Removed .Internal call make ChainLadder compliant R 2.15.0 Changed argument “t” plot.triangle “type” order consistent plot.default","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-5-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"ChainLadder 0.1.5-2","text":".triangle() gave triangles back, development periods ordered, input data frame unordered development periods different units, e.g. dev=c(1,100,10) Thanks Ben Escoto reporting issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-015-1","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.5-1","title":"ChainLadder 0.1.5-1","text":"CRAN release: 2011-11-12 Internal changes plot.MackChainLadder pass new checks introduced R 2.14.0. Commented unnecessary creation ‘io’ matrix ClarkCapeCod function. Allows analysis large matrices CapeCod without running RAM. ‘io’ matrix integral part ClarkLDF, remains function. Removed “conclusion” stated QQplot clark methods. Restore ‘par’ settings upon exit Slight change title Reduced minimum ‘theta’ boundary weibull growth function Added warnings .triangle origin dev. period numeric","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-015-0","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.5-0","title":"ChainLadder 0.1.5-0","text":"CRAN release: 2011-08-29","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-5-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.5-0","text":"New function glmReserve, implements loss reserving models within generalized linear model framework following paper England P. Verrall R. (1999)","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-014-4","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.4-4","title":"ChainLadder 0.1.4-4","text":"Minor changes reflect rigours package build process R >= 2.14.0 Start message uses now packageStartupMessage rather cat allow message suppressed.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-014-3","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.4-3","title":"ChainLadder 0.1.4-3","text":"CRAN release: 2011-01-18","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-4-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.4-3","text":"Individual components now contain distinct values within Clark’s methodologies ‘summary’ methods produce “reports” display results form typical loss development Bornhuetter-Ferguson exhibits “Table” functions now produce results shown tables pp. 64, 65 68 Clark’s paper ‘vcov’ method produces covariance matrix estimated parameters ‘ata’ function exists calculate “age--age” development factors loss “triangle”, well simple volume weighted averages","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-014-2","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.4-2","title":"ChainLadder 0.1.4-2","text":"CRAN release: 2011-01-03","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.4-2","text":"TruncatedGrowth function value Clark Cape Cod method incorrectly printed Table68 data.frame calculations based average date loss (argument adol=TRUE). underlying calculations used correct adol adjustment, printed output incorrect.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-4-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.4-1","text":"ClarkLDF ClarkCapeCod functions: additional functionality Clark’s methods now work “one-row triangles” – .e., loss experience one origin period Clark’s methods work “phase-shifted” triangles – .e., triangles whose first age coincide end origin period. Example: accident year origin periods September 30th evaluation dates. ‘vcov’ method now exists produce covariance matrix estimated parameters using approach Clark’s paper Additional values (lists) returned Clark’s methods: FI = Fisher Information matrix Clark defines paper (.e., without sigma^2 value) dR = gradient reserves function evaluated optimal parameter values value = value log-likelihood function solution counts = number evaluations log likelihood derivative convergence Fine-tuning maximum likelihood numerical algorithm’s control parameters Enable consistent convergence properties R’s 32-bit 64-bit environments Initial starting values weibull function adjusted successful convergence across wider set triangles Upper bounds introduced “L-BFGS-B” maximum likelihood method bound weibull away unity early age solution found boundary parameter region, conceivable “optimal” solution might exist boundary constraints conservative, warning given","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.4-1","text":"parameters returned methods scaled versions; now original scales. loss development factor (LDF) returned ClarkCapeCod documented","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-014-0","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.4-0","title":"ChainLadder 0.1.4-0","text":"CRAN release: 2010-11-11","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.4-0","text":"New implementation methods David Clark’s “LDF Curve Fitting” paper 2003 Forum Daniel Murphy. Includes LDF CapeCod methods (functions ‘ClarkLDF’ ‘ClarkCapeCod’, respectively) Programmed handle log-logistic weibull growth functions Printing object returned function results table similar p. 65 paper Plotting object results four residual plots, including Q-Q plot results Shapiro-Wilk test","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-013-4","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.3-4","title":"ChainLadder 0.1.3-4","text":"CRAN release: 2010-10-19","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-3-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.3-4","text":"‘residuals.MackChainLadder’: Zero weights applied MackChainLadder caused error. Thanks Ernesto Schirmacher reporting bug.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-013-3","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.3-3","title":"ChainLadder 0.1.3-3","text":"CRAN release: 2010-05-16","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-3-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.3-3","text":"New multivariate chain ladder function ‘MultiChainLadder’ Wayne (Yanwei) Zhang actuaryzhang@uchicago.edu New function ‘getLatestCumulative’ available. returns given triangle recent values origin period. New demos! Type demo(package=‘ChainLadder’) information. Demos exist following topics: ChainLadder, MackChainLadder, DatabaseExamples, MSOffice, MultiChainLadder New SWord example file ChainLadder_SWord_Example.doc, demonstrates R code snippets can integrated Word file. following R command system.file(“SWord”, package=“ChainLadder”) show directory file.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-3-3","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.3-3","text":"examples MackChainLadder ChainLadder-package shortened demo files created instead. examples focus syntax function calls, demos give detailed information might want use functions business context.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-3-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.3-3","text":"‘plot.MunichChainLadder’: labels axis residuals plots mixed . Thanks Ben Escoto reporting issue. ‘estimate.sigma’ didn’t check sigma>0 applying log-linear regression. Thanks Dan Murphy reporting bug.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-13","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-13","title":"ChainLadder 0.1.2-13","text":"CRAN release: 2009-11-24","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-13","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-13","text":"‘MackChainLadder’ new argument ‘alpha’ additional weighting parameter. result, argument ‘weights’ now just , weights 0 1. argument ‘alpha’ describes different chain ladder age--age factors: default alpha development periods 1. See Mack’s 1999 paper: alpha=1 gives historical chain ladder age--age factors, alpha=0 gives straight average observed individual development factors alpha=2 result ordinary regression intercept 0. Basic ‘chainladder’ function now available using linear models. See ?chainladder information. examples ‘MackChainLadder’ demonstrate apply MackChainLadder several triangles ‘one-line’. ‘.data.frame.triangle’ new argument ‘lob’ (e.g. line business) allows set additional label column data frame output.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-2-13","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.2-13","text":"‘MackChainLadder’: Latest position incomplete triangles cases returned correctly. Thanks Ben Escoto reporting providing patch. ‘MackChainLadder’: Mack.S.E correctly calculated non-standard chain ladder age--age factors (e.g. straight averages ordinary regression origin) due missing argument ‘alpha’. Chain ladder age--age factors always applied diagonal elements calculate forecasts, although data sub-diagonal triangle exist. Many thanks Przemyslaw Sloma reporting issues.","code":""},{"path":[]},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-2-12","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.2-12","text":"New triangle class S3 methods plot, print conversion triangles data.frames vis versa New utility functions ‘incr2cum’ ‘cum2incr’ convert incremental triangles cumulative triangles vis versa. Thanks Chritophe Dutang. New logical argument lattice plot.MackChainLadder (plot.triangle), allows plot developments origin period separate panels.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-2-12","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.2-12","text":"‘MunichChainLadder’: tail factors accepted. Thanks Stefan Pohl reporting issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-11","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-11","title":"ChainLadder 0.1.2-11","text":"CRAN release: 2009-03-28","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-2-11","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.2-11","text":"‘MackChainLadder’: ‘F.se’[ultimate] calculated ultimate column instead latest paid.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-10","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-10","title":"ChainLadder 0.1.2-10","text":"CRAN release: 2009-03-27","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-10","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-10","text":"‘MackChainLadder’ new arguments ‘tail.sigma’ ‘tail.se’ provide estimates variability given tail factor.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-2-10","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.2-10","text":"‘MackChainLadder’: calculation ‘Mack.S.E’ use ultimate sigma factor estimate ‘Mack.S.E’ tail factor > 1 provided (Thanks Mark Hoffmann reporting issue).","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-9","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-9","title":"ChainLadder 0.1.2-9","text":"CRAN release: 2009-02-01","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-9","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-9","text":"Updated documentation work new Rd-file parser (R version >= 2.9.0) Updated documentation ‘ABC’ data (Thanks Glen Barnett)","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-8","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-8","title":"ChainLadder 0.1.2-8","text":"CRAN release: 2008-11-03","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-8","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-8","text":"Updated documentation ‘MackChainLadder’ (Thanks Daniel Murphy)","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-7","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-7","title":"ChainLadder 0.1.2-7","text":"CRAN release: 2008-10-24","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-7","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-7","text":"‘MackChainLadder’ gives two elements back: ‘Mack.ProcessRisk’ ‘Mack.ParameterRisk’ process parameter risk error (Thanks Daniel Murphy) summary output ‘MackChainLadder’ label ‘CV’ changed ‘CV(IBNR)’ clarify show coefficient variance IBNR. ‘MackChainLadder’ provides new example plots CV(IBNR) vs. origin period CV(Ultimate) vs. origin period Updated documentation","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-6","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-6","title":"ChainLadder 0.1.2-6","text":"CRAN release: 2008-10-14","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-6","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-6","text":"Updated documentation","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-5","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-5","title":"ChainLadder 0.1.2-5","text":"CRAN release: 2008-10-13","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"new-features-0-1-2-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"ChainLadder 0.1.2-5","text":"New function ‘BootChainLadder’, based papers England Verrall, Barnett Zehnwirth ‘MackChainLadder’ ‘MunichChainLadder’ allow tail factors ‘MackChainLadder’ estimates overall standard error total IBNR New arguments ‘tail’ ‘est.sigma’ MackChainLadder, control tail factor estimation sigma_{n-1} New arguments ‘tailP’, ‘tailI’ ‘est.sigmaP’, ‘est.sigmaI’ ‘MunichChainLadder’, passed ‘MackChainLadder’ control tail factor estimation sigma_{n-1} Paid Incurred triangle ‘Mack-, ’Munich-, ’BootChainLadder’ accept (mxn) matrices m>=n, e.g accident years development years New example data sets: ‘ABC’ (annual run-triangle worker’s compensation portfolio large company), ‘qpaid’, ‘qincurred’ (‘made-’ data quarterly development triangle annual origin period) Triangles higher development period frequency (e.g quarterly) origin period frequency (e.g annual) can used ‘blown-’ common period frequency, see help ‘qpaid’ ‘Mack-, ’Munich- ’BootChainLadder’ accept ‘blown-’ triangles higher development period frequency origin period frequency filled ‘NA’, see help ‘qpaid’","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"user-visible-changes-0-1-2-5","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"ChainLadder 0.1.2-5","text":"summary functions ‘Mack-, ’Munich-, ’BootChainLadder’ give list back two elements: ‘ByOrigin’ ‘Totals’ Change labels: origin years -> origin period development years -> development origin Coefficient Variation abbreviate ‘CV’ instead ‘CoV’ example spreadsheet ‘ChainLadder_in_Excel.xls’ new examples, including ‘BootChainLadder’ New greeting message R-call ‘library(ChainLadder)’ Improved documentation","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"bug-fixes-0-1-2-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ChainLadder 0.1.2-5","text":"‘MunichChainLadder’: calculation ‘lambdaP’ ‘lambdI’ incorrect. Thanks Beat Huggler reporting issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-4","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-4","title":"ChainLadder 0.1.2-4","text":"R/BootstrapReserve.R Included functions BootChainLadder function. BootChainLadder procedure provides predictive distribution reserves cumulative claims development triangle. R/BootstrapReserve.R, MackChainLadder.R, MunichChainLadder summary methods MackChainLadder, MunichChainLadder, BootChainLadder give list back two elements “ByOrigin” “Totals” R/zzz.R Included .onLoad function produce little message ChainLadder package loaded. Excel/ChainLadder_in_Excel.xls Added new examples BootChainLadder use Rapply call functions ChainLadder package.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-2","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-2","title":"ChainLadder 0.1.2-2","text":"R/MackChainLadder.R Included tail factor estimation. function MackChainLadder new argument “tail” either estimate tail factor via log-linear regression set manually. data/qpaid.RData, qincurred.RData Added examples quarterly development triangles","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-012-0","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.2-0","title":"ChainLadder 0.1.2-0","text":"R/MackChainLadder.R Prepared functions Mack.S.E Total.Mack.S.E accept triangles rows full NA values. might useful non quadratic triangles","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-011-5","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.1-5","title":"ChainLadder 0.1.1-5","text":"CRAN release: 2008-05-19 R/MackChainLadder.R Bug fix: Function Mack.S.E give F.se back, needed TotalMack.S.E. Many thanks Florian Leitenstorfer reporting issue.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-011-4","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.1-4","title":"ChainLadder 0.1.1-4","text":"CRAN release: 2008-05-14 inst/Excel/ChainLadder_in_Excel.xls uses now dynamic functions shows call ‘plot’ Excel R/MackChainLadderFunctions.R: Changed labels Reserving IBNR (=Incurred Reported)","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-011-3","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.1-3","title":"ChainLadder 0.1.1-3","text":"CRAN release: 2008-02-19 R/MackChainLadderFunctions.R: Mack.S.E checks now sigma>0 log linear regression sigma estimate sigma[n-1]","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-011-2","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.1-2","title":"ChainLadder 0.1.1-2","text":"CRAN release: 2008-02-07 R/MackChainLadderFunctions.R: added function TotalMack.S.E function estimate overall standard error reserve. MackChainLadder gives now also Total.Mack.S.E. back plus estimate standard error individual age--age factors F.se.","code":""},{"path":"http://mages.github.io/ChainLadder/news/index.html","id":"chainladder-011-1","dir":"Changelog","previous_headings":"","what":"ChainLadder 0.1.1-1","title":"ChainLadder 0.1.1-1","text":"CRAN release: 2007-12-07 First release CRAN","code":""}]
